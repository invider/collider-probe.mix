{"scene":{"path":"/","id":1,"name":"$","type":"object","kind":"Frame","proto":"Frame","data":{"head":" root mod representing the scene mix","details":"Any entity within the game (a function,\nan image, a sound, a json config...)\nis represented as a node within\nscene hierarchy.","notes":"<b><i>Everything is in its right place...</i></b>\nThe placement of a node often determines the behavior.\nExplore various places within the mod structure\nto see what goes where.\n\n"},"dir":{"res":{"path":"/res","id":2,"name":"res","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" container for auto-loaded resources","details":"Resources are located and loaded automatically.\nAfter upload, they are patched according\nto the original file hierarchy.\n\n","notes":"Technically, resources can be loaded to any node on the scene,\nbut by convention we are usually place them under /res.\nDo not brake that convention, unless there is a good reason for it.\n\n\nThe /res node is also responsible for load progress tracking -\nit knows how many resources have been scheduled to load\nand how many are already loaded.\n\n"},"dir":{"sfx":{"path":"/res/sfx","id":3,"name":"sfx","type":"object","parent":2,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","dir":{"boot":{"path":"/res/sfx/boot","id":4,"name":"boot","type":"object","parent":3,"mod":1,"modName":"$","kind":"HTMLAudioElement","proto":"HTMLAudioElement","dir":{"name":{"path":"/res/sfx/boot/name","id":5,"name":"name","type":"string","parent":4,"mod":1,"modName":"$","class":"string","title":"unknown"}}}}},"hud":{"path":"/res/hud","id":6,"name":"hud","type":"object","parent":2,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"hint":" ignore"},"dir":{"buttonPane":{"path":"/res/hud/buttonPane","id":7,"name":"buttonPane","type":"object","parent":6,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"icon":{"path":"/res/hud/icon","id":8,"name":"icon","type":"object","parent":6,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","dir":{"array":{"path":"/res/hud/icon/array","id":9,"name":"array","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"cue":{"path":"/res/hud/icon/cue","id":10,"name":"cue","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"dna":{"path":"/res/hud/icon/dna","id":11,"name":"dna","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"env":{"path":"/res/hud/icon/env","id":12,"name":"env","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"file":{"path":"/res/hud/icon/file","id":13,"name":"file","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"frame":{"path":"/res/hud/icon/frame","id":14,"name":"frame","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"fun":{"path":"/res/hud/icon/fun","id":15,"name":"fun","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"home":{"path":"/res/hud/icon/home","id":16,"name":"home","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"lab":{"path":"/res/hud/icon/lab","id":17,"name":"lab","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"lib":{"path":"/res/hud/icon/lib","id":18,"name":"lib","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"log":{"path":"/res/hud/icon/log","id":19,"name":"log","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"mod":{"path":"/res/hud/icon/mod","id":20,"name":"mod","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"object":{"path":"/res/hud/icon/object","id":21,"name":"object","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"res":{"path":"/res/hud/icon/res","id":22,"name":"res","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"sys":{"path":"/res/hud/icon/sys","id":23,"name":"sys","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"text":{"path":"/res/hud/icon/text","id":24,"name":"text","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"trap":{"path":"/res/hud/icon/trap","id":25,"name":"trap","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}},"up":{"path":"/res/hud/icon/up","id":26,"name":"up","type":"object","parent":8,"mod":1,"modName":"$","kind":"HTMLImageElement","proto":"HTMLImageElement","dir":{}}}}}}}},"alt":{"path":"/alt","id":27,"name":"alt","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" defines in-scope functions and objects","details":"This frame contains shortcuts to widely used functions, structures\nand values.\nTo access those, you don't have to specify any container.\nJust name the entity directly, e.g.:\n    PI\n    stroke(.2, .4, .5)\n    line(10, 10, 100, 100)\n    fill('#808080')\n    rect(120, 120, 60, 60)\n    kill(this)","notes":"You can define your own in-scope values\nby placing object and function definitions in mod/alt folder.\n\n"},"dir":{"key":{"path":"/alt/key","id":28,"name":"key","type":"object","parent":27,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":" the map of keys pressed at the moment ","usage":" [code]","details":"The flags by [keyCode] or [keyChar] will be *true*\nwhen a corresponding key is down.\n\n*[keyChar]* - represent a unicode character behind the key (layout senseitive).\n\n*[keyCode]* - represents a layout independant key code with first letter lower-cased (so traditional JS 'KeyA' becomes 'keyA'.\n","note":" Use <a href='#./trap'>traps<a> when you need to track actual keypress events.\n"},"dir":{"name":{"path":"/alt/key/name","id":29,"name":"name","type":"string","parent":28,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"pad":{"path":"/alt/pad","id":30,"name":"pad","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the gamepad status object","at":[{"id":"param","type":"number","name":"gamepadId","line":"id of the gamepad"},{"id":"returns","type":"Gamepad","name":"-","line":"an object representing the gamepad #[id] and it's state"}],"usage":"(gamepadId: number): Gamepad","details":"When *gamepadId* is provided, returns particular gamepad state if connected. Overwise, returns array of all connected gamepad objects.\n"}},"mouse":{"path":"/alt/mouse","id":31,"name":"mouse","type":"object","parent":27,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":" contains mouse state - current and previous coordinates, buttons mask, plus mouse *out* flag","at":[{"id":"param","type":"number","name":"x","line":"mouse pointer x coordinate"},{"id":"param","type":"number","name":"y","line":"mouse pointer y coordinate"},{"id":"param","type":"number","name":"lx","line":"mouse pointer previous x coordinate (dx = lx - x)"},{"id":"param","type":"number","name":"ly","line":"mouse pointer previous y coordinate (dy = ly - y)"},{"id":"param","type":"bitmask","name":"buttons","line":"a bitmask of the pressed buttons"},{"id":"param","type":"boolean","name":"out","line":"flag to mark the mouse out of the canvas"}],"usage":" { x, y, lx, ly, buttons, out }\n"},"dir":{"name":{"path":"/alt/mouse/name","id":32,"name":"name","type":"string","parent":31,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"mix":{"path":"/alt/mix","id":33,"name":"mix","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" shallow copy all properties of passed objects into a new object","at":[{"id":"param","type":"object","name":"obj1","line":"first object to mix"},{"id":"param","type":"object","name":"obj2","line":"second object to mix"},{"id":"param","name":"...","line":"additional optional objects to mix"},{"id":"returns","type":"object","name":"-","line":"a new object with mixed in properties from all the sources"}],"usage":"(obj1: object, obj2: object, ...): object"}},"augment":{"path":"/alt/augment","id":34,"name":"augment","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" augment object by deeply copying properties from all supplied objects","at":[{"id":"param","type":"object","name":"target","line":"a target object to be augmented"},{"id":"param","type":"object","name":"obj1","line":"a first object to copy values from into the target"},{"id":"param","name":"...","line":"additional optional object for target augmentation"}],"usage":"(target: object, obj1: object, ...)","details":"Properties with names *_*, *__*, *___*, *_$* are ignored,\nsince can cause a cycle.\n\nNo other properties that can cause a cycle should be\npresent in the passed objects.\n"}},"supplement":{"path":"/alt/supplement","id":35,"name":"supplement","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" supplement object by deeply copying missing properties from all supplied object","at":[{"id":"param","type":"object","name":"target","line":"a target object to be supplemented"},{"id":"param","type":"object","name":"obj1","line":"a first object to copy values from into the target"},{"id":"param","name":"...","line":"additional optional objects to supplement the target"}],"usage":"(target: object, obj1: object, ...)","details":"Already set properties will be ignored.\nThis is it's main difference with\n<a href=\"./alt/augment\">augment(target, obj1, ...)</a>,\nwhich replaces already existing values.\n\nProperties with names *_*, *__*, *___*, *_$* are ignored,\nsince can cause a cycle.\n\nNo other properties that can cause a cycle should be\npresent in passed objects.\n"}},"before":{"path":"/alt/before","id":36,"name":"before","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" chain the supplied *patchFunction* before *obj.functionName*","usage":"(obj: object, functionName: string, patchFunction: function)","at":[{"id":"param","type":"object","name":"obj","line":"a target object containing the function to chain"},{"id":"param","type":"string","name":"functionName","line":"name of the method, e.g. object's property containing the function"},{"id":"param","type":"function","name":"patchFunction","line":"a function to execute before the target function"}],"details":"The original method, if present, is going to be replaced by\na chain container function that is responsible for the call\nto patchFunction and than the original function.\n\nNote, that the object context (this) is preserved among\nall chained functions.\n\n\n"}},"after":{"path":"/alt/after","id":37,"name":"after","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" chain the supplied *patchFunction* after *obj.functionName*","at":[{"id":"param","type":"object","name":"obj","line":"a target object containing the function to chain"},{"id":"param","type":"string","name":"functionName","line":"name of the method, e.g. object's property containing the function"},{"id":"param","type":"function","name":"patchFunction","line":"a function to execute after the target function"}],"usage":"(obj: object, functionName: string, patchFunction: function)","details":"The original method, if present, is going to be replaced by\na chain container function that is responsible for the call\nto the original function and then to patchFunction.\n\nNote, that the object context (this) is preserved among\nall chained functions.\n"}},"chain":{"path":"/alt/chain","id":38,"name":"chain","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns a chain container function that applies both functions","at":[{"id":"param","type":"function","name":"fn1","line":"the first function in the call chain"},{"id":"param","type":"function","name":"fn2","line":"the second function in the call chain"},{"id":"returns","type":"function","name":"-","line":"the chain function that runs fn1, then fn2"}],"usage":"(fn1: function, fn2: function): function","details":"If just one function from the pair fn1/fn2 is present,\nit will be returned instead of a chain function.\n\nIn case of both parameters missing,\nan empty function will be returned.\n\nThe chain function preserves the context,\nso when run on an object, both fn1 and fn2\nwill get that object as this.\n\n"}},"isFun":{"path":"/alt/isFun","id":39,"name":"isFun","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" determines if *target* is a function","at":[{"id":"param","type":"any","name":"target","line":"any value to check"},{"id":"returns","type":"boolen","name":"-","line":"true if the passed value is a function"}],"usage":"(target: any): boolen"}},"isClass":{"path":"/alt/isClass","id":40,"name":"isClass","type":"function","parent":27,"mod":1,"modName":"$","kind":"function"},"isObj":{"path":"/alt/isObj","id":41,"name":"isObj","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" determines if *target* is an object","at":[{"id":"param","type":"any","name":"target","line":"any value to check"},{"id":"returns","type":"boolen","name":"-","line":"true if the passed value is an object"}],"usage":"(target: any): boolen"}},"isString":{"path":"/alt/isString","id":42,"name":"isString","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" determines if *target* is a String","at":[{"id":"param","type":"any","name":"target","line":"any value to check"},{"id":"returns","type":"boolen","name":"-","line":"true if the passed value is a string"}],"usage":"(target: any): boolen"}},"isNumber":{"path":"/alt/isNumber","id":43,"name":"isNumber","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" determines if *target* is a Number","at":[{"id":"param","type":"any","name":"target","line":"any value to check"},{"id":"returns","type":"boolen","name":"-","line":"true if the passed value is a number"}],"usage":"(target: any): boolen"}},"isFrame":{"path":"/alt/isFrame","id":44,"name":"isFrame","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" determines if *target* is a Frame","at":[{"id":"param","type":"any","name":"target","line":"any value to check"},{"id":"returns","type":"boolen","name":"-","line":"true if the passed value is a Frame"}],"usage":"(target: any): boolen"}},"isArray":{"path":"/alt/isArray","id":45,"name":"isArray","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" determines if *target* is an Array","at":[{"id":"param","type":"any","name":"target","line":"any value to check"},{"id":"returns","type":"boolen","name":"-","line":"true if the passed value is an array"}],"usage":"(target: any): boolen"}},"isContainer":{"path":"/alt/isContainer","id":46,"name":"isContainer","type":"function","parent":27,"mod":1,"modName":"$","kind":"function"},"isEmpty":{"path":"/alt/isEmpty","id":47,"name":"isEmpty","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" checks if the *target* object/array is empty ","at":[{"id":"param","type":"any | object | array","name":"target","line":"an object or an array to check"},{"id":"returns","type":"boolean","name":"-","line":"true if object or array has any own values"}],"usage":"(target: any | object | array): boolean","details":"Returns true for undefined, null, '', 0, false.\nReturns false for any non-object and non-array values.\n\nFor objects, only own properties are counted in.\n"}},"assert":{"path":"/alt/assert","id":48,"name":"assert","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" assert a condition, throw exception if failed ","at":[{"id":"param","type":"boolean","name":"condition","line":"a logical expression that is expected to evaluate in true to pass"},{"id":"param","type":"string","name":"message","line":"an error message for failed assertion"},{"id":"returns","type":"boolean","name":"-","line":"assumed always to be true"}],"usage":"(condition: boolean, message: string): boolean","details":"Has a number of refinement functions for convenience:\n\n    assert.number(...)\n    assert.string(...)\n    assert.object(...)\n    assert.fun(...)\n    assert.empty(...)\n    assert.notEmpty(...)\nThe interface is the same as in assert(condition, message).\n"}},"E":{"path":"/alt/E","id":49,"name":"E","type":"number","parent":27,"mod":1,"modName":"$","class":"number","title":"unknown"},"PI":{"path":"/alt/PI","id":50,"name":"PI","type":"number","parent":27,"mod":1,"modName":"$","class":"number","title":"unknown"},"PI2":{"path":"/alt/PI2","id":51,"name":"PI2","type":"number","parent":27,"mod":1,"modName":"$","class":"number","title":"unknown"},"TAU":{"path":"/alt/TAU","id":52,"name":"TAU","type":"number","parent":27,"mod":1,"modName":"$","class":"number","title":"unknown"},"HALF_PI":{"path":"/alt/HALF_PI","id":53,"name":"HALF_PI","type":"number","parent":27,"mod":1,"modName":"$","class":"number","title":"unknown"},"abs":{"path":"/alt/abs","id":54,"name":"abs","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the absolute value of *n*","tags":" math","at":[{"id":"param","type":"number","name":"n"},{"id":"returns","type":"number","name":""}],"usage":"(n: number): number","notes":" Just a reference to Math.abs().\n"}},"pow":{"path":"/alt/pow","id":55,"name":"pow","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns *n* raised to the power of *p*","tags":" math","at":[{"id":"param","type":"number","name":"n"},{"id":"param","type":"number","name":"p"},{"id":"returns","type":"number","name":""}],"usage":"(n: number, p: number): number","notes":" Just a reference to Math.pow().\n"}},"sqrt":{"path":"/alt/sqrt","id":56,"name":"sqrt","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the positive square root of *n*","tags":" math","at":[{"id":"param","type":"number","name":"n"},{"id":"returns","type":"number","name":""}],"usage":"(n: number): number","notes":" Just a reference to Math.sqrt().\n\n"}},"min":{"path":"/alt/min","id":57,"name":"min","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the smallest of numbers","tags":" math","at":[{"id":"param","type":"number","name":"n1"},{"id":"param","type":"number","name":"n2"},{"id":"param","type":"number","name":"...","line":"additional optional numbers"},{"id":"returns","type":"number","name":""}],"usage":"(n1: number, n2: number, ...: number): number","details":"Running without parameters returns Infinity\n    min() === Infinity","notes":" Just a reference to Math.min().\n"}},"max":{"path":"/alt/max","id":58,"name":"max","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the largest of numbers","tags":" math","at":[{"id":"param","type":"number","name":"n1"},{"id":"param","type":"number","name":"n2"},{"id":"param","type":"number","name":"...","line":"additional optional numbers"},{"id":"returns","type":"number","name":""}],"usage":"(n1: number, n2: number, ...: number): number","details":"Running without parameters returns -Infinity\n    max() === -Infinity","notes":" Just a reference to Math.max().\n"}},"ceil":{"path":"/alt/ceil","id":59,"name":"ceil","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the smallest integer greater than or equal to *n*","tags":" math","at":[{"id":"param","type":"number","name":"n"},{"id":"returns","type":"number","name":""}],"usage":"(n: number): number","notes":" Just a reference to Math.ceil().\n"}},"floor":{"path":"/alt/floor","id":60,"name":"floor","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the largest integer less than or equal to *n*","tags":" math","at":[{"id":"param","type":"number","name":"n"},{"id":"returns","type":"number","name":""}],"usage":"(n: number): number","notes":" Just a reference to Math.floor().\n"}},"round":{"path":"/alt/round","id":61,"name":"round","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns *n* rounded to the nearest integer","tags":" math","at":[{"id":"param","type":"number","name":"n"},{"id":"returns","type":"number","name":""}],"usage":"(n: number): number","notes":" Just a reference to Math.round().\n"}},"sin":{"path":"/alt/sin","id":62,"name":"sin","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the sine of the angle *a*","tags":" math","at":[{"id":"param","type":"number/radians","name":"a"},{"id":"returns","type":"number","name":""}],"usage":"(a: number/radians): number","details":" The angle *a* is in radians.","notes":" Just a reference to Math.sin().\n"}},"cos":{"path":"/alt/cos","id":63,"name":"cos","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the cosine of the angle *a*","tags":" math","at":[{"id":"param","type":"number/radians","name":"a"},{"id":"returns","type":"number","name":""}],"usage":"(a: number/radians): number","details":" The angle *a* is in radians.","notes":" Just a reference to Math.cos().\n"}},"tan":{"path":"/alt/tan","id":64,"name":"tan","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the tangent of the angle *a*","tags":" math","at":[{"id":"param","type":"number/radians","name":"a"},{"id":"returns","type":"number","name":""}],"usage":"(a: number/radians): number","details":" The angle *a* is in radians.","notes":" Just a reference to Math.tan().\n"}},"acos":{"path":"/alt/acos","id":65,"name":"acos","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the arccosine of the number *n*","tags":" math","at":[{"id":"param","type":"number","name":"n"},{"id":"returns","type":"number","name":""}],"usage":"(n: number): number","details":" Arccosine is the angle in radians, whose cosine is *n*.","notes":" Just a reference to Math.acos().\n\n"}},"asin":{"path":"/alt/asin","id":66,"name":"asin","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the arcsine of the number *n*","tags":" math","at":[{"id":"param","type":"number","name":"n"},{"id":"returns","type":"number","name":""}],"usage":"(n: number): number","details":" Arcsine is the angle in radians, whose sine is *n*.","notes":" Just a reference to Math.asin().\n"}},"atan":{"path":"/alt/atan","id":67,"name":"atan","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the arctangent of the number *n*","tags":" math","at":[{"id":"param","type":"number","name":"n"},{"id":"returns","type":"number/radians","name":""}],"usage":"(n: number): number/radians","details":" Arctangent is the angle in radians, whose tangent is *n*.","notes":" Just a reference to Math.atan().\n\n"}},"atan2":{"path":"/alt/atan2","id":68,"name":"atan2","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns an angle whose tangent is *y/x*","tags":" math","at":[{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"x"},{"id":"returns","type":"number/radians","name":""}],"usage":"(y: number, x: number): number/radians","details":" Arctangent of two is the angle in radians, whose tangent is *y*/*x*.","notes":"Note, that *y* goes first and *x* after. It can be confusing sometimes.\n\nThis function is just a reference to Math.atan2().\n\n\n\n\n"}},"rnd":{"path":"/alt/rnd","id":69,"name":"rnd","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns a pseudo-random number between [0..1] or between provided values","tags":" math","at":[{"id":"param","type":"number","name":"n1","line":"(optional) the bottom limit or the top limit when n2 is missing"},{"id":"param","type":"number","name":"n2","line":"(optional) the top limit"},{"id":"returns","type":"number","name":"-","line":"a random number between provided values"}],"usage":"(n1: number, n2: number): number","details":"When both *n1* and *n2* are provided, it returns a value between *n1*..*n2*.\n\nWhen there is only *n1* present, it returns a value between 0..*n1*, excluding n1.\n\nWhen no parameters are provided, it returns a value between 0..1, excluding 1.\n"}},"RND":{"path":"/alt/RND","id":70,"name":"RND","type":"function","parent":27,"mod":1,"modName":"$","kind":"cons","data":{"head":" returns a pseudo-random integer between provided values","tags":" math","at":[{"id":"param","type":"number/integer","name":"i1","line":"the bottom limit or the top limit when i2 is missing"},{"id":"param","type":"number/integer","name":"i2","line":"(optional) the top limit"},{"id":"returns","type":"number","name":"-","line":"a random integer number between provided values"}],"usage":"(i1: number/integer, i2: number/integer): number","details":"When both values are provided, returns a value between *i1*..*i2*, i2 included.\n\nWhen only one provided, the returned value is in the range of 0..*i1*, i1 included.\n\nWhen no parameters are provided, it returns 0.\n","note":" Keep in mind the top limit, which included in the resulting range\nof random values. This behavior is different from the one\nof floating point functions liek <a href=\"./alt/rnd\">rnd(n1, n2)</a>.\n\n"}},"limit":{"path":"/alt/limit","id":81,"name":"limit","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the *v* value limited by values of *n1* and *n2*","tags":" math","at":[{"id":"param","type":"number","name":"v","line":"a sample value"},{"id":"param","type":"number","name":"n1","line":"the bottom limit"},{"id":"param","type":"number","name":"n2","line":"the top limit"},{"id":"returns","type":"number","name":"-","line":"a value limited to [n1..n2] range"}],"usage":"(v: number, n1: number, n2: number): number","details":"For *v*<*n1* it would return *n1*.\nThen, if *v*>*n2* it would return *n2*.\nOtherwise, the original *v* will be returned.\n"}},"within":{"path":"/alt/within","id":82,"name":"within","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns *true* if the value *v* is within the specified range.","tags":" math","at":[{"id":"param","type":"number","name":"v","line":"a sample value"},{"id":"param","type":"number","name":"n1","line":"the bottom limit"},{"id":"param","type":"number","name":"n2","line":"the top limit"},{"id":"returns","type":"boolean","name":"-","line":"true, if a value is witin [n1..n2] range"}],"usage":"(v: number, n1: number, n2: number): boolean","details":"Values of *n1* and *n2* are included in the range,\nso within(1, 1, 5) returns *true*.\n\n"}},"warp":{"path":"/alt/warp","id":83,"name":"warp","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns a value warped within the provided range","tags":" math","at":[{"id":"param","type":"number","name":"v","line":"a sample value"},{"id":"param","type":"number","name":"n1","line":"the bottom limit"},{"id":"param","type":"number","name":"n2","line":"the top limit"},{"id":"returns","type":"number","name":"-","line":"a value warped into [n1..n2] range"}],"usage":"(v: number, n1: number, n2: number): number","details":"You can use this function to normalize an angle.\nJust run with 0..PI2 range, e.g.:\n    warp(15, 0, PI2)\nwill bring the angle 15 within normalized range of 0..PI2\n\n"}},"lerp":{"path":"/alt/lerp","id":84,"name":"lerp","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns a value between 0..1 extrapolated to the range between *start*..*stop*","tags":" math","at":[{"id":"param","type":"number","name":"start","line":"a start value"},{"id":"param","type":"number","name":"stop","line":"a stop value"},{"id":"param","type":"number","name":"val","line":"a value to amp"},{"id":"param","type":"boolean","name":"limitRange","line":"the result value will be limited to [start..stop] if true"},{"id":"returns","type":"number","name":"-","line":"an extrapolated value"}],"usage":"(start: number, stop: number, val: number, limitRange: boolean): number","details":"Use limitRange flag, when you want to limit the values\nbetween *start* and *stop* even for *v* outside the [0..1] range.\n"}},"vmap":{"path":"/alt/vmap","id":85,"name":"vmap","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" map the *val* from *start*..*stop* range to *targetStart*..*targetStop* range with potential limit","tags":" math","at":[{"id":"param","type":"number","name":"start","line":"a start value of the original range"},{"id":"param","type":"number","name":"stop","line":"a stop value of the original range"},{"id":"param","type":"number","name":"targetStart","line":"a start value of the target range"},{"id":"param","type":"number","name":"targetStop","line":"a stop value of the target range"},{"id":"param","type":"number","name":"val","line":"a value to map"},{"id":"param","type":"boolean","name":"limitRange","line":"the result value will be limited to [targetStart..targetStop] if true"},{"id":"returns","type":"number","name":"-","line":"a value mapped to [targetStart..targetStop] range"}],"usage":"(start: number, stop: number, targetStart: number, targetStop: number, val: number, limitRange: boolean): number","details":"Use limitRange flag, when you want to limit the resulting values\nbetween *targetStart* and *targetStop*.\n"}},"len":{"path":"/alt/len","id":86,"name":"len","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the length of the vector *[x, y]*","tags":" math","at":[{"id":"param","type":"number","name":"x","line":"vector x coordinate"},{"id":"param","type":"number","name":"y","line":"vector y coordinate"},{"id":"returns","type":"number","name":"-","line":"a distance"}],"usage":"(x: number, y: number): number"}},"dist":{"path":"/alt/dist","id":87,"name":"dist","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the distance between two points","tags":" math","at":[{"id":"param","type":"number","name":"x1","line":"first point x coordinate"},{"id":"param","type":"number","name":"y1","line":"first point y coordinate"},{"id":"param","type":"number","name":"x2","line":"second point x coordinate"},{"id":"param","type":"number","name":"y2","line":"second point y coordinate"},{"id":"returns","type":"number","name":"-","line":"a distance between two provided points"}],"usage":"(x1: number, y1: number, x2: number, y2: number): number"}},"angleTo":{"path":"/alt/angleTo","id":88,"name":"angleTo","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the angle in radians between the vector *[x, y]* and OX","tags":" math","at":[{"id":"param","type":"number","name":"x","line":"vector x coordinate"},{"id":"param","type":"number","name":"y","line":"vector y coordinate"},{"id":"returns","type":"number/radians","name":"-","line":"an angle between the provided vector and OX"}],"usage":"(x: number, y: number): number/radians","notes":"It is actually atan2(y, x) with swapped coordinates.\nDo we really need 2 functions doing the same thing?\n"}},"bearing":{"path":"/alt/bearing","id":89,"name":"bearing","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the angle of direction vector from *[x1, y1]* to *[x2, y2]* in relation to OX axis","tags":" math","usage":"(x1: number, y1: number, x2: number, y2: number): number/radians","at":[{"id":"param","type":"number","name":"x1","line":"first vector x coordinate"},{"id":"param","type":"number","name":"y1","line":"first vector y coordinate"},{"id":"param","type":"number","name":"x2","line":"second vector x coordinate"},{"id":"param","type":"number","name":"y2","line":"second vector y coordinate"},{"id":"returns","type":"number/radians","name":"-","line":"an angle of direction vector from [x1:y1] to [x2:y2]"}],"notes":"Want to shoot a laser toward an enemy spaceship?\n\nThis function is what you need!\n\nGet the aim angle by providing the coordinates\nof your laser gun and the enemy ship. Ready? Fire!\n\n"}},"$$":{"path":"/alt/$$","id":90,"name":"$$","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" select from root context","at":[{"id":"param","type":"string","name":"selector","line":"a path or a predicate"},{"id":"returns","type":"array","name":"-","line":"list of selected objects, an empty list if nothing is found"}],"usage":"(selector: string): array"}},"kill":{"path":"/alt/kill","id":91,"name":"kill","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" kill a node","usage":"(node: Node)","at":[{"id":"param","type":"Node","name":"node","line":"a mix node to kill"}],"details":"Before the kill, _node.onKill()_ handler\nwill be called if present.\n\nIf the *node* has a _kill()_ function it will be called\nto do some custom clean up actions.\nIt is usually defined for objects in the pool,\nwhen we don't want to detach a killed object\nand want to reuse it instead later.\nIn that case, node.kill() can just raise the node.dead flag\nand move on - the object pool have to take care and reuse the object\nor it's slot.\n\nIn case there is no node.kill() method,\na regular parent.detach(node) will be called.\nIn that case, the *node* is supposed to have a parent link, i.e. *node.__*.\n"}},"select":{"path":"/alt/select","id":92,"name":"select","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" select from the local /lab","at":[{"id":"param","type":"string","name":"selector","line":"a path or a predicate"},{"id":"returns","type":"array","name":"-","line":"list of selected objects, an empty list if nothing is found"}],"usage":"(selector: string): array","notes":" Behaves like Frame.select() when called on alt object (selects from /alt instead of /lab).\n"}},"selectOne":{"path":"/alt/selectOne","id":93,"name":"selectOne","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" select one object from the local /lab","at":[{"id":"param","type":"string","name":"selector","line":"a path or a predicate"},{"id":"returns","type":"object","name":"-the","line":"first found object or undefined if nothing is found"}],"usage":"(selector: string): object","notes":" Behaves like Frame.selectOne() when called on alt object (selects from /alt instead of /lab).\n\n"}},"defer":{"path":"/alt/defer","id":94,"name":"defer","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" defer a function to run after a scheduled queue","at":[{"id":"param","type":"function","name":"fn","line":"a function to defer and run after"}],"usage":"(fn: function)","details":"Essentially, a more convenient way to run setTimeout(fn, 0)\n"}},"on":{"path":"/alt/on","id":95,"name":"on","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" trigger event handlers in local /lab","at":[{"id":"param","type":"string","name":"eventName","line":"event name"},{"id":"param","type":"value","name":"payload","line":"event data"},{"id":"returns","type":"value","name":"-","line":"the last handler result"}],"usage":"(eventName: string, payload: value): value","details":"A handler function name has to match the event name with 'on' prefix.\n\nConsider the following functions on hero and sidekick objects:\n\n    hero.onEnemySpawn(st)\n    sidekick.onEnemySpawn(st)\n\nThey will be called when the following event is triggered:\n\n    on('enemySpawn', st)\n"}},"gtrap":{"path":"/alt/gtrap","id":96,"name":"gtrap","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" root mod trap","at":[{"id":"param","type":"string","name":"trapName","line":"the name of a trap function"},{"id":"param","type":"value","name":"payload","line":"trapping data to use by the trap function"},{"id":"returns","type":"boolean","name":"-","line":"true if propagated, false otherwise"}],"usage":"(trapName: string, payload: value): boolean","details":"Essentially, a more convenient way to run trap in the global context.\n\nSynonimous of running:\n\n    _$.trap()\n"}},"sfx":{"path":"/alt/sfx","id":97,"name":"sfx","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" play a sound effect","details":"play sound effect with optional volume and panorama settings\n","at":[{"id":"param","type":"AudioClip","name":"sound","line":"an audio clip to play"},{"id":"param","type":"number[0..1]","name":"volume","line":"sound volume"},{"id":"param","type":"number[-1..1]","name":"panorama","line":"the placement of sound from left to right"}],"usage":"(sound: AudioClip, volume: number[0..1], panorama: number[-1..1])"}},"sleep":{"path":"/alt/sleep","id":98,"name":"sleep","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" sleep for *t* seconds","at":[{"id":"param","type":"number","name":"t","line":"time to wait in seconds"},{"id":"returns","type":"Promise","name":"-","line":"a promise that will be resolved in *s* seconds"}],"usage":"(t: number): Promise","details":"Convenient to use with *await* in an *async* function.\n"}},"print":{"path":"/alt/print","id":99,"name":"print","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" output a line on the text console","at":[{"id":"param","type":"string","name":"line","line":"a lite to print"}],"usage":"(line: string)","details":"The line is followed by a line feed.\n\nRedefine /sys/print to change the output target or behavior.\n"}},"input":{"path":"/alt/input","id":100,"name":"input","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" input a value form the text console","at":[{"id":"param","type":"string","name":"message","line":"an input message to print out"},{"id":"returns","type":"Promise -> string","name":"-","line":"a promise to return an input string"}],"usage":"(message: string): Promise -> string","details":"Returns a promise, so better used in *async*\nfunctions along the *await* keyword.\n\nRedefine /sys/input to change behavior.\n"}},"ask":{"path":"/alt/ask","id":101,"name":"ask","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" ask a value in the most convenient way for the current mode ","at":[{"id":"param","type":"string","name":"question","line":"a question"},{"id":"returns","type":"Promise -> string","name":"-","line":"a promise to return an input string"}],"usage":"(question: string): Promise -> string","details":" Redefine /sys/ask to change output target or behavior.\n"}},"say":{"path":"/alt/say","id":102,"name":"say","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" show a message in the most convenient way for the current mode","at":[{"id":"param","type":"string","name":"message","line":"an input message to say"}],"usage":"(message: string)","details":" Redefine /sys/say to change the output target or behavior.\n"}},"cls":{"path":"/alt/cls","id":103,"name":"cls","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" clear the text console\n"}},"require":{"path":"/alt/require","id":104,"name":"require","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"head":" get a dependent node ","at":[{"id":"param","type":"string","name":"path","line":"a mod-relative path to the dependent node"}],"usage":"(path: string)","details":"Collider.JAM checks the dependencies in require() before\nthe script evaluation. If not found, the script evaluation\nis rescheduled into the last batch.\n\nBe aware of cyclic dependencies, since these \ncan cause an endless loop!\n\n_Collider.JAM code rarely needs require()_,\nsince most of the objects will be available\nbefore the setup() and start of the game loop.\nUse ONLY when you need a dependency during\nthe script evaluation time (e.g. you are extending\na particular prototype and need it's instance).\n\nYou can also use *@depends* directive as an alternative:\n\n    // @depends(mod/local/path)\n\nThis directive depends on the path in mod definition,\nrather that actual lookup in the mod itself.\n\nUse it when you need to make sure before the script evaluation,\nthat dependent resources are already evaluated.\nBut you actually don't need the node itself.\n\nUse require() if you need to extract and use a dependent node\nduring script evaluation.\n"}},"rx":{"path":"/alt/rx","id":105,"name":"rx","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" relative x coordinate, where *n* sets horizontal screen\nposition between [0..1]","at":[{"id":"param","type":"number","name":"n","line":"relative canvas width value between [0..1]"},{"id":"returns","type":"number","name":"-","line":"absolute canvas width in pixels"}],"usage":"(n: number): number","details":"rx(.5) - returns half of the canvas width."}},"ry":{"path":"/alt/ry","id":106,"name":"ry","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" relative y coordinate, where *n* sets vertical screen\nposition between [0..1]","at":[{"id":"param","type":"number","name":"n","line":"relative canvas height value between [0..1]"},{"id":"returns","type":"number","name":"-","line":"absolute canvas height in pixels"}],"usage":"(n: number): number","details":"ry(.5) - returns half of the canvas height."}},"save":{"path":"/alt/save","id":107,"name":"save","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" save current drawing context state"}},"restore":{"path":"/alt/restore","id":108,"name":"restore","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" restore previously saved drawing context state"}},"scale":{"path":"/alt/scale","id":109,"name":"scale","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" scale the drawing context by *horizontal* and *vertical* factors","at":[{"id":"param","type":"number","name":"horizontal","line":"scaling factor in the horizontal direction"},{"id":"param","type":"number","name":"vertical","line":"scaling factor in the vertical direction"}],"usage":"(horizontal: number, vertical: number)"}},"rotate":{"path":"/alt/rotate","id":110,"name":"rotate","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" rotate the drawing context on the angle *a* (in radians)","at":[{"id":"param","type":"number","name":"a","line":"rotate angle"}],"usage":"(a: number)"}},"translate":{"path":"/alt/translate","id":111,"name":"translate","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" translate drawing context to provided coordinates *x* and *y*","at":[{"id":"param","type":"number","name":"x","line":"shift value to the right"},{"id":"param","type":"number","name":"y","line":"shift value downwards"}],"usage":"(x: number, y: number)"}},"clip":{"path":"/alt/clip","id":112,"name":"clip","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" clip the drawing context to provided rectangular area","usage":"(x: number, y: number, w: number, h: number)","at":[{"id":"param","type":"number","name":"x","line":"clip area top-left x coordinate"},{"id":"param","type":"number","name":"y","line":"clip area top-left y coordinate"},{"id":"param","type":"number","name":"w","line":"clip area width"},{"id":"param","type":"number","name":"h","line":"clip area height"}],"details":" Everything outside the clipping area will not be drawn."}},"smooth":{"path":"/alt/smooth","id":113,"name":"smooth","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw images with anti-aliasing"}},"blocky":{"path":"/alt/blocky","id":114,"name":"blocky","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw images without anti-aliasing (pixel-art mode!)"}},"alpha":{"path":"/alt/alpha","id":115,"name":"alpha","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" set global alpha for drawing operations","at":[{"id":"param","type":"number","name":"alpha"}],"usage":"(alpha: number)"}},"stroke":{"path":"/alt/stroke","id":116,"name":"stroke","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" set stroke mode and asign a line color","at":[{"id":"param","type":"string/hex | number/integer | number/float ","name":"v","line":"hex string color or Red integer value or float hue value"},{"id":"param","type":"number/integer | number/float ","name":"w","line":"(optional) Green integer value or saturation float value"},{"id":"param","type":"number/integer | number/float ","name":"u","line":"(optional) Blue integer value or lightness float value"},{"id":"param","type":"number/integer | number/float ","name":"a","line":"(optional) Alpha integer value or alpha float value"}],"usage":"(v: string/hex | number/integer | number/float , w: number/integer | number/float , u: number/integer | number/float , a: number/integer | number/float )","details":"Color can be accepted as\n    '#00FF80'\n    '#FFFFFF80'  - as a string of hex color values\n    (r, g, b)    - RGB integers in [0..255] range\n    (r, g, b, a) - RGBA integers\n    (.1, .5, .3) - HSL floats, at least one value\n                   should be a floating number"}},"lineWidth":{"path":"/alt/lineWidth","id":117,"name":"lineWidth","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" set line width","at":[{"id":"param","type":"number","name":"width"}],"usage":"(width: number)"}},"fill":{"path":"/alt/fill","id":118,"name":"fill","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" set fill mode and asign a fill color","usage":" (fillColor: hex/RGB(A)/hue(a), [strokeColor: hex/RGB(A)/hue(a)])","details":"Color can be accepted as\n    '#808080'\n    '#FFFFFFAA'  - as a string of hex color values\n    (R, G, B)    - RGB integers in [0..255] range\n    (R, G, B, A) - RGBA integers\n    (.1, .5, .3) - HSL floats, at least one value\n                   should be a floating number\n    (.6, .4, .4, .5)\nIf a second color is provided, turns the mix mode with both\nfill and stroke over the filled form."}},"background":{"path":"/alt/background","id":119,"name":"background","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" fills background with provided color","usage":" (color: hex/RGB(A)/hsl(a))","details":" Colors can be provided as a hex string, RGB and HSL values."}},"line":{"path":"/alt/line","id":120,"name":"line","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw a line between 2 provided points","at":[{"id":"param","type":"number","name":"x1","line":"first point x coordinate"},{"id":"param","type":"number","name":"y1","line":"first point y coordinate"},{"id":"param","type":"number","name":"y2","line":"second point x coordinate"},{"id":"param","type":"number","name":"y2","line":"second point y coordinate"}],"usage":"(x1: number, y1: number, y2: number, y2: number)","details":"Usually preceided by\n<a href=\"#./alt/stroke\">stroke(color)</a>\nand <a href=\"#./alt/lineWidth\">lineWidth(width)</a>\nto set the style.\n"}},"plot":{"path":"/alt/plot","id":121,"name":"plot","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw a point with lineWidth as it's canvas size","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"}],"usage":"(x: number, y: number)","details":"Set the color with <a href=\"./alt/fill\">fill()</a> and the point size with <a href=\"./alt/lineWidth\">lineWidth()</a>"}},"triangle":{"path":"/alt/triangle","id":122,"name":"triangle","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw a triangle","at":[{"id":"param","type":"number","name":"x1"},{"id":"param","type":"number","name":"y1"},{"id":"param","type":"number","name":"x2"},{"id":"param","type":"number","name":"y2"},{"id":"param","type":"number","name":"x3"},{"id":"param","type":"number","name":"y3"}],"usage":"(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number)","details":" Use stroke() or fill() to set the mode and color."}},"quad":{"path":"/alt/quad","id":123,"name":"quad","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw a quad","at":[{"id":"param","type":"number","name":"x1"},{"id":"param","type":"number","name":"y1"},{"id":"param","type":"number","name":"x2"},{"id":"param","type":"number","name":"y2"},{"id":"param","type":"number","name":"x3"},{"id":"param","type":"number","name":"y3"},{"id":"param","type":"number","name":"x4"},{"id":"param","type":"number","name":"y4"}],"usage":"(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number)","details":" Use stroke() or fill() to set the mode and color."}},"rect":{"path":"/alt/rect","id":124,"name":"rect","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw a rectangle","at":[{"id":"param","type":"number","name":"x","line":"top-left x coordinate"},{"id":"param","type":"number","name":"y","line":"top-left y coordinate"},{"id":"param","type":"number","name":"w","line":"width"},{"id":"param","type":"number","name":"h","line":"height"}],"usage":"(x: number, y: number, w: number, h: number)","details":" Use stroke() or fill() to set the mode and color."}},"circle":{"path":"/alt/circle","id":125,"name":"circle","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw a cirlce","at":[{"id":"param","type":"number","name":"x","line":"center x coordinate"},{"id":"param","type":"number","name":"y","line":"center y coordinate"},{"id":"param","type":"number","name":"r","line":"radius"}],"usage":"(x: number, y: number, r: number)","details":" Use stroke() or fill() to set the mode and color."}},"ellipse":{"path":"/alt/ellipse","id":126,"name":"ellipse","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw an ellipse","at":[{"id":"param","type":"number","name":"x","line":"center x coordinate"},{"id":"param","type":"number","name":"y","line":"center y coordinate"},{"id":"param","type":"number","name":"verticalRadius"},{"id":"param","type":"number","name":"horizontalRadius"},{"id":"param","type":"number","name":"angle","line":"(optional) rotation"}],"usage":"(x: number, y: number, verticalRadius: number, horizontalRadius: number, angle: number)","details":" Rotation is in radians and optional."}},"arc":{"path":"/alt/arc","id":127,"name":"arc","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw an arc centered at *x*/*y* with given *radius* and angles","at":[{"id":"param","type":"number","name":"x","line":"center x coordinate"},{"id":"param","type":"number","name":"y","line":"center y coordinate"},{"id":"param","type":"number","name":"radius"},{"id":"param","type":"number","name":"startAngle"},{"id":"param","type":"number","name":"endAngle"}],"usage":"(x: number, y: number, radius: number, startAngle: number, endAngle: number)"}},"earc":{"path":"/alt/earc","id":128,"name":"earc","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw an elliptical arc centered at *x*/*y*","at":[{"id":"param","type":"number","name":"x","line":"center x coordinate"},{"id":"param","type":"number","name":"y","line":"center y coordinate"},{"id":"param","type":"number","name":"radiusX"},{"id":"param","type":"number","name":"radiusY"},{"id":"param","type":"number","name":"rotation"},{"id":"param","type":"number","name":"startAngle"},{"id":"param","type":"number","name":"endAngle"}],"usage":"(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number)"}},"polygon":{"path":"/alt/polygon","id":129,"name":"polygon","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw a polygon from array of points","usage":" (x1: number, y1: number, x2: number, y2: number, ...)","details":" Use stroke() or fill() to set the mode and color."}},"moveTo":{"path":"/alt/moveTo","id":130,"name":"moveTo","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" move to the next point of the shape","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"}],"usage":"(x: number, y: number)","details":" Begins new path if none has been started yet."}},"lineTo":{"path":"/alt/lineTo","id":131,"name":"lineTo","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" adds a line to current path","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"}],"usage":"(x: number, y: number)"}},"arcTo":{"path":"/alt/arcTo","id":132,"name":"arcTo","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" adds an arc to the current path using 2 provided control points and radius","at":[{"id":"param","type":"number","name":"x1"},{"id":"param","type":"number","name":"y1"},{"id":"param","type":"number","name":"x2"},{"id":"param","type":"number","name":"y2"},{"id":"param","type":"number","name":"radius"}],"usage":"(x1: number, y1: number, x2: number, y2: number, radius: number)"}},"quadraticTo":{"path":"/alt/quadraticTo","id":133,"name":"quadraticTo","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" adds a quadratic Bezier curve to current path","at":[{"id":"param","type":"number","name":"controlPointX"},{"id":"param","type":"number","name":"controlPointY"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"}],"usage":"(controlPointX: number, controlPointY: number, x: number, y: number)"}},"bezierTo":{"path":"/alt/bezierTo","id":134,"name":"bezierTo","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" adds a cubic Bezier curve to current path","at":[{"id":"param","type":"number","name":"controlPointX1"},{"id":"param","type":"number","name":"controlPointY1"},{"id":"param","type":"number","name":"controlPointX2"},{"id":"param","type":"number","name":"controlPointY2"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"}],"usage":"(controlPointX1: number, controlPointY1: number, controlPointX2: number, controlPointY2: number, x: number, y: number)"}},"closePath":{"path":"/alt/closePath","id":135,"name":"closePath","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" close current path"}},"shape":{"path":"/alt/shape","id":136,"name":"shape","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" stroke or fill current shape according to assigned mode"}},"font":{"path":"/alt/font","id":137,"name":"font","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" set current font","at":[{"id":"param","type":"string/font | number/fontSize","name":"font","line":"font descriptor"}],"usage":"(font: string/font | number/fontSize)","details":"Accepts a regular font formal like '24px mono'.\nAlso, you can provide partials to set just the font name or size:\n    font('moon')\n    font(18)"}},"alignLeft":{"path":"/alt/alignLeft","id":138,"name":"alignLeft","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" align text to the left"}},"alignCenter":{"path":"/alt/alignCenter","id":139,"name":"alignCenter","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" align text to the center"}},"alignRight":{"path":"/alt/alignRight","id":140,"name":"alignRight","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" align text to the right"}},"baseTop":{"path":"/alt/baseTop","id":141,"name":"baseTop","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" base text on top"}},"baseMiddle":{"path":"/alt/baseMiddle","id":142,"name":"baseMiddle","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" base text in the middle"}},"baseBottom":{"path":"/alt/baseBottom","id":143,"name":"baseBottom","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" base text at the bottom"}},"text":{"path":"/alt/text","id":144,"name":"text","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw text","at":[{"id":"param","type":"string","name":"text"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"}],"usage":"(text: string, x: number, y: number)"}},"textWidth":{"path":"/alt/textWidth","id":145,"name":"textWidth","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" determine the width of provided text for current font settings","at":[{"id":"param","type":"string","name":"text","line":"a text sample to measure"},{"id":"returns","type":"number","name":"-","line":"text width for current font"}],"usage":"(text: string): number"}},"textHeight":{"path":"/alt/textHeight","id":146,"name":"textHeight","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" determine the height of text for current font settings","at":[{"id":"returns","type":"number","name":"-","line":"text height for current font"}],"usage":"(): number"}},"image":{"path":"/alt/image","id":147,"name":"image","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" draw an image","usage":"(image: Image, x: number, y: number, w: number, h: number, dx: number, dy: number, dw: number, dh: number)","at":[{"id":"param","type":"Image","name":"image","line":"any image-compatible object"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"w"},{"id":"param","type":"number","name":"h"},{"id":"param","type":"number","name":"dx"},{"id":"param","type":"number","name":"dy"},{"id":"param","type":"number","name":"dw"},{"id":"param","type":"number","name":"dh"}],"details":"There are multiple ways you can apply parameters\n\n    // draw at coordinates with natural width/height\n    image(img, 0, 0) \n\n    // draw at coordinates and stretch\n    // to specified width/height\n    image(img, 0, 0, 100, 50) \n\n    // draw a specified rectangular segment\n    // of the source image (at 20x20, size 40x40)\n    // to the specified rectangular area\n    // on the canvas (at 0x0, size 150x150)\n    image(img, 20, 20, 40, 40, 0, 0, 150, 150)\n"}},"rgb":{"path":"/alt/rgb","id":148,"name":"rgb","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" get the hex string color representation of provided rgb floats ","at":[{"id":"param","type":"number[0..1]","name":"red"},{"id":"param","type":"number[0..1]","name":"green"},{"id":"param","type":"number[0..1]","name":"blue"}],"usage":"(red: number[0..1], green: number[0..1], blue: number[0..1])","details":" Values are expected to be floats in the [0..1] range."}},"rgba":{"path":"/alt/rgba","id":149,"name":"rgba","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" get the hex string color representation of provided rgba floats ","at":[{"id":"param","type":"number[0..1]","name":"red"},{"id":"param","type":"number[0..1]","name":"green"},{"id":"param","type":"number[0..1]","name":"blue"},{"id":"param","type":"number[0..1]","name":"alpha"}],"usage":"(red: number[0..1], green: number[0..1], blue: number[0..1], alpha: number[0..1])","details":" Values are expected to be floats in the [0..1] range."}},"RGB":{"path":"/alt/RGB","id":150,"name":"RGB","type":"function","parent":27,"mod":1,"modName":"$","kind":"cons","data":{"tags":" draw, context, 2d","head":" get the hex string color representation of provided RGB integers","at":[{"id":"param","type":"number[0..255]","name":"red"},{"id":"param","type":"number[0..255]","name":"green"},{"id":"param","type":"number[0..255]","name":"blue"}],"usage":"(red: number[0..255], green: number[0..255], blue: number[0..255])","details":" Values are expected to be integers in the [0..255] range."}},"RGBA":{"path":"/alt/RGBA","id":151,"name":"RGBA","type":"function","parent":27,"mod":1,"modName":"$","kind":"cons","data":{"tags":" draw, context, 2d","head":" get the hex string color representation of provided RGBA integers","at":[{"id":"param","type":"number[0..255]","name":"red"},{"id":"param","type":"number[0..255]","name":"green"},{"id":"param","type":"number[0..255]","name":"blue"},{"id":"param","type":"number[0..255]","name":"alpha"}],"usage":"(red: number[0..255], green: number[0..255], blue: number[0..255], alpha: number[0..255])","details":" Values are expected to be integers in the [0..255] range."}},"hsl":{"path":"/alt/hsl","id":152,"name":"hsl","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" get the hex string color representation of provided hsl floats ","at":[{"id":"param","type":"number[0..1]","name":"hue"},{"id":"param","type":"number[0..1]","name":"saturation"},{"id":"param","type":"number[0..1]","name":"lightness"}],"usage":"(hue: number[0..1], saturation: number[0..1], lightness: number[0..1])","details":" Values are expected to be floats in the [0..1] range."}},"hsla":{"path":"/alt/hsla","id":153,"name":"hsla","type":"function","parent":27,"mod":1,"modName":"$","kind":"function","data":{"tags":" draw, context, 2d","head":" get the hex string color representation of provided hsla floats ","at":[{"id":"param","type":"number[0..1]","name":"hue"},{"id":"param","type":"number[0..1]","name":"saturation"},{"id":"param","type":"number[0..1]","name":"lightness"},{"id":"param","type":"number[0..1]","name":"alpha"}],"usage":"(hue: number[0..1], saturation: number[0..1], lightness: number[0..1], alpha: number[0..1])","details":" Values are expected to be floats in the [0..1] range.\n"}},"RGB2HSL":{"path":"/alt/RGB2HSL","id":154,"name":"RGB2HSL","type":"function","parent":27,"mod":1,"modName":"$","kind":"cons"},"rgb2hsl":{"path":"/alt/rgb2hsl","id":155,"name":"rgb2hsl","type":"function","parent":27,"mod":1,"modName":"$","kind":"function"},"color2RGBA":{"path":"/alt/color2RGBA","id":156,"name":"color2RGBA","type":"function","parent":27,"mod":1,"modName":"$","kind":"function"},"color2rgba":{"path":"/alt/color2rgba","id":157,"name":"color2rgba","type":"function","parent":27,"mod":1,"modName":"$","kind":"function"},"lighten":{"path":"/alt/lighten","id":158,"name":"lighten","type":"function","parent":27,"mod":1,"modName":"$","kind":"function"},"saturate":{"path":"/alt/saturate","id":159,"name":"saturate","type":"function","parent":27,"mod":1,"modName":"$","kind":"function"},"shiftHue":{"path":"/alt/shiftHue","id":160,"name":"shiftHue","type":"function","parent":27,"mod":1,"modName":"$","kind":"function"}}},"dna":{"path":"/dna","id":161,"name":"dna","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" game entities constructors, factories and prototypes","details":"Any constructor or factory to spawn an entity goes here.\n\n* Constructor() - capitalized functions considered to be constructors, so these entities are going to be spawned by\ninvoking new Constructor(st), where st is init object.\n\n* factory() - low-cased functions are considered to be factories,\nso these entities will be spawned by applying corresponding\nfactory(st) function with an init object as an argument.\nThe factory supposed to return a newly constructed object.\n\n* plain js object - a regular object is going to be cloned\nto spawn a new entity. If an object has a clone() method,\nit will be called like object.clone(st), where [st]\nis an init object. Otherwise, deep copy of the object\nwill be made and augmented with [st] init object\npassed to the spawn function.\n\n\n\n\n"},"dir":{"Emitter":{"path":"/dna/Emitter","id":162,"name":"Emitter","type":"function","parent":161,"mod":1,"modName":"$","kind":"cons","data":{"head":"particle emitter constructor","details":"Create an emitter by providing a following structure to the constuctor:\n    target.spawn(dna.Emitter, {\n           x: x,  // emitter x position\n           y: y,  // emitter y position\n           color: color,   // particles color\n           lifespan: 0.05, // emitter life span (default: 1)\n           force: 1000,    // emitter force in particles/sec (default: 200)\n           radius: 0,      // particle spread radius\n           size: 1,        // particle size\n           speed: 10,      // particle speed\n           vspeed: 0,      // speed variety (a random shift)\n           angle: 0,          // base angle for particle direction\n           spread: 2*Math.PI, // particle spread angle - TAU for a full sicrle\n           minLifespan: 0.4,  // minimum particle lifespan\n           vLifespan: 0.2,    // particles lifespan variety\n           drawParticle: function() {\n               fill(this.color)\n               rect(floor(this.x), floor(this.y), this.r, this.r)\n           }\n       })\nMost of the provided configuration options can be skipped.\n\nThe emitter is left-destroyed when it's lifespan is over and all particles are dead.\n\n\n=== Examples\n\nFollowing are some real-life examples of particles use:\n<li> [Explosions in Enceladus Dockyards](https://github.com/invider/enceladus-dockyards.mix/blob/master/boy-buf.mod/lib/vfx.js)\n<li> [Monster hits and magic in Master of Ritual](https://github.com/invider/master-of-ritual/blob/master/mod/dna/mob/Master.js)\n<li> [Teleports in station keeping](https://github.com/invider/station-keeping.mod/blob/master/lib/vfx.js)\n<li> [Cyber Sneeze](https://github.com/invider/cyber-sneeze.mod/blob/master/dna/Bot.js)\n","usage":"(init)"},"dir":{"init":{"path":"/dna/Emitter/init","id":163,"name":"init","type":"function","parent":162,"mod":1,"modName":"$","kind":"function","data":{"head":"executed when emitter is attached","usage":"(parent, scene)"}},"onExhausted":{"path":"/dna/Emitter/onExhausted","id":164,"name":"onExhausted","type":"function","parent":162,"mod":1,"modName":"$","kind":"function","data":{"head":"called when emitter lifespan is out","details":"(but there are still can be particles flying out)\n","usage":"()"}},"moveParticle":{"path":"/dna/Emitter/moveParticle","id":165,"name":"moveParticle","type":"function","parent":162,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"drawParticle":{"path":"/dna/Emitter/drawParticle","id":166,"name":"drawParticle","type":"function","parent":162,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"createParticle":{"path":"/dna/Emitter/createParticle","id":167,"name":"createParticle","type":"function","parent":162,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"spawn":{"path":"/dna/Emitter/spawn","id":168,"name":"spawn","type":"function","parent":162,"mod":1,"modName":"$","kind":"function","data":{"head":"find a free slot in the pool and spawn a particle","usage":"()"}},"emit":{"path":"/dna/Emitter/emit","id":169,"name":"emit","type":"function","parent":162,"mod":1,"modName":"$","kind":"function","data":{"head":"emit all particles for current frame","usage":"(dt)"}},"evo":{"path":"/dna/Emitter/evo","id":170,"name":"evo","type":"function","parent":162,"mod":1,"modName":"$","kind":"function","data":{"head":"evolve emitter","usage":"(dt)"}},"draw":{"path":"/dna/Emitter/draw","id":171,"name":"draw","type":"function","parent":162,"mod":1,"modName":"$","kind":"function","data":{"head":"draw all particles","usage":"()"}}}},"Grid":{"path":"/dna/Grid","id":172,"name":"Grid","type":"function","parent":161,"mod":1,"modName":"$","kind":"cons","data":{"head":"create a debug grid","details":"Useful for exploring camera positioning/zooming\nor positioning of entities\n","usage":"(dat)"},"dir":{"coord":{"path":"/dna/Grid/coord","id":173,"name":"coord","type":"function","parent":172,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y)"}},"mark":{"path":"/dna/Grid/mark","id":174,"name":"mark","type":"function","parent":172,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y)"}},"draw":{"path":"/dna/Grid/draw","id":175,"name":"draw","type":"function","parent":172,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}}},"SlideCamera":{"path":"/dna/SlideCamera","id":176,"name":"SlideCamera","type":"function","parent":161,"mod":1,"modName":"$","kind":"cons","data":{"head":"target-following sliding and zooming camera ","details":"SlideCamera supports automatic culling,\nso objects outside the viewport are not drawn.\n\nSlideCamera can follow a positional target\n(it can be any object with x and y).\nWhen the target is not set, it can work in a free-roaming mode.\nIn this mode, a gamer can move and zoom the viewport.\n\nYou can setup zoom in/out and move speed\nwith *speed* and *zoomSpeed* properties accordingly.\n\nSpawn camera somewhere in /lab and\nthen spawn all actors into the camera.\n\nA typical structure may look like this:\n\n    /lab\n      |\n      |--cam\n      |   |\n      |   |-- mob\n      |   |-- fx\n      |\n      |--hud\nThe first node in _lab_ is SlideCamera\nand it contains nodes _mob_ for all actors\nand _fx_ for special effects like particles.\n\nSeparating the two is a good idea,\nsince we want our particles to be \"over\"\nthe actors.\n\nFollowing the camera in _lab_, there is _hud_.\nIt is an overlay layer with objects not supposed\nto be affected by the camera. Like a map, a score tab or other UI elements.\n\nYou may create such structure during the setup\nof the game in /setup.js:\n\n    lab.spawn('SlideCamera', {\n        name: 'cam',\n        x: 0,\n        y: 0,\n        zoomOnPlusMinus: true,\n    })\n    // create a substructure in /lab/cam\n    lab.cam.touch('mob')\n    lab.cam.touch('fx')\n\n    // create a hero\n    lab.cam.mob.spawn(dna.Hero, {...})\n    \n    // create a spider and some spider-related visual effect\n    lab.cam.mob.spawn(dna.Spider, {...})\n    lab.cam.fx.spawn(dna.teleportFx, {...})\n\nNow we can tell the camera to slide at some coordinates:\n\n    lab.cam.follow({ x: 101, y: 101 }, false)\nNote, that we don't want to keep following.\nThe camera target will be reset once it reached the coordinates.\n\nNext, follow and pin on the hero:\n\n    lab.cam.pinOnTarget = true\n    lab.cam.follow( lab.cam.mob.hero, true )\nAnd zoom in a little\n    lab.cam.zoom(1.5)\nUse viewport() to get viewport rectangle coordinates (x, y, w, h).\n\nUse gx, gy, gxy to get screen coordinates from camera-ones.\n\nUse lx, ly, lxy to get camera-world coordinates form the screen-ones.\n","usage":"(st)"},"dir":{"_":{"path":"/dna/SlideCamera/_","id":177,"name":"_","type":"object","parent":176,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","dir":{}},"_ls":{"path":"/dna/SlideCamera/_ls","id":178,"name":"_ls","type":"object","parent":176,"mod":1,"modName":"$","kind":"array","proto":"Array"},"_dir":{"path":"/dna/SlideCamera/_dir","id":179,"name":"_dir","type":"object","parent":176,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{}},"worldX":{"path":"/dna/SlideCamera/worldX","id":180,"name":"worldX","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"deprecated","usage":"(x)"}},"worldY":{"path":"/dna/SlideCamera/worldY","id":181,"name":"worldY","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"deprecated","usage":"(y)"}},"screenX":{"path":"/dna/SlideCamera/screenX","id":182,"name":"screenX","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"deprecated","usage":"(x)"}},"screenY":{"path":"/dna/SlideCamera/screenY","id":183,"name":"screenY","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"deprecated","usage":"(y)"}},"gx":{"path":"/dna/SlideCamera/gx","id":184,"name":"gx","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/SlideCamera/gy","id":185,"name":"gy","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"gxy":{"path":"/dna/SlideCamera/gxy","id":186,"name":"gxy","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"lx":{"path":"/dna/SlideCamera/lx","id":187,"name":"lx","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"returns","type":"number","name":"-","line":"local x"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/SlideCamera/ly","id":188,"name":"ly","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"lxy":{"path":"/dna/SlideCamera/lxy","id":189,"name":"lxy","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"viewport":{"path":"/dna/SlideCamera/viewport","id":190,"name":"viewport","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"get camera viewport","at":[{"id":"returns","type":"object/viewport-rectangle","name":"-","line":"viewport x, y, w and h"}],"usage":"(): object/viewport-rectangle"}},"getViewport":{"path":"/dna/SlideCamera/getViewport","id":191,"name":"getViewport","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"deprecated","details":"get viewport coordinates\n","at":[{"id":"returns","type":"array/2d-coordinates","name":""}],"usage":"(): array/2d-coordinates"}},"inView":{"path":"/dna/SlideCamera/inView","id":192,"name":"inView","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"check if local coordinates are in the viewport","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"boolean","name":"-","line":"true if local x:y are in the viewport"}],"usage":"(x: number, y: number): boolean"}},"bindZoom":{"path":"/dna/SlideCamera/bindZoom","id":193,"name":"bindZoom","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"create traps for Plus/Minus keys to control camera zoom in/out","details":"called automatically, when (camera.zoomOnPlusMinus === true)\n","usage":"()"}},"init":{"path":"/dna/SlideCamera/init","id":194,"name":"init","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"complete necessary bindings","usage":"()"}},"lookAt":{"path":"/dna/SlideCamera/lookAt","id":195,"name":"lookAt","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"move camera at specified coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"}],"usage":"(x: number, y: number)"}},"follow":{"path":"/dna/SlideCamera/follow","id":196,"name":"follow","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"follow the target","details":"The camera keeps following, until the distance is < _targetingPrecision_.\nAt this point the target is considered reached.\n\nThe camera keeps following the target if _keepFollowing_ flag is set.\n\nIf _pinOnTarget_ is true, the camera coordinates will be fixed to target coordinates.\nThis is the best way to \"pin\" the camera to an object and avoid\njiggling artefacts.\n\n","at":[{"id":"param","type":"object/xy","name":"target","line":"a positional target for the camera to follow"},{"id":"param","type":"boolean","name":"keepFollowing","line":"keep following after the camera reached the position."}],"usage":"(target: object/xy, keepFollowing: boolean)"}},"zoom":{"path":"/dna/SlideCamera/zoom","id":197,"name":"zoom","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"set relative zoom target","details":"accepts values relative to the current scale, where current scale is considered 1\n","at":[{"id":"param","type":"number","name":"z","line":"relative value, e.g. 1.2 to zoom 20% in, 0.8 to zoom 20% out"}],"usage":"(z: number)"}},"zoomAt":{"path":"/dna/SlideCamera/zoomAt","id":198,"name":"zoomAt","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"set absolute zoom target","at":[{"id":"param","type":"number","name":"scale"}],"usage":"(scale: number)"}},"startMoving":{"path":"/dna/SlideCamera/startMoving","id":199,"name":"startMoving","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"activate a movement","at":[{"id":"params","type":"number","name":"dir","line":"movement time (0 - zoom out, 1 - zoom in)"}],"usage":"(dir)"}},"stopMoving":{"path":"/dna/SlideCamera/stopMoving","id":200,"name":"stopMoving","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"stop a movement","at":[{"id":"params","type":"number","name":"dir","line":"movement time (0 - zoom out, 1 - zoom in)"}],"usage":"(dir)"}},"evoFollow":{"path":"/dna/SlideCamera/evoFollow","id":201,"name":"evoFollow","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"follow a target if one is defined","details":"Shouldn't be called manually.\nIt is called automatically as a part of evo(dt) process\n","at":[{"id":"params","type":"number","name":"dt","line":"delta time in seconds"}],"usage":"(dt)"}},"evo":{"path":"/dna/SlideCamera/evo","id":202,"name":"evo","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"evolve the camera and all included entities","at":[{"id":"param","type":"number","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number)"}},"draw":{"path":"/dna/SlideCamera/draw","id":203,"name":"draw","type":"function","parent":176,"mod":1,"modName":"$","kind":"function","data":{"head":"draw entities in the viewport","usage":"(dt)"}}},"idir":{"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"promoteNode":{"path":"/sys/LabFrame/promoteNode","id":206,"name":"promoteNode","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to analyze attached node and raise all necessary flags","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","details":"Called automatically when a node is attached.\nIn normal circumstances you don't have to call it manually.\n\nFollowing flags can be set\\:\n    evo = false  // when no evo function is specified\n    draw = false // when no draw function is specified\n    _positional = true  // if the node has _x_ and _y_\n    _sizable = true     // if the node has _w_ and _h_\n    _circular = true    // when _r_ is specified\n    _centered = true    // indicates that x,y are in the center and not at top-left\n\nIt also calls this.orderZ() if node.Z is specified.\n"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/LabFrame/onAttached","id":209,"name":"onAttached","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/SlideCamera/_dna","id":233,"name":"_dna","type":"string","parent":176,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"text":{"path":"/dna/text","id":256,"name":"text","type":"object","parent":161,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","dir":{"blinkingText":{"path":"/dna/text/blinkingText","id":257,"name":"blinkingText","type":"function","parent":256,"mod":1,"modName":"$","kind":"function","data":{"head":"blinking text factory","details":"create by passing the construction object: {\n    font: text font, e.g. '32px zekton'\n    align: text alignment against coordinates (left/right/center)\n    fillStyle: the color string for the text, e.g. '#ffffff'\n    x: y: coordinates\n        or as an alternative\n    rx: ry: relative coordinates in percents,\n            e.g. 50x50 for the screen center\n}\n","usage":"(dat)"}},"fadeText":{"path":"/dna/text/fadeText","id":258,"name":"fadeText","type":"function","parent":256,"mod":1,"modName":"$","kind":"function","data":{"head":"create a text with fade-in/fade-out and flying effects","usage":"(dat)"}},"scroll":{"path":"/dna/text/scroll","id":259,"name":"scroll","type":"function","parent":256,"mod":1,"modName":"$","kind":"function","data":{"head":"@alias lab.scroll","usage":"(init)"}}}},"Tiles":{"path":"/dna/Tiles","id":260,"name":"Tiles","type":"function","parent":161,"mod":1,"modName":"$","kind":"class","data":{"head":"a grid of tiles","details":"Allows to create and show a grid of tiles\nbased on provided tileset and tilex map.\n\nA tileset is a set of tiles created by\nslicing a regular image into fixed-size cells.\nEach cell has a number called tilex.\nThe indexing starts from 0 and goes left-to-right\nand top-down.\nWe can use tilex to address a particular cell\nin the tileset.\n\nA tilex map defines tilexes for each cell\nin the grid.\n\nTo construct:\n    lab.spawn('Tiles', {\n        name: 'platform',\n        x: 0,     // platform X offset\n        y: 0,     // platform Y offset\n        iw: 16,   // width in tiles\n        ih: 16,   // height in tiles\n        step: 32, // cell width\n        data: tilexMap,    // array of integers\n                           // each is a tilex in the provided tileset\n        tileset: tileSet,  // can be created directly in /res\n                           // with classifier like 'tileset.map16x16.png'\n    }\n\nTilex map is just an array of integer values\neach representing a tilex in the provided tileset, e.g.:\n\n    tileset: [ -1, 1, 1, -1, -1, 0, 0, -1]\nIn this example, for a grid of 4x2,\nthe top row has two tilex blocks #1.\nNegative values are the missing tiles and going to be transparent.\nThe second row has two #0 tilex blocks in the middle\nand transparent spaces to the left and right.\n\nTilexes #0 and #1 are the first and the second cells\nin the provided tileset.\n\nTiles don't have any defined physics or behavior\nand must be extended to provided those.\n\nYou can use tiles.pick(x, y) to get a tilex\nfor provided coordinates.\n"},"dir":{"adjust":{"path":"/dna/Tiles/adjust","id":261,"name":"adjust","type":"function","parent":260,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to adjust tiles position and size","usage":"()"}},"draw":{"path":"/dna/Tiles/draw","id":262,"name":"draw","type":"function","parent":260,"mod":1,"modName":"$","kind":"function","data":{"head":"render tiles within viewport","usage":"()"}},"pick":{"path":"/dna/Tiles/pick","id":263,"name":"pick","type":"function","parent":260,"mod":1,"modName":"$","kind":"function","data":{"head":"pick a tilex at coordinates","usage":"(x, y)"}},"gx":{"path":"/dna/Tiles/gx","id":264,"name":"gx","type":"function","parent":260,"mod":1,"modName":"$","kind":"function","data":{"head":"transform local tile x to parent's coordinate space","usage":"(tx)"}},"gy":{"path":"/dna/Tiles/gy","id":265,"name":"gy","type":"function","parent":260,"mod":1,"modName":"$","kind":"function","data":{"head":"transform local tile y to parent's coordinate space","usage":"(ty)"}},"lx":{"path":"/dna/Tiles/lx","id":266,"name":"lx","type":"function","parent":260,"mod":1,"modName":"$","kind":"function","data":{"head":"transform parent's x into local tile x coordinate","usage":"(x)"}},"ly":{"path":"/dna/Tiles/ly","id":267,"name":"ly","type":"function","parent":260,"mod":1,"modName":"$","kind":"function","data":{"head":"transform parent's y into local tile y coordinate","usage":"(y)"}},"collect":{"path":"/dna/Tiles/collect","id":268,"name":"collect","type":"function","parent":260,"mod":1,"modName":"$","kind":"function","data":{"head":"collect a tilex to the list","usage":"(x, y, ls)"}}}},"TilesView":{"path":"/dna/TilesView","id":269,"name":"TilesView","type":"function","parent":161,"mod":1,"modName":"$","kind":"cons","data":{"head":"construct tiles from image map","usage":"(dat)"},"dir":{"mapZero":{"path":"/dna/TilesView/mapZero","id":270,"name":"mapZero","type":"function","parent":269,"mod":1,"modName":"$","kind":"function","data":{"head":"fill map with 0","usage":"(w, h)"}},"mapImg":{"path":"/dna/TilesView/mapImg","id":271,"name":"mapImg","type":"function","parent":269,"mod":1,"modName":"$","kind":"function","data":{"head":"parse image tiles definition","usage":"(img, set)"}},"mapTxt":{"path":"/dna/TilesView/mapTxt","id":272,"name":"mapTxt","type":"function","parent":269,"mod":1,"modName":"$","kind":"function","data":{"head":"parse text tiles definition","usage":"(txt, set)"}},"mapArray":{"path":"/dna/TilesView/mapArray","id":273,"name":"mapArray","type":"function","parent":269,"mod":1,"modName":"$","kind":"function","data":{"head":"a service called used during the construction to setup the map","usage":"(map, set)"}},"draw":{"path":"/dna/TilesView/draw","id":274,"name":"draw","type":"function","parent":269,"mod":1,"modName":"$","kind":"function","data":{"head":"render tiles within viewport","usage":"()"}}}},"hud":{"path":"/dna/hud","id":275,"name":"hud","type":"object","parent":161,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","dir":{"Transition":{"path":"/dna/hud/Transition","id":276,"name":"Transition","type":"function","parent":275,"mod":1,"modName":"$","kind":"class","dir":{"init":{"path":"/dna/hud/Transition/init","id":277,"name":"init","type":"function","parent":276,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"transit":{"path":"/dna/hud/Transition/transit","id":278,"name":"transit","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"},"evo":{"path":"/dna/hud/Transition/evo","id":279,"name":"evo","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"},"drawBackground":{"path":"/dna/hud/Transition/drawBackground","id":280,"name":"drawBackground","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"},"drawContent":{"path":"/dna/hud/Transition/drawContent","id":281,"name":"drawContent","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"},"draw":{"path":"/dna/hud/Transition/draw","id":282,"name":"draw","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"}}},"AlphaFader":{"path":"/dna/hud/AlphaFader","id":283,"name":"AlphaFader","type":"function","parent":275,"mod":1,"modName":"$","kind":"class","data":{"head":"@depends(/dna/hud/Transition)"},"dir":{"init":{"path":"/dna/hud/AlphaFader/init","id":284,"name":"init","type":"function","parent":283,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"preVFX":{"path":"/dna/hud/AlphaFader/preVFX","id":285,"name":"preVFX","type":"function","parent":283,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"postVFX":{"path":"/dna/hud/AlphaFader/postVFX","id":286,"name":"postVFX","type":"function","parent":283,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"transit":{"path":"/dna/hud/Transition/transit","id":278,"name":"transit","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"},"evo":{"path":"/dna/hud/Transition/evo","id":279,"name":"evo","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"},"drawBackground":{"path":"/dna/hud/Transition/drawBackground","id":280,"name":"drawBackground","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"},"drawContent":{"path":"/dna/hud/Transition/drawContent","id":281,"name":"drawContent","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"},"draw":{"path":"/dna/hud/Transition/draw","id":282,"name":"draw","type":"function","parent":276,"mod":1,"modName":"$","kind":"function"}}},"Container":{"path":"/dna/hud/Container","id":287,"name":"Container","type":"function","parent":275,"mod":1,"modName":"$","kind":"cons","data":{"usage":"(dat)"},"dir":{"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"adjust":{"path":"/dna/hud/Container/adjust","id":290,"name":"adjust","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"called when container needs to update it's position and size","details":"Redefine this function for component to react on layout changes.\n","usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onClick":{"path":"/dna/hud/Container/onClick","id":298,"name":"onClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onDblClick":{"path":"/dna/hud/Container/onDblClick","id":299,"name":"onDblClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseDown":{"path":"/dna/hud/Container/onMouseDown","id":300,"name":"onMouseDown","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handles mouse down event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseUp":{"path":"/dna/hud/Container/onMouseUp","id":301,"name":"onMouseUp","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse up event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseMove":{"path":"/dna/hud/Container/onMouseMove","id":302,"name":"onMouseMove","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseWheel":{"path":"/dna/hud/Container/onMouseWheel","id":303,"name":"onMouseWheel","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse wheel scroll","at":[{"id":"param","type":"number","name":"d","line":"scroll delta"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(d: numbe: objectr, x: number, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onFocus":{"path":"/dna/hud/Container/onFocus","id":312,"name":"onFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on focus handler","details":"It is responsible for raising this.focus flag\nand can contain any custom actions related to focus capture.\n","usage":"()"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawBackground":{"path":"/dna/hud/Container/drawBackground","id":314,"name":"drawBackground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container background layer","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"drawForeground":{"path":"/dna/hud/Container/drawForeground","id":316,"name":"drawForeground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container foreground","usage":"()"}},"draw":{"path":"/dna/hud/Container/draw","id":317,"name":"draw","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container","details":"Performs necessary translations and clipping\nand draws background, content and foreground.\n","usage":"()"}}},"idir":{"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/Container/_dna","id":318,"name":"_dna","type":"string","parent":287,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"gadget":{"path":"/dna/hud/gadget","id":319,"name":"gadget","type":"object","parent":275,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","dir":{"Button":{"path":"/dna/hud/gadget/Button","id":320,"name":"Button","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"a visual component that has to be pushed to invoke an action","usage":"(dat)"},"dir":{"injectStyle":{"path":"/dna/hud/gadget/Button/injectStyle","id":321,"name":"injectStyle","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"(base)"}},"adjust":{"path":"/dna/hud/gadget/Button/adjust","id":322,"name":"adjust","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"head":"a service method to adjust component in the updated layout","details":"Usually invoked automatically when component is added\nor layout is changed.\n","usage":"()"}},"onMouseDown":{"path":"/dna/hud/gadget/Button/onMouseDown","id":323,"name":"onMouseDown","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onMouseUp":{"path":"/dna/hud/gadget/Button/onMouseUp","id":324,"name":"onMouseUp","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onMouseDrag":{"path":"/dna/hud/gadget/Button/onMouseDrag","id":325,"name":"onMouseDrag","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"head":"needs to be defined to capture the mouse","usage":"()"}},"onMouseMove":{"path":"/dna/hud/gadget/Button/onMouseMove","id":326,"name":"onMouseMove","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"head":"need this to be defined for _hover flag to be working","usage":"()"}},"getState":{"path":"/dna/hud/gadget/Button/getState","id":327,"name":"getState","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"head":"get current state name - active | disabled | toggled | hover","at":[{"id":"returns","type":"string","name":"-","line":"button state based on flags"}],"usage":"(): string"}},"drawBackground":{"path":"/dna/hud/gadget/Button/drawBackground","id":328,"name":"drawBackground","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawContent":{"path":"/dna/hud/gadget/Button/drawContent","id":329,"name":"drawContent","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"draw":{"path":"/dna/hud/gadget/Button/draw","id":330,"name":"draw","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}}},"Slider":{"path":"/dna/hud/gadget/Slider","id":331,"name":"Slider","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"can be used to select a range of values in the span between min and max","details":"Use inside a composite component that needs a scrollbar-like functionality -\ne.g. a scrollable text field.\n","usage":"(dat)"},"dir":{"onMouseDown":{"path":"/dna/hud/gadget/Slider/onMouseDown","id":332,"name":"onMouseDown","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onMouseUp":{"path":"/dna/hud/gadget/Slider/onMouseUp","id":333,"name":"onMouseUp","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onMouseWheel":{"path":"/dna/hud/gadget/Slider/onMouseWheel","id":334,"name":"onMouseWheel","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"usage":"(d, x, y, e)"}},"drag":{"path":"/dna/hud/gadget/Slider/drag","id":335,"name":"drag","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"head":"move slider and trigger onScroll() event","at":[{"id":"param","type":"number","name":"step","line":"steps to move, can be negative if moving up"}],"usage":"(step: number)"}},"onScroll":{"path":"/dna/hud/gadget/Slider/onScroll","id":336,"name":"onScroll","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"head":"scroll event handler","usage":"(pos)"}},"slide":{"path":"/dna/hud/gadget/Slider/slide","id":337,"name":"slide","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"head":"slide for specified steps","at":[{"id":"param","type":"number","name":"step","line":"number of steps, can be negative if moving up"}],"usage":"(step: number)"}},"set":{"path":"/dna/hud/gadget/Slider/set","id":338,"name":"set","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"head":"set the slider position","usage":"(pos)"}},"val":{"path":"/dna/hud/gadget/Slider/val","id":339,"name":"val","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"head":"get current value","usage":"()"}},"top":{"path":"/dna/hud/gadget/Slider/top","id":340,"name":"top","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"head":"get the slider top value - it's position + span limited by max"}},"drawBackground":{"path":"/dna/hud/gadget/Slider/drawBackground","id":341,"name":"drawBackground","type":"function","parent":331,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"adjust":{"path":"/dna/hud/Container/adjust","id":290,"name":"adjust","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"called when container needs to update it's position and size","details":"Redefine this function for component to react on layout changes.\n","usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onClick":{"path":"/dna/hud/Container/onClick","id":298,"name":"onClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onDblClick":{"path":"/dna/hud/Container/onDblClick","id":299,"name":"onDblClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseMove":{"path":"/dna/hud/Container/onMouseMove","id":302,"name":"onMouseMove","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onFocus":{"path":"/dna/hud/Container/onFocus","id":312,"name":"onFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on focus handler","details":"It is responsible for raising this.focus flag\nand can contain any custom actions related to focus capture.\n","usage":"()"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"drawForeground":{"path":"/dna/hud/Container/drawForeground","id":316,"name":"drawForeground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container foreground","usage":"()"}},"draw":{"path":"/dna/hud/Container/draw","id":317,"name":"draw","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container","details":"Performs necessary translations and clipping\nand draws background, content and foreground.\n","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/gadget/Slider/_dna","id":342,"name":"_dna","type":"string","parent":331,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"Console":{"path":"/dna/hud/gadget/Console","id":343,"name":"Console","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"a text console component - can be used in a chatbot-like or a command-response loop scenarios","usage":"(dat)"},"dir":{"resize":{"path":"/dna/hud/gadget/Console/resize","id":344,"name":"resize","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"(w, h)"}},"adjustSliders":{"path":"/dna/hud/gadget/Console/adjustSliders","id":345,"name":"adjustSliders","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onFocus":{"path":"/dna/hud/gadget/Console/onFocus","id":346,"name":"onFocus","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"clear":{"path":"/dna/hud/gadget/Console/clear","id":347,"name":"clear","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"pushLine":{"path":"/dna/hud/gadget/Console/pushLine","id":348,"name":"pushLine","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"(line)"}},"pushText":{"path":"/dna/hud/gadget/Console/pushText","id":349,"name":"pushText","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"(text)"}},"print":{"path":"/dna/hud/gadget/Console/print","id":350,"name":"print","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"(msg)"}},"echo":{"path":"/dna/hud/gadget/Console/echo","id":351,"name":"echo","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"(msg)"}},"execute":{"path":"/dna/hud/gadget/Console/execute","id":352,"name":"execute","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onCommand":{"path":"/dna/hud/gadget/Console/onCommand","id":353,"name":"onCommand","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"(cmd)"}},"onKeyDown":{"path":"/dna/hud/gadget/Console/onKeyDown","id":354,"name":"onKeyDown","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"(e)"}},"onMouseWheel":{"path":"/dna/hud/gadget/Console/onMouseWheel","id":355,"name":"onMouseWheel","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"(d, x, y, e)"}},"evo":{"path":"/dna/hud/gadget/Console/evo","id":356,"name":"evo","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"drawForeground":{"path":"/dna/hud/gadget/Console/drawForeground","id":357,"name":"drawForeground","type":"function","parent":343,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"adjust":{"path":"/dna/hud/Container/adjust","id":290,"name":"adjust","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"called when container needs to update it's position and size","details":"Redefine this function for component to react on layout changes.\n","usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onClick":{"path":"/dna/hud/Container/onClick","id":298,"name":"onClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onDblClick":{"path":"/dna/hud/Container/onDblClick","id":299,"name":"onDblClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseDown":{"path":"/dna/hud/Container/onMouseDown","id":300,"name":"onMouseDown","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handles mouse down event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseUp":{"path":"/dna/hud/Container/onMouseUp","id":301,"name":"onMouseUp","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse up event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseMove":{"path":"/dna/hud/Container/onMouseMove","id":302,"name":"onMouseMove","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawBackground":{"path":"/dna/hud/Container/drawBackground","id":314,"name":"drawBackground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container background layer","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"draw":{"path":"/dna/hud/Container/draw","id":317,"name":"draw","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container","details":"Performs necessary translations and clipping\nand draws background, content and foreground.\n","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/gadget/Console/_dna","id":358,"name":"_dna","type":"string","parent":343,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"DynamicList":{"path":"/dna/hud/gadget/DynamicList","id":359,"name":"DynamicList","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"a list, that obtains it's items dynamically from the outside source","details":"Use, when the items can change any time,\nand you don't want to manage the sync with the list structure.\n","usage":"(dat)"},"dir":{"resize":{"path":"/dna/hud/gadget/DynamicList/resize","id":360,"name":"resize","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(w, h)"}},"adjust":{"path":"/dna/hud/gadget/DynamicList/adjust","id":361,"name":"adjust","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"adjustPosition":{"path":"/dna/hud/gadget/DynamicList/adjustPosition","id":362,"name":"adjustPosition","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"items":{"path":"/dna/hud/gadget/DynamicList/items","id":363,"name":"items","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onDblClick":{"path":"/dna/hud/gadget/DynamicList/onDblClick","id":364,"name":"onDblClick","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"onClick":{"path":"/dna/hud/gadget/DynamicList/onClick","id":365,"name":"onClick","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"onItemClick":{"path":"/dna/hud/gadget/DynamicList/onItemClick","id":366,"name":"onItemClick","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(i)"}},"onItemAction":{"path":"/dna/hud/gadget/DynamicList/onItemAction","id":367,"name":"onItemAction","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(i, a)"}},"moveCursor":{"path":"/dna/hud/gadget/DynamicList/moveCursor","id":368,"name":"moveCursor","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(shift)"}},"onKeyDown":{"path":"/dna/hud/gadget/DynamicList/onKeyDown","id":369,"name":"onKeyDown","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(e)"}},"onKeyUp":{"path":"/dna/hud/gadget/DynamicList/onKeyUp","id":370,"name":"onKeyUp","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(e)"}},"onMouseWheel":{"path":"/dna/hud/gadget/DynamicList/onMouseWheel","id":371,"name":"onMouseWheel","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(d, x, y, e)"}},"itemHeight":{"path":"/dna/hud/gadget/DynamicList/itemHeight","id":372,"name":"itemHeight","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawItem":{"path":"/dna/hud/gadget/DynamicList/drawItem","id":373,"name":"drawItem","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(item, i, iy)"}},"drawBackground":{"path":"/dna/hud/gadget/DynamicList/drawBackground","id":374,"name":"drawBackground","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawForeground":{"path":"/dna/hud/gadget/DynamicList/drawForeground","id":375,"name":"drawForeground","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onMouseDown":{"path":"/dna/hud/Container/onMouseDown","id":300,"name":"onMouseDown","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handles mouse down event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseUp":{"path":"/dna/hud/Container/onMouseUp","id":301,"name":"onMouseUp","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse up event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseMove":{"path":"/dna/hud/Container/onMouseMove","id":302,"name":"onMouseMove","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onFocus":{"path":"/dna/hud/Container/onFocus","id":312,"name":"onFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on focus handler","details":"It is responsible for raising this.focus flag\nand can contain any custom actions related to focus capture.\n","usage":"()"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"draw":{"path":"/dna/hud/Container/draw","id":317,"name":"draw","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container","details":"Performs necessary translations and clipping\nand draws background, content and foreground.\n","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/gadget/DynamicList/_dna","id":376,"name":"_dna","type":"string","parent":359,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"Explorer":{"path":"/dna/hud/gadget/Explorer","id":377,"name":"Explorer","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","dir":{"selectedNode":{"path":"/dna/hud/gadget/Explorer/selectedNode","id":378,"name":"selectedNode","type":"function","parent":377,"mod":1,"modName":"$","kind":"function"},"open":{"path":"/dna/hud/gadget/Explorer/open","id":379,"name":"open","type":"function","parent":377,"mod":1,"modName":"$","kind":"function"}},"idir":{"init":{"path":"/dna/hud/Window/init","id":380,"name":"init","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"setPane":{"path":"/dna/hud/Window/setPane","id":381,"name":"setPane","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(pane)"}},"attach":{"path":"/dna/hud/Window/attach","id":382,"name":"attach","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(node, name)"}},"injectStyle":{"path":"/dna/hud/Window/injectStyle","id":383,"name":"injectStyle","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(b)"}},"onFocus":{"path":"/dna/hud/Window/onFocus","id":384,"name":"onFocus","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"resize":{"path":"/dna/hud/Window/resize","id":385,"name":"resize","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(w, h)"}},"adjust":{"path":"/dna/hud/Window/adjust","id":386,"name":"adjust","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onClick":{"path":"/dna/hud/Container/onClick","id":298,"name":"onClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onDblClick":{"path":"/dna/hud/Container/onDblClick","id":299,"name":"onDblClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseDown":{"path":"/dna/hud/Container/onMouseDown","id":300,"name":"onMouseDown","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handles mouse down event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseUp":{"path":"/dna/hud/Container/onMouseUp","id":301,"name":"onMouseUp","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse up event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseMove":{"path":"/dna/hud/Container/onMouseMove","id":302,"name":"onMouseMove","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseWheel":{"path":"/dna/hud/Container/onMouseWheel","id":303,"name":"onMouseWheel","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse wheel scroll","at":[{"id":"param","type":"number","name":"d","line":"scroll delta"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(d: numbe: objectr, x: number, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawBackground":{"path":"/dna/hud/Container/drawBackground","id":314,"name":"drawBackground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container background layer","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"drawForeground":{"path":"/dna/hud/Container/drawForeground","id":316,"name":"drawForeground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container foreground","usage":"()"}},"draw":{"path":"/dna/hud/Container/draw","id":317,"name":"draw","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container","details":"Performs necessary translations and clipping\nand draws background, content and foreground.\n","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/gadget/Explorer/_dna","id":387,"name":"_dna","type":"string","parent":377,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"Eyes":{"path":"/dna/hud/gadget/Eyes","id":388,"name":"Eyes","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"eyes looking at the mouse cursor","details":"Just a sample component\n","usage":"(dat)"},"dir":{"draw":{"path":"/dna/hud/gadget/Eyes/draw","id":389,"name":"draw","type":"function","parent":388,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}}},"FrameInspector":{"path":"/dna/hud/gadget/FrameInspector","id":390,"name":"FrameInspector","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"shows and navigates a frame","usage":"(dat)"},"dir":{"saveLocation":{"path":"/dna/hud/gadget/FrameInspector/saveLocation","id":391,"name":"saveLocation","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"usage":"(node)"}},"back":{"path":"/dna/hud/gadget/FrameInspector/back","id":392,"name":"back","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onKeyDown":{"path":"/dna/hud/gadget/FrameInspector/onKeyDown","id":393,"name":"onKeyDown","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"usage":"(e)"}},"updatePath":{"path":"/dna/hud/gadget/FrameInspector/updatePath","id":394,"name":"updatePath","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"item":{"path":"/dna/hud/gadget/FrameInspector/item","id":395,"name":"item","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"usage":"(i, d)"}},"selectedNode":{"path":"/dna/hud/gadget/FrameInspector/selectedNode","id":396,"name":"selectedNode","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"open":{"path":"/dna/hud/gadget/FrameInspector/open","id":397,"name":"open","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"head":"open a frame for exploration","at":[{"id":"param","type":"object/frame","name":"next"}],"usage":"(next: object/frame)"}},"onItemAction":{"path":"/dna/hud/gadget/FrameInspector/onItemAction","id":398,"name":"onItemAction","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"usage":"(i, action)"}},"drawItem":{"path":"/dna/hud/gadget/FrameInspector/drawItem","id":399,"name":"drawItem","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"usage":"(item, i, iy)"}},"onItemClick":{"path":"/dna/hud/gadget/FrameInspector/onItemClick","id":400,"name":"onItemClick","type":"function","parent":390,"mod":1,"modName":"$","kind":"function","data":{"usage":"(i)"}}},"idir":{"resize":{"path":"/dna/hud/gadget/DynamicList/resize","id":360,"name":"resize","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(w, h)"}},"adjust":{"path":"/dna/hud/gadget/DynamicList/adjust","id":361,"name":"adjust","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"adjustPosition":{"path":"/dna/hud/gadget/DynamicList/adjustPosition","id":362,"name":"adjustPosition","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"items":{"path":"/dna/hud/gadget/DynamicList/items","id":363,"name":"items","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onDblClick":{"path":"/dna/hud/gadget/DynamicList/onDblClick","id":364,"name":"onDblClick","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"onClick":{"path":"/dna/hud/gadget/DynamicList/onClick","id":365,"name":"onClick","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"moveCursor":{"path":"/dna/hud/gadget/DynamicList/moveCursor","id":368,"name":"moveCursor","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(shift)"}},"onKeyUp":{"path":"/dna/hud/gadget/DynamicList/onKeyUp","id":370,"name":"onKeyUp","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(e)"}},"onMouseWheel":{"path":"/dna/hud/gadget/DynamicList/onMouseWheel","id":371,"name":"onMouseWheel","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"(d, x, y, e)"}},"itemHeight":{"path":"/dna/hud/gadget/DynamicList/itemHeight","id":372,"name":"itemHeight","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawBackground":{"path":"/dna/hud/gadget/DynamicList/drawBackground","id":374,"name":"drawBackground","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawForeground":{"path":"/dna/hud/gadget/DynamicList/drawForeground","id":375,"name":"drawForeground","type":"function","parent":359,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onMouseDown":{"path":"/dna/hud/Container/onMouseDown","id":300,"name":"onMouseDown","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handles mouse down event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseUp":{"path":"/dna/hud/Container/onMouseUp","id":301,"name":"onMouseUp","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse up event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseMove":{"path":"/dna/hud/Container/onMouseMove","id":302,"name":"onMouseMove","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onFocus":{"path":"/dna/hud/Container/onFocus","id":312,"name":"onFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on focus handler","details":"It is responsible for raising this.focus flag\nand can contain any custom actions related to focus capture.\n","usage":"()"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"draw":{"path":"/dna/hud/Container/draw","id":317,"name":"draw","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container","details":"Performs necessary translations and clipping\nand draws background, content and foreground.\n","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/gadget/FrameInspector/_dna","id":401,"name":"_dna","type":"string","parent":390,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"ImageButton":{"path":"/dna/hud/gadget/ImageButton","id":402,"name":"ImageButton","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"a button with an icon","usage":"(dat)"},"dir":{"adjust":{"path":"/dna/hud/gadget/ImageButton/adjust","id":403,"name":"adjust","type":"function","parent":402,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawBackground":{"path":"/dna/hud/gadget/ImageButton/drawBackground","id":404,"name":"drawBackground","type":"function","parent":402,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawImage":{"path":"/dna/hud/gadget/ImageButton/drawImage","id":405,"name":"drawImage","type":"function","parent":402,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"draw":{"path":"/dna/hud/gadget/ImageButton/draw","id":406,"name":"draw","type":"function","parent":402,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"injectStyle":{"path":"/dna/hud/gadget/Button/injectStyle","id":321,"name":"injectStyle","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"(base)"}},"onMouseDown":{"path":"/dna/hud/gadget/Button/onMouseDown","id":323,"name":"onMouseDown","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onMouseUp":{"path":"/dna/hud/gadget/Button/onMouseUp","id":324,"name":"onMouseUp","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onMouseDrag":{"path":"/dna/hud/gadget/Button/onMouseDrag","id":325,"name":"onMouseDrag","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"head":"needs to be defined to capture the mouse","usage":"()"}},"onMouseMove":{"path":"/dna/hud/gadget/Button/onMouseMove","id":326,"name":"onMouseMove","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"head":"need this to be defined for _hover flag to be working","usage":"()"}},"getState":{"path":"/dna/hud/gadget/Button/getState","id":327,"name":"getState","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"head":"get current state name - active | disabled | toggled | hover","at":[{"id":"returns","type":"string","name":"-","line":"button state based on flags"}],"usage":"(): string"}},"drawContent":{"path":"/dna/hud/gadget/Button/drawContent","id":329,"name":"drawContent","type":"function","parent":320,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}}},"ImageInspector":{"path":"/dna/hud/gadget/ImageInspector","id":407,"name":"ImageInspector","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"shows image nodes","usage":"(st)"},"dir":{"open":{"path":"/dna/hud/gadget/ImageInspector/open","id":408,"name":"open","type":"function","parent":407,"mod":1,"modName":"$","kind":"function","data":{"head":"open an image contained in a node","at":[{"id":"param","type":"object/image","name":"next"}],"usage":"(next: object/image)"}},"drawContent":{"path":"/dna/hud/gadget/ImageInspector/drawContent","id":409,"name":"drawContent","type":"function","parent":407,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onKeyDown":{"path":"/dna/hud/gadget/ImageInspector/onKeyDown","id":410,"name":"onKeyDown","type":"function","parent":407,"mod":1,"modName":"$","kind":"function","data":{"usage":"(e)"}}},"idir":{"drawBackground":{"path":"/dna/hud/Pane/drawBackground","id":411,"name":"drawBackground","type":"function","parent":470,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"draw":{"path":"/dna/hud/Pane/draw","id":413,"name":"draw","type":"function","parent":470,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}}},"Label":{"path":"/dna/hud/gadget/Label","id":414,"name":"Label","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"a static text label","usage":"(dat)"},"dir":{"init":{"path":"/dna/hud/gadget/Label/init","id":415,"name":"init","type":"function","parent":414,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"setStyle":{"path":"/dna/hud/gadget/Label/setStyle","id":416,"name":"setStyle","type":"function","parent":414,"mod":1,"modName":"$","kind":"function","data":{"usage":"(base)"}},"adjust":{"path":"/dna/hud/gadget/Label/adjust","id":417,"name":"adjust","type":"function","parent":414,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"setText":{"path":"/dna/hud/gadget/Label/setText","id":418,"name":"setText","type":"function","parent":414,"mod":1,"modName":"$","kind":"function","data":{"head":"set label text","at":[{"id":"param","type":"string","name":"text"}],"usage":"(text: string)"}},"draw":{"path":"/dna/hud/gadget/Label/draw","id":419,"name":"draw","type":"function","parent":414,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}}},"Magnify":{"path":"/dna/hud/gadget/Magnify","id":420,"name":"Magnify","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"magnifies an area around the mouse cursor","usage":"(dat)"},"dir":{"verifyZPosition":{"path":"/dna/hud/gadget/Magnify/verifyZPosition","id":421,"name":"verifyZPosition","type":"function","parent":420,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"init":{"path":"/dna/hud/Window/init","id":380,"name":"init","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"setPane":{"path":"/dna/hud/Window/setPane","id":381,"name":"setPane","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(pane)"}},"attach":{"path":"/dna/hud/Window/attach","id":382,"name":"attach","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(node, name)"}},"injectStyle":{"path":"/dna/hud/Window/injectStyle","id":383,"name":"injectStyle","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(b)"}},"onFocus":{"path":"/dna/hud/Window/onFocus","id":384,"name":"onFocus","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"resize":{"path":"/dna/hud/Window/resize","id":385,"name":"resize","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(w, h)"}},"adjust":{"path":"/dna/hud/Window/adjust","id":386,"name":"adjust","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onClick":{"path":"/dna/hud/Container/onClick","id":298,"name":"onClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onDblClick":{"path":"/dna/hud/Container/onDblClick","id":299,"name":"onDblClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseDown":{"path":"/dna/hud/Container/onMouseDown","id":300,"name":"onMouseDown","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handles mouse down event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseUp":{"path":"/dna/hud/Container/onMouseUp","id":301,"name":"onMouseUp","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse up event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseMove":{"path":"/dna/hud/Container/onMouseMove","id":302,"name":"onMouseMove","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseWheel":{"path":"/dna/hud/Container/onMouseWheel","id":303,"name":"onMouseWheel","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse wheel scroll","at":[{"id":"param","type":"number","name":"d","line":"scroll delta"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(d: numbe: objectr, x: number, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawBackground":{"path":"/dna/hud/Container/drawBackground","id":314,"name":"drawBackground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container background layer","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"drawForeground":{"path":"/dna/hud/Container/drawForeground","id":316,"name":"drawForeground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container foreground","usage":"()"}},"draw":{"path":"/dna/hud/Container/draw","id":317,"name":"draw","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container","details":"Performs necessary translations and clipping\nand draws background, content and foreground.\n","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/gadget/Magnify/_dna","id":422,"name":"_dna","type":"string","parent":420,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"TextPane":{"path":"/dna/hud/gadget/TextPane","id":423,"name":"TextPane","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"a multiline text container","details":"Used in composite components like TextView.\n","usage":"(st)"},"dir":{"setText":{"path":"/dna/hud/gadget/TextPane/setText","id":424,"name":"setText","type":"function","parent":423,"mod":1,"modName":"$","kind":"function","data":{"usage":"(txt)"}},"adjust":{"path":"/dna/hud/gadget/TextPane/adjust","id":425,"name":"adjust","type":"function","parent":423,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"moveTo":{"path":"/dna/hud/gadget/TextPane/moveTo","id":426,"name":"moveTo","type":"function","parent":423,"mod":1,"modName":"$","kind":"function","data":{"head":"move text pane to y coordinate","details":"the value is bounded by [0 .. page.h-view.h]\n","usage":"(y)"}},"scroll":{"path":"/dna/hud/gadget/TextPane/scroll","id":427,"name":"scroll","type":"function","parent":423,"mod":1,"modName":"$","kind":"function","data":{"head":"scroll the view up or down by value determined in [dy]","usage":"(dy)"}},"prerender":{"path":"/dna/hud/gadget/TextPane/prerender","id":428,"name":"prerender","type":"function","parent":423,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawContent":{"path":"/dna/hud/gadget/TextPane/drawContent","id":429,"name":"drawContent","type":"function","parent":423,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawBackground":{"path":"/dna/hud/gadget/TextPane/drawBackground","id":430,"name":"drawBackground","type":"function","parent":423,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"draw":{"path":"/dna/hud/Pane/draw","id":413,"name":"draw","type":"function","parent":470,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}}},"TextView":{"path":"/dna/hud/gadget/TextView","id":431,"name":"TextView","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"multiline text viewer with a slider for scrolling","usage":"(st)"},"dir":{"adjust":{"path":"/dna/hud/gadget/TextView/adjust","id":432,"name":"adjust","type":"function","parent":431,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"sync":{"path":"/dna/hud/gadget/TextView/sync","id":433,"name":"sync","type":"function","parent":431,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"moveCursor":{"path":"/dna/hud/gadget/TextView/moveCursor","id":434,"name":"moveCursor","type":"function","parent":431,"mod":1,"modName":"$","kind":"function","data":{"usage":"(shift)"}},"setText":{"path":"/dna/hud/gadget/TextView/setText","id":435,"name":"setText","type":"function","parent":431,"mod":1,"modName":"$","kind":"function","data":{"usage":"(txt)"}},"onKeyDown":{"path":"/dna/hud/gadget/TextView/onKeyDown","id":436,"name":"onKeyDown","type":"function","parent":431,"mod":1,"modName":"$","kind":"function","data":{"usage":"(e)"}}},"idir":{"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onClick":{"path":"/dna/hud/Container/onClick","id":298,"name":"onClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onDblClick":{"path":"/dna/hud/Container/onDblClick","id":299,"name":"onDblClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseDown":{"path":"/dna/hud/Container/onMouseDown","id":300,"name":"onMouseDown","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handles mouse down event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseUp":{"path":"/dna/hud/Container/onMouseUp","id":301,"name":"onMouseUp","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse up event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseMove":{"path":"/dna/hud/Container/onMouseMove","id":302,"name":"onMouseMove","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseWheel":{"path":"/dna/hud/Container/onMouseWheel","id":303,"name":"onMouseWheel","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse wheel scroll","at":[{"id":"param","type":"number","name":"d","line":"scroll delta"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(d: numbe: objectr, x: number, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onFocus":{"path":"/dna/hud/Container/onFocus","id":312,"name":"onFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on focus handler","details":"It is responsible for raising this.focus flag\nand can contain any custom actions related to focus capture.\n","usage":"()"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawBackground":{"path":"/dna/hud/Container/drawBackground","id":314,"name":"drawBackground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container background layer","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"drawForeground":{"path":"/dna/hud/Container/drawForeground","id":316,"name":"drawForeground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container foreground","usage":"()"}},"draw":{"path":"/dna/hud/Container/draw","id":317,"name":"draw","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container","details":"Performs necessary translations and clipping\nand draws background, content and foreground.\n","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/gadget/TextView/_dna","id":437,"name":"_dna","type":"string","parent":431,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"NodeInspector":{"path":"/dna/hud/gadget/NodeInspector","id":438,"name":"NodeInspector","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"explores various nodes","details":"Integrates FrameInspector, TextInspector and ImageInspector\nin one component that switches between them dynamically.\n","usage":"(st)"},"dir":{"init":{"path":"/dna/hud/gadget/NodeInspector/init","id":439,"name":"init","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"layout":{"path":"/dna/hud/gadget/NodeInspector/layout","id":440,"name":"layout","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"selectedNode":{"path":"/dna/hud/gadget/NodeInspector/selectedNode","id":441,"name":"selectedNode","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"ensureActive":{"path":"/dna/hud/gadget/NodeInspector/ensureActive","id":442,"name":"ensureActive","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"(id)"}},"sync":{"path":"/dna/hud/gadget/NodeInspector/sync","id":443,"name":"sync","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"back":{"path":"/dna/hud/gadget/NodeInspector/back","id":444,"name":"back","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"open":{"path":"/dna/hud/gadget/NodeInspector/open","id":445,"name":"open","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"(next)"}},"land":{"path":"/dna/hud/gadget/NodeInspector/land","id":446,"name":"land","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"(next)"}},"select":{"path":"/dna/hud/gadget/NodeInspector/select","id":447,"name":"select","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"(node)"}},"getDir":{"path":"/dna/hud/gadget/NodeInspector/getDir","id":448,"name":"getDir","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onFocus":{"path":"/dna/hud/gadget/NodeInspector/onFocus","id":449,"name":"onFocus","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onKeyDown":{"path":"/dna/hud/gadget/NodeInspector/onKeyDown","id":450,"name":"onKeyDown","type":"function","parent":438,"mod":1,"modName":"$","kind":"function","data":{"usage":"(e)"}}},"idir":{"adjust":{"path":"/dna/hud/MonoContainer/adjust","id":451,"name":"adjust","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"activate":{"path":"/dna/hud/MonoContainer/activate","id":452,"name":"activate","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(id)"}},"drawContent":{"path":"/dna/hud/MonoContainer/drawContent","id":453,"name":"drawContent","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"draw":{"path":"/dna/hud/MonoContainer/draw","id":454,"name":"draw","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onClick":{"path":"/dna/hud/MonoContainer/onClick","id":455,"name":"onClick","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onDblClick":{"path":"/dna/hud/MonoContainer/onDblClick","id":456,"name":"onDblClick","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onMouseDown":{"path":"/dna/hud/MonoContainer/onMouseDown","id":457,"name":"onMouseDown","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"onMouseUp":{"path":"/dna/hud/MonoContainer/onMouseUp","id":458,"name":"onMouseUp","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"onMouseMove":{"path":"/dna/hud/MonoContainer/onMouseMove","id":459,"name":"onMouseMove","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onMouseWheel":{"path":"/dna/hud/MonoContainer/onMouseWheel","id":460,"name":"onMouseWheel","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(d, x, y, e)"}},"onTouchStart":{"path":"/dna/hud/MonoContainer/onTouchStart","id":461,"name":"onTouchStart","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onTouchEnd":{"path":"/dna/hud/MonoContainer/onTouchEnd","id":462,"name":"onTouchEnd","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"onReleasedFocus":{"path":"/dna/hud/MonoContainer/onReleasedFocus","id":463,"name":"onReleasedFocus","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawBackground":{"path":"/dna/hud/Container/drawBackground","id":314,"name":"drawBackground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container background layer","usage":"()"}},"drawForeground":{"path":"/dna/hud/Container/drawForeground","id":316,"name":"drawForeground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container foreground","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/gadget/NodeInspector/_dna","id":464,"name":"_dna","type":"string","parent":438,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"Progress":{"path":"/dna/hud/gadget/Progress","id":465,"name":"Progress","type":"function","parent":319,"mod":1,"modName":"$","kind":"cons","data":{"head":"a progress bar","details":"The _value_ property contains a current progress value\nand should be between _minValue_ and _maxValue_.\n","usage":"(dat)"},"dir":{"getText":{"path":"/dna/hud/gadget/Progress/getText","id":466,"name":"getText","type":"function","parent":465,"mod":1,"modName":"$","kind":"function","data":{"head":"a service methods used by draw() to get the progress text (e.g. \"40%\")","details":"Redefine to provide a customized label, like \"Loaded 70%\".\n","usage":"()"}},"draw":{"path":"/dna/hud/gadget/Progress/draw","id":467,"name":"draw","type":"function","parent":465,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}}}}},"Window":{"path":"/dna/hud/Window","id":468,"name":"Window","type":"function","parent":275,"mod":1,"modName":"$","kind":"cons","data":{"usage":"(dat)"},"dir":{"init":{"path":"/dna/hud/Window/init","id":380,"name":"init","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"setPane":{"path":"/dna/hud/Window/setPane","id":381,"name":"setPane","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(pane)"}},"attach":{"path":"/dna/hud/Window/attach","id":382,"name":"attach","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(node, name)"}},"injectStyle":{"path":"/dna/hud/Window/injectStyle","id":383,"name":"injectStyle","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(b)"}},"onFocus":{"path":"/dna/hud/Window/onFocus","id":384,"name":"onFocus","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"resize":{"path":"/dna/hud/Window/resize","id":385,"name":"resize","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"(w, h)"}},"adjust":{"path":"/dna/hud/Window/adjust","id":386,"name":"adjust","type":"function","parent":468,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onClick":{"path":"/dna/hud/Container/onClick","id":298,"name":"onClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onDblClick":{"path":"/dna/hud/Container/onDblClick","id":299,"name":"onDblClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseDown":{"path":"/dna/hud/Container/onMouseDown","id":300,"name":"onMouseDown","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handles mouse down event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseUp":{"path":"/dna/hud/Container/onMouseUp","id":301,"name":"onMouseUp","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse up event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseMove":{"path":"/dna/hud/Container/onMouseMove","id":302,"name":"onMouseMove","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseWheel":{"path":"/dna/hud/Container/onMouseWheel","id":303,"name":"onMouseWheel","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse wheel scroll","at":[{"id":"param","type":"number","name":"d","line":"scroll delta"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(d: numbe: objectr, x: number, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawBackground":{"path":"/dna/hud/Container/drawBackground","id":314,"name":"drawBackground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container background layer","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"drawForeground":{"path":"/dna/hud/Container/drawForeground","id":316,"name":"drawForeground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container foreground","usage":"()"}},"draw":{"path":"/dna/hud/Container/draw","id":317,"name":"draw","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container","details":"Performs necessary translations and clipping\nand draws background, content and foreground.\n","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/Window/_dna","id":469,"name":"_dna","type":"string","parent":468,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"Pane":{"path":"/dna/hud/Pane","id":470,"name":"Pane","type":"function","parent":275,"mod":1,"modName":"$","kind":"cons","data":{"head":"a rudimentary graphical HUD component","usage":"(st)"},"dir":{"drawBackground":{"path":"/dna/hud/Pane/drawBackground","id":411,"name":"drawBackground","type":"function","parent":470,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"drawContent":{"path":"/dna/hud/Pane/drawContent","id":412,"name":"drawContent","type":"function","parent":470,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"draw":{"path":"/dna/hud/Pane/draw","id":413,"name":"draw","type":"function","parent":470,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}}},"MonoContainer":{"path":"/dna/hud/MonoContainer","id":471,"name":"MonoContainer","type":"function","parent":275,"mod":1,"modName":"$","kind":"cons","data":{"usage":"(st)"},"dir":{"adjust":{"path":"/dna/hud/MonoContainer/adjust","id":451,"name":"adjust","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"activate":{"path":"/dna/hud/MonoContainer/activate","id":452,"name":"activate","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(id)"}},"drawContent":{"path":"/dna/hud/MonoContainer/drawContent","id":453,"name":"drawContent","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"draw":{"path":"/dna/hud/MonoContainer/draw","id":454,"name":"draw","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"onClick":{"path":"/dna/hud/MonoContainer/onClick","id":455,"name":"onClick","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onDblClick":{"path":"/dna/hud/MonoContainer/onDblClick","id":456,"name":"onDblClick","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onMouseDown":{"path":"/dna/hud/MonoContainer/onMouseDown","id":457,"name":"onMouseDown","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"onMouseUp":{"path":"/dna/hud/MonoContainer/onMouseUp","id":458,"name":"onMouseUp","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"onMouseMove":{"path":"/dna/hud/MonoContainer/onMouseMove","id":459,"name":"onMouseMove","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onMouseWheel":{"path":"/dna/hud/MonoContainer/onMouseWheel","id":460,"name":"onMouseWheel","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(d, x, y, e)"}},"onTouchStart":{"path":"/dna/hud/MonoContainer/onTouchStart","id":461,"name":"onTouchStart","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, e)"}},"onTouchEnd":{"path":"/dna/hud/MonoContainer/onTouchEnd","id":462,"name":"onTouchEnd","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, b, e)"}},"onReleasedFocus":{"path":"/dna/hud/MonoContainer/onReleasedFocus","id":463,"name":"onReleasedFocus","type":"function","parent":471,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"style":{"path":"/dna/hud/Container/style","id":288,"name":"style","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"lx":{"path":"/dna/hud/Container/lx","id":291,"name":"lx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from parent to local coordinate space","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"x","line":"in local coordinate space"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Container/ly","id":292,"name":"ly","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from parent to local coordinate space","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"y","line":"in local coordinate space"}],"usage":"(y: number): number"}},"gx":{"path":"/dna/hud/Container/gx","id":293,"name":"gx","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map x from local to parent coordinate space","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"x","line":"in parnet coordinate space"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Container/gy","id":294,"name":"gy","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"map y from local to parent coordinate space","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"y","line":"in parnet coordinate space"}],"usage":"(y: number): number"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"captureMouse":{"path":"/dna/hud/Container/captureMouse","id":306,"name":"captureMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseMouse":{"path":"/dna/hud/Container/releaseMouse","id":307,"name":"releaseMouse","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget mouse release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureTouch":{"path":"/dna/hud/Container/captureTouch","id":308,"name":"captureTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the captured list.\n"}},"releaseTouch":{"path":"/dna/hud/Container/releaseTouch","id":309,"name":"releaseTouch","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget touch release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"captureFocus":{"path":"/dna/hud/Container/captureFocus","id":310,"name":"captureFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus capture","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)","details":"Includes a gadget into the focused list\n"}},"releaseFocus":{"path":"/dna/hud/Container/releaseFocus","id":311,"name":"releaseFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to propagate a gadget focus release","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"onFocus":{"path":"/dna/hud/Container/onFocus","id":312,"name":"onFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on focus handler","details":"It is responsible for raising this.focus flag\nand can contain any custom actions related to focus capture.\n","usage":"()"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawBackground":{"path":"/dna/hud/Container/drawBackground","id":314,"name":"drawBackground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container background layer","usage":"()"}},"drawForeground":{"path":"/dna/hud/Container/drawForeground","id":316,"name":"drawForeground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container foreground","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/MonoContainer/_dna","id":472,"name":"_dna","type":"string","parent":471,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"Hud":{"path":"/dna/hud/Hud","id":473,"name":"Hud","type":"function","parent":275,"mod":1,"modName":"$","kind":"cons","data":{"head":"top-level UI container that handles all the events","at":[{"id":"depends(/dna/hud/Container)","name":""}],"usage":"(st)"},"dir":{"init":{"path":"/dna/hud/Hud/init","id":474,"name":"init","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"injectTraps":{"path":"/dna/hud/Hud/injectTraps","id":475,"name":"injectTraps","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"style":{"path":"/dna/hud/Hud/style","id":476,"name":"style","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"saveSize":{"path":"/dna/hud/Hud/saveSize","id":477,"name":"saveSize","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to save the size to use by isResized() later","usage":"()"}},"isResized":{"path":"/dna/hud/Hud/isResized","id":478,"name":"isResized","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to test if the hud has been resized","usage":"()"}},"adjust":{"path":"/dna/hud/Hud/adjust","id":479,"name":"adjust","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"called when hud needs to update it's position and size","usage":"()"}},"lx":{"path":"/dna/hud/Hud/lx","id":480,"name":"lx","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"-","line":"local x"}],"usage":"(x: number): number"}},"ly":{"path":"/dna/hud/Hud/ly","id":481,"name":"ly","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"lxy":{"path":"/dna/hud/Hud/lxy","id":482,"name":"lxy","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to local coordinate system","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}},"gx":{"path":"/dna/hud/Hud/gx","id":483,"name":"gx","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/dna/hud/Hud/gy","id":484,"name":"gy","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"gxy":{"path":"/dna/hud/Hud/gxy","id":485,"name":"gxy","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to parent node coordinate system","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in parent node coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}},"onMouseDown":{"path":"/dna/hud/Hud/onMouseDown","id":486,"name":"onMouseDown","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"handles mouse down event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseUp":{"path":"/dna/hud/Hud/onMouseUp","id":487,"name":"onMouseUp","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse up event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"number","name":"b","line":"buttons mask form the mouse event"},{"id":"param","type":"object","name":"e","line":"original mouse event"},{"id":"returns","type":"boolean","name":"-","line":"true if focus is captured"}],"usage":"(x: numb: numbe: objectrer, y: number, b, e): boolean"}},"onMouseMove":{"path":"/dna/hud/Hud/onMouseMove","id":488,"name":"onMouseMove","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"handle mouse move event","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"original mouse event"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onTouchEnd":{"path":"/dna/hud/Hud/onTouchEnd","id":489,"name":"onTouchEnd","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch end events ","at":[{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(e: object)"}},"onKeyDown":{"path":"/dna/hud/Hud/onKeyDown","id":490,"name":"onKeyDown","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle key down events","at":[{"id":"param","type":"object","name":"e","line":"an original key event"}],"usage":"(e: object)"}},"onKeyUp":{"path":"/dna/hud/Hud/onKeyUp","id":491,"name":"onKeyUp","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle key up events","at":[{"id":"param","type":"object","name":"e","line":"an original key event"}],"usage":"(e: object)"}},"expand":{"path":"/dna/hud/Hud/expand","id":492,"name":"expand","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to expand the hud to the whole screen","usage":"()"}},"captureMouse":{"path":"/dna/hud/Hud/captureMouse","id":493,"name":"captureMouse","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call tracking gadget mouse capture","details":"Includes a gadget into the captured list.\n","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"releaseMouse":{"path":"/dna/hud/Hud/releaseMouse","id":494,"name":"releaseMouse","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to clear the captured gadgets list","usage":"()"}},"captureTouch":{"path":"/dna/hud/Hud/captureTouch","id":495,"name":"captureTouch","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call for tracking touched gadgets","details":"Includes a gadget into the captured list.\n","at":[{"id":"param","type":"object","name":"gadget"}],"usage":"(gadget: object)"}},"releaseTouch":{"path":"/dna/hud/Hud/releaseTouch","id":496,"name":"releaseTouch","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to clear the touched gadgets list","usage":"(e)"}},"captureFocus":{"path":"/dna/hud/Hud/captureFocus","id":497,"name":"captureFocus","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to track focused gadgets","details":"Includes a gadget into the focused list\n","at":[{"id":"param","type":"object/gadget","name":""}],"usage":": object/gadget(gadget)"}},"releaseFocus":{"path":"/dna/hud/Hud/releaseFocus","id":498,"name":"releaseFocus","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to clear the focused gadgets list","at":[{"id":"param","type":"object/gadget","name":""}],"usage":": object/gadget(gadget)"}},"draw":{"path":"/dna/hud/Hud/draw","id":499,"name":"draw","type":"function","parent":473,"mod":1,"modName":"$","kind":"function","data":{"head":"draw the hud","usage":"()"}}},"idir":{"layout":{"path":"/dna/hud/Container/layout","id":289,"name":"layout","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"promoteNode":{"path":"/dna/hud/Container/promoteNode","id":295,"name":"promoteNode","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"nodes are not centered in hud by default","usage":"(node)"}},"onAttached":{"path":"/dna/hud/Container/onAttached","id":296,"name":"onAttached","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle a node attached to the container.","details":"Calls this.adjust() to rearrange layout with new component.\n","usage":"(node)"}},"moveOnTop":{"path":"/dna/hud/Container/moveOnTop","id":297,"name":"moveOnTop","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"move a child node on top","at":[{"id":"param","type":"number","name":"i","line":"a node index"}],"usage":"(i: number)"}},"onClick":{"path":"/dna/hud/Container/onClick","id":298,"name":"onClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onDblClick":{"path":"/dna/hud/Container/onDblClick","id":299,"name":"onDblClick","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse click","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onMouseWheel":{"path":"/dna/hud/Container/onMouseWheel","id":303,"name":"onMouseWheel","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle mouse wheel scroll","at":[{"id":"param","type":"number","name":"d","line":"scroll delta"},{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original mouse event object"}],"usage":"(d: numbe: objectr, x: number, y: number, e)"}},"onTouchStart":{"path":"/dna/hud/Container/onTouchStart","id":304,"name":"onTouchStart","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle touch start events ","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"param","type":"object","name":"e","line":"an original touch event object"}],"usage":"(x: numbe: objectr, y: number, e)"}},"onReleasedFocus":{"path":"/dna/hud/Container/onReleasedFocus","id":305,"name":"onReleasedFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"a service call to handle focus release","usage":"()"}},"onFocus":{"path":"/dna/hud/Container/onFocus","id":312,"name":"onFocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on focus handler","details":"It is responsible for raising this.focus flag\nand can contain any custom actions related to focus capture.\n","usage":"()"}},"onUnfocus":{"path":"/dna/hud/Container/onUnfocus","id":313,"name":"onUnfocus","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"on loosing focus handler","details":"It is responsible for reseting this.focus flag\nand can contain any custom actions related to loosing focus.\n","usage":"()"}},"drawBackground":{"path":"/dna/hud/Container/drawBackground","id":314,"name":"drawBackground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container background layer","usage":"()"}},"drawContent":{"path":"/dna/hud/Container/drawContent","id":315,"name":"drawContent","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container child components","usage":"()"}},"drawForeground":{"path":"/dna/hud/Container/drawForeground","id":316,"name":"drawForeground","type":"function","parent":287,"mod":1,"modName":"$","kind":"function","data":{"head":"draw container foreground","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/dna/hud/Hud/_dna","id":500,"name":"_dna","type":"string","parent":473,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"trait":{"path":"/dna/hud/trait","id":501,"name":"trait","type":"object","parent":275,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"Component":{"path":"/dna/hud/trait/Component","id":502,"name":"Component","type":"object","parent":501,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{}},"Draggable":{"path":"/dna/hud/trait/Draggable","id":503,"name":"Draggable","type":"object","parent":501,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"onMouseDrag":{"path":"/dna/hud/trait/Draggable/onMouseDrag","id":504,"name":"onMouseDrag","type":"function","parent":503,"mod":1,"modName":"$","kind":"function"}}},"name":{"path":"/dna/hud/trait/name","id":505,"name":"name","type":"string","parent":501,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"Menu":{"path":"/dna/hud/Menu","id":506,"name":"Menu","type":"function","parent":275,"mod":1,"modName":"$","kind":"class","dir":{"syncTheme":{"path":"/dna/hud/Menu/syncTheme","id":507,"name":"syncTheme","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"show":{"path":"/dna/hud/Menu/show","id":508,"name":"show","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"hide":{"path":"/dna/hud/Menu/hide","id":509,"name":"hide","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"selectFrom":{"path":"/dna/hud/Menu/selectFrom","id":510,"name":"selectFrom","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"slideToActiveItem":{"path":"/dna/hud/Menu/slideToActiveItem","id":511,"name":"slideToActiveItem","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"next":{"path":"/dna/hud/Menu/next","id":512,"name":"next","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"prev":{"path":"/dna/hud/Menu/prev","id":513,"name":"prev","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"left":{"path":"/dna/hud/Menu/left","id":514,"name":"left","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"right":{"path":"/dna/hud/Menu/right","id":515,"name":"right","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"select":{"path":"/dna/hud/Menu/select","id":516,"name":"select","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"back":{"path":"/dna/hud/Menu/back","id":517,"name":"back","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"activate":{"path":"/dna/hud/Menu/activate","id":518,"name":"activate","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"focusOn":{"path":"/dna/hud/Menu/focusOn","id":519,"name":"focusOn","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"draw":{"path":"/dna/hud/Menu/draw","id":520,"name":"draw","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"currentItem":{"path":"/dna/hud/Menu/currentItem","id":521,"name":"currentItem","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"selectedValue":{"path":"/dna/hud/Menu/selectedValue","id":522,"name":"selectedValue","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"},"evo":{"path":"/dna/hud/Menu/evo","id":523,"name":"evo","type":"function","parent":506,"mod":1,"modName":"$","kind":"function"}}}}},"kinetix":{"path":"/dna/kinetix","id":524,"name":"kinetix","type":"object","parent":161,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","dir":{"easing":{"path":"/dna/kinetix/easing","id":525,"name":"easing","type":"object","parent":524,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"saw":{"path":"/dna/kinetix/easing/saw","id":526,"name":"saw","type":"function","parent":525,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"triangle":{"path":"/dna/kinetix/easing/triangle","id":527,"name":"triangle","type":"function","parent":525,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"sin":{"path":"/dna/kinetix/easing/sin","id":528,"name":"sin","type":"function","parent":525,"mod":1,"modName":"$","kind":"function","data":{"usage":"(t)"}},"quad":{"path":"/dna/kinetix/easing/quad","id":529,"name":"quad","type":"function","parent":525,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"cubic":{"path":"/dna/kinetix/easing/cubic","id":530,"name":"cubic","type":"function","parent":525,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"quart":{"path":"/dna/kinetix/easing/quart","id":531,"name":"quart","type":"function","parent":525,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"elastic":{"path":"/dna/kinetix/easing/elastic","id":532,"name":"elastic","type":"function","parent":525,"mod":1,"modName":"$","kind":"function","data":{"usage":"(t)"}},"cubicBezier":{"path":"/dna/kinetix/easing/cubicBezier","id":533,"name":"cubicBezier","type":"function","parent":525,"mod":1,"modName":"$","kind":"function","data":{"usage":"(t)"}},"name":{"path":"/dna/kinetix/easing/name","id":534,"name":"name","type":"string","parent":525,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"key":{"path":"/dna/kinetix/key","id":535,"name":"key","type":"object","parent":524,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":"A key is the main kinematix concept.","details":"A key keeps animation going.\n\nThe most generic key has 4 key elements:\n tick(dt) - keep the timer going\n easing() - calculate current easing value\n map(val) - map easing value to property value\n apply(val) - apply updated value to the property\n"},"dir":{"setup":{"path":"/dna/kinetix/key/setup","id":536,"name":"setup","type":"function","parent":535,"mod":1,"modName":"$","kind":"function","data":{"usage":"(st)"}},"activate":{"path":"/dna/kinetix/key/activate","id":537,"name":"activate","type":"function","parent":535,"mod":1,"modName":"$","kind":"function"},"tick":{"path":"/dna/kinetix/key/tick","id":538,"name":"tick","type":"function","parent":535,"mod":1,"modName":"$","kind":"function"},"step":{"path":"/dna/kinetix/key/step","id":539,"name":"step","type":"function","parent":535,"mod":1,"modName":"$","kind":"function"},"map":{"path":"/dna/kinetix/key/map","id":540,"name":"map","type":"function","parent":535,"mod":1,"modName":"$","kind":"function","data":{"head":"map easing value on property value","usage":"(val)"}},"apply":{"path":"/dna/kinetix/key/apply","id":541,"name":"apply","type":"function","parent":535,"mod":1,"modName":"$","kind":"function","data":{"usage":"(val)"}},"evo":{"path":"/dna/kinetix/key/evo","id":542,"name":"evo","type":"function","parent":535,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"then":{"path":"/dna/kinetix/key/then","id":543,"name":"then","type":"function","parent":535,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/dna/kinetix/key/kill","id":544,"name":"kill","type":"function","parent":535,"mod":1,"modName":"$","kind":"function"},"name":{"path":"/dna/kinetix/key/name","id":545,"name":"name","type":"string","parent":535,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"Kinetix":{"path":"/dna/kinetix/Kinetix","id":546,"name":"Kinetix","type":"function","parent":524,"mod":1,"modName":"$","kind":"class","dir":{"push":{"path":"/dna/kinetix/Kinetix/push","id":547,"name":"push","type":"function","parent":546,"mod":1,"modName":"$","kind":"function"},"key":{"path":"/dna/kinetix/Kinetix/key","id":548,"name":"key","type":"function","parent":546,"mod":1,"modName":"$","kind":"function"},"evo":{"path":"/dna/kinetix/Kinetix/evo","id":549,"name":"evo","type":"function","parent":546,"mod":1,"modName":"$","kind":"function"}}}}}}},"lib":{"path":"/lib","id":550,"name":"lib","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" library functions","details":"Place any utilitary standalone functions here.\nA function belongs to the particular mod\nit was defined for and can be accessed through\nthat mod only unless manually shared.\n\n"},"dir":{"hud":{"path":"/lib/hud","id":551,"name":"hud","type":"object","parent":550,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"style":{"path":"/lib/hud/style","id":552,"name":"style","type":"function","parent":551,"mod":1,"modName":"$","kind":"function","data":{"usage":"(path, source)"}},"line":{"path":"/lib/hud/line","id":553,"name":"line","type":"function","parent":551,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x1, y1, x2, y2)"}},"rect":{"path":"/lib/hud/rect","id":554,"name":"rect","type":"function","parent":551,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, w, h)"}},"panel":{"path":"/lib/hud/panel","id":555,"name":"panel","type":"function","parent":551,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, w, h)"}},"button":{"path":"/lib/hud/button","id":556,"name":"button","type":"function","parent":551,"mod":1,"modName":"$","kind":"function","data":{"usage":"(x, y, w, h)"}},"name":{"path":"/lib/hud/name","id":557,"name":"name","type":"string","parent":551,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"array":{"path":"/lib/array","id":558,"name":"array","type":"object","parent":550,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":"select the next element from the array","at":[{"id":"param","type":"array","name":"ls","line":"the source array"},{"id":"param","type":"object","name":"cur","line":"current element"},{"id":"param","type":"function","name":"predicate","line":"an optional filter"},{"id":"returns","type":"object","name":"-","line":"the selected element, undefined if nothing found"}]},"dir":{"next":{"path":"/lib/array/next","id":559,"name":"next","type":"function","parent":558,"mod":1,"modName":"$","kind":"function","data":{"head":"select the next element from the array","at":[{"id":"param","type":"array","name":"ls","line":"the source array"},{"id":"param","type":"object","name":"cur","line":"current element"},{"id":"param","type":"function","name":"predicate","line":"an optional filter"},{"id":"returns","type":"object","name":"-","line":"the selected element, undefined if nothing found"}],"usage":"(ls: array, cur: object, predicate: function): object"}},"prev":{"path":"/lib/array/prev","id":560,"name":"prev","type":"function","parent":558,"mod":1,"modName":"$","kind":"function","data":{"head":"select the previous element from the array","at":[{"id":"param","type":"array","name":"ls","line":"the source array"},{"id":"param","type":"object","name":"cur","line":"current element"},{"id":"param","type":"function","name":"predicate","line":"an optional filter"},{"id":"returns","type":"object","name":"-","line":"the selected element, undefined if nothing found"}],"usage":"(ls: array, cur: object, predicate: function): object"}},"name":{"path":"/lib/array/name","id":561,"name":"name","type":"string","parent":558,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"asserts":{"path":"/lib/asserts","id":562,"name":"asserts","type":"object","parent":550,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":"collection of assert functions"},"dir":{"assertTrue":{"path":"/lib/asserts/assertTrue","id":563,"name":"assertTrue","type":"function","parent":562,"mod":1,"modName":"$","kind":"function","data":{"head":"assert that value is true","usage":"(value, exception)"}},"assertNumber":{"path":"/lib/asserts/assertNumber","id":564,"name":"assertNumber","type":"function","parent":562,"mod":1,"modName":"$","kind":"function","data":{"head":"assert that value is not NaN","usage":"(value, exception)"}},"notEmpty":{"path":"/lib/asserts/notEmpty","id":565,"name":"notEmpty","type":"function","parent":562,"mod":1,"modName":"$","kind":"function","data":{"head":"assert that value is not empty","usage":"(value, exception)"}},"name":{"path":"/lib/asserts/name","id":566,"name":"name","type":"string","parent":562,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"img":{"path":"/lib/img","id":567,"name":"img","type":"object","parent":550,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"TileSet":{"path":"/lib/img/TileSet","id":568,"name":"TileSet","type":"function","parent":567,"mod":1,"modName":"$","kind":"cons","data":{"head":"construct tileset from the image","usage":"(img, sx, sy, tw, th)"},"dir":{"init":{"path":"/lib/img/TileSet/init","id":569,"name":"init","type":"function","parent":568,"mod":1,"modName":"$","kind":"function"},"draw":{"path":"/lib/img/TileSet/draw","id":570,"name":"draw","type":"function","parent":568,"mod":1,"modName":"$","kind":"function"}}},"screenshot":{"path":"/lib/img/screenshot","id":571,"name":"screenshot","type":"function","parent":567,"mod":1,"modName":"$","kind":"function","data":{"head":"make a screenshot and download with specified filename","usage":"(filename)"}},"screenshotArea":{"path":"/lib/img/screenshotArea","id":572,"name":"screenshotArea","type":"function","parent":567,"mod":1,"modName":"$","kind":"function","data":{"head":"make a screenshot of a screen area","usage":"(filename, x, y, w, h)"}},"downloadDataURL":{"path":"/lib/img/downloadDataURL","id":573,"name":"downloadDataURL","type":"function","parent":567,"mod":1,"modName":"$","kind":"function","data":{"head":"download a data url by creating a hyperlink and clicking it","usage":"(dataURL, name, ext)"}},"imgToCanvas":{"path":"/lib/img/imgToCanvas","id":574,"name":"imgToCanvas","type":"function","parent":567,"mod":1,"modName":"$","kind":"function","data":{"head":"convert image to a canvas with the same size and image content","usage":"(img)"}},"imgToDataURL":{"path":"/lib/img/imgToDataURL","id":575,"name":"imgToDataURL","type":"function","parent":567,"mod":1,"modName":"$","kind":"function","data":{"head":"convert image to a data url","usage":"(img, type)"}},"imgData":{"path":"/lib/img/imgData","id":576,"name":"imgData","type":"function","parent":567,"mod":1,"modName":"$","kind":"function","data":{"head":"get image data from a provided image","usage":"(img)"}},"isDrawableImage":{"path":"/lib/img/isDrawableImage","id":577,"name":"isDrawableImage","type":"function","parent":567,"mod":1,"modName":"$","kind":"function","data":{"head":"determine if object is a drawable image","at":[{"id":"param","type":"object","name":"target"}],"usage":"(target: object)"}},"name":{"path":"/lib/img/name","id":578,"name":"name","type":"string","parent":567,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"math":{"path":"/lib/math","id":579,"name":"math","type":"object","parent":550,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":"Utility math functions"},"dir":{"name":{"path":"/lib/math/name","id":580,"name":"name","type":"string","parent":579,"mod":1,"modName":"$","class":"string","title":"unknown"},"PI":{"path":"/lib/math/PI","id":581,"name":"PI","type":"number","parent":579,"mod":1,"modName":"$","class":"number","title":"unknown"},"PI2":{"path":"/lib/math/PI2","id":582,"name":"PI2","type":"number","parent":579,"mod":1,"modName":"$","class":"number","title":"unknown"},"length":{"path":"/lib/math/length","id":583,"name":"length","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"calculates the length of a vector","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"number","name":"-","line":"length of a vector"}],"usage":"(x: number, y: number): number"}},"normalize":{"path":"/lib/math/normalize","id":584,"name":"normalize","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"get a normalized vector as an array of [x, y]","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"array[x","name":"y]}","line":"unit vector"}],"usage":"(x: number, y: number): array[x"}},"distance":{"path":"/lib/math/distance","id":585,"name":"distance","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"returns distance between 2 points","at":[{"id":"param","type":"number","name":"x1"},{"id":"param","type":"number","name":"y1"},{"id":"param","type":"number","name":"x2"},{"id":"param","type":"number","name":"y2"},{"id":"returns","type":"number","name":""}],"usage":"(x1: number, y1: number, x2: number, y2: number): number"}},"distanceSq":{"path":"/lib/math/distanceSq","id":586,"name":"distanceSq","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"returns square of distance between 2 points","at":[{"id":"param","type":"number","name":"x1"},{"id":"param","type":"number","name":"y1"},{"id":"param","type":"number","name":"x2"},{"id":"param","type":"number","name":"y2"},{"id":"returns","type":"number","name":""}],"usage":"(x1: number, y1: number, x2: number, y2: number): number"}},"distanceToSegmentSq":{"path":"/lib/math/distanceToSegmentSq","id":587,"name":"distanceToSegmentSq","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"square of the distance from a point to a segment","at":[{"id":"param","type":"number","name":"px","line":"point x"},{"id":"param","type":"number","name":"py","line":"point y"},{"id":"param","type":"number","name":"x1","line":"first segment point x"},{"id":"param","type":"number","name":"y1","line":"first segment point y"},{"id":"param","type":"number","name":"x2","line":"second segment point x"},{"id":"param","type":"number","name":"y2","line":"second segment point y"},{"id":"returns","type":"number","name":"-","line":"square of the distance"}],"usage":"(px: number, py: number, x1: number, y1: number, x2: number, y2: number): number"}},"distanceToSegment":{"path":"/lib/math/distanceToSegment","id":588,"name":"distanceToSegment","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"distance from a point to a segment","at":[{"id":"param","type":"number","name":"px","line":"point x"},{"id":"param","type":"number","name":"py","line":"point y"},{"id":"param","type":"number","name":"x1","line":"first segment point x"},{"id":"param","type":"number","name":"y1","line":"first segment point y"},{"id":"param","type":"number","name":"x2","line":"second segment point x"},{"id":"param","type":"number","name":"y2","line":"second segment point y"},{"id":"returns","type":"number","name":"-","line":"distance"}],"usage":"(px: number, py: number, x1: number, y1: number, x2: number, y2: number): number"}},"normalVector":{"path":"/lib/math/normalVector","id":589,"name":"normalVector","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"normal vector to a line","at":[{"id":"param","type":"number","name":"x1","line":"first point x"},{"id":"param","type":"number","name":"y1","line":"first point y"},{"id":"param","type":"number","name":"x2","line":"second point x"},{"id":"param","type":"number","name":"y2","line":"second point y"},{"id":"returns","type":"array/2d-vector","name":"-","line":"normal vector"}],"usage":"(x1: number, y1: number, x2: number, y2: number): array/2d-vector"}},"bearing":{"path":"/lib/math/bearing","id":590,"name":"bearing","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"angle of direction vector from *[x1, y1]* to *[x2, y2]* in relation to OX axis","at":[{"id":"param","type":"number","name":"x1","line":"first vector x coordinate"},{"id":"param","type":"number","name":"y1","line":"first vector y coordinate"},{"id":"param","type":"number","name":"x2","line":"second vector x coordinate"},{"id":"param","type":"number","name":"y2","line":"second vector y coordinate"},{"id":"returns","type":"number/radians","name":"-","line":"an angle of direction vector from [x1:y1] to [x2:y2]"}],"usage":"(x1: number, y1: number, x2: number, y2: number): number/radians"}},"normalizeAngle":{"path":"/lib/math/normalizeAngle","id":591,"name":"normalizeAngle","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"normalize an angle to [0..2**PI] range","at":[{"id":"param","type":"number/radians","name":"a","line":"original angle in radians"},{"id":"returns","type":"number/radians","name":"-","line":"normalized angle in radians"}],"usage":"(a: number/radians): number/radians"}},"reverseAngle":{"path":"/lib/math/reverseAngle","id":592,"name":"reverseAngle","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"get an opposite angle normalazed in [0..2**PI] range","at":[{"id":"param","type":"number/radians","name":"a","line":"original angle in radians"},{"id":"returns","type":"number/radians","name":"-","line":"reveresed angle in radians, normalazied in [0..2*PI]"}],"usage":"(a: number/radians): number/radians"}},"limit":{"path":"/lib/math/limit","id":593,"name":"limit","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"limit the value within provided [min..max] range","at":[{"id":"param","type":"number","name":"val","line":"original value"},{"id":"param","type":"number","name":"min"},{"id":"param","type":"number","name":"max"},{"id":"returns","type":"number","name":"-","line":"a value limited to [min..max] range"}],"usage":"(val: number, min: number, max: number): number"}},"linear":{"path":"/lib/math/linear","id":594,"name":"linear","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"linear interpolation of the value between v1 .. v2 and t in [0..1]","at":[{"id":"param","type":"number","name":"start"},{"id":"param","type":"number","name":"stop"},{"id":"param","type":"number","name":"t","line":"current value, assumed to be in the range [0..1]"}],"usage":"(st: numberart: number, stop: number, t)"}},"dotProduct":{"path":"/lib/math/dotProduct","id":595,"name":"dotProduct","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"dot product of two N2 vectors","details":"useful for interception of moving objects\n","at":[{"id":"param","type":"number","name":"x1"},{"id":"param","type":"number","name":"y1"},{"id":"param","type":"number","name":"x2"},{"id":"param","type":"number","name":"y2"}],"usage":"(x1: number, y1: number, x2: number, y2: number)"}},"vecAngle":{"path":"/lib/math/vecAngle","id":596,"name":"vecAngle","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"get vector's angle in rad","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"number/angle","name":"-","line":"angle in radians"}],"usage":"(x: number, y: number): number/angle"}},"vecX":{"path":"/lib/math/vecX","id":597,"name":"vecX","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"get unit vector x from an angle","at":[{"id":"param","type":"number","name":"a","line":"angle in radians"},{"id":"returns","type":"number[0..1]","name":"-","line":"unit vector x component"}],"usage":"(a: number): number[0..1]"}},"vecY":{"path":"/lib/math/vecY","id":598,"name":"vecY","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"get unit vector y from an angle","at":[{"id":"param","type":"number","name":"a","line":"angle in radians"},{"id":"returns","type":"number[0..1]","name":"-","line":"unit vector y component"}],"usage":"(a: number): number[0..1]"}},"degToRad":{"path":"/lib/math/degToRad","id":599,"name":"degToRad","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"convert degree value to radians","at":[{"id":"param","type":"number","name":"a","line":"angle in degree"},{"id":"returns","type":"number","name":"-","line":"angle in radians"}],"usage":"(d): number"}},"radToDeg":{"path":"/lib/math/radToDeg","id":600,"name":"radToDeg","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"convert radians value to degrees","at":[{"id":"param","type":"number","name":"r","line":"angle in radians"},{"id":"returns","type":"number","name":"-","line":"angle in degree"}],"usage":"(r: number): number"}},"createRandomGenerator":{"path":"/lib/math/createRandomGenerator","id":601,"name":"createRandomGenerator","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"create a source of pseudorandom numbers","details":"Uses LCGSourceFactory as a default.\n\nCreate the source, set custom seed with setSeed(seed) and use provided functions\nto get pseudorandom sequence of numbers ( rndf(), rnd(n), rndi(N), rnds(), rnde(), shuffle() ).\n\n","at":[{"id":"param","type":"function/sourceFactory","name":"source","line":"an optional factory function for pseudorandom number source"},{"id":"returns","type":"object/pseudorandomSource","name":"-","line":"a source of pseudorandom numbers"}],"usage":"(factory): object/pseudorandomSource"}},"getSeed":{"path":"/lib/math/getSeed","id":602,"name":"getSeed","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"setSeed":{"path":"/lib/math/setSeed","id":603,"name":"setSeed","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"rndf":{"path":"/lib/math/rndf","id":604,"name":"rndf","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"random float","usage":"()"}},"rnd":{"path":"/lib/math/rnd","id":605,"name":"rnd","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"rndf() is the RNG core provided by the factory","usage":"(v1, v2)"}},"rndi":{"path":"/lib/math/rndi","id":606,"name":"rndi","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"random int in [0..maxValue)","usage":"(v1, v2)"}},"RND":{"path":"/lib/math/RND","id":607,"name":"RND","type":"function","parent":579,"mod":1,"modName":"$","kind":"cons","data":{"usage":"(v1, v2)"}},"rndfi":{"path":"/lib/math/rndfi","id":608,"name":"rndfi","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"random angle in radians","usage":"()"}},"rnds":{"path":"/lib/math/rnds","id":609,"name":"rnds","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"random sign multiplicator [-1/1]","usage":"(n)"}},"rndz":{"path":"/lib/math/rndz","id":610,"name":"rndz","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"random zero/one value multiplicator [0/1]","usage":"(n)"}},"rnde":{"path":"/lib/math/rnde","id":611,"name":"rnde","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"select random element from an object or an array","usage":"(obj)"}},"shuffle":{"path":"/lib/math/shuffle","id":612,"name":"shuffle","type":"function","parent":579,"mod":1,"modName":"$","kind":"function","data":{"head":"shuffle array elements","usage":"(array, iter)"}}}},"objUtil":{"path":"/lib/objUtil","id":613,"name":"objUtil","type":"object","parent":550,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":"library of object math functions"},"dir":{"assertIsPositionalObj":{"path":"/lib/objUtil/assertIsPositionalObj","id":614,"name":"assertIsPositionalObj","type":"function","parent":613,"mod":1,"modName":"$","kind":"function","data":{"usage":"(obj)"}},"distance":{"path":"/lib/objUtil/distance","id":615,"name":"distance","type":"function","parent":613,"mod":1,"modName":"$","kind":"function","data":{"head":"angle","details":"Calculates distance between objects\n","at":[{"id":"param","name":"source"},{"id":"param","name":"target"}],"usage":"(source, target)"}},"vector":{"path":"/lib/objUtil/vector","id":616,"name":"vector","type":"function","parent":613,"mod":1,"modName":"$","kind":"function","data":{"head":"returns vector obj1 -> obj2","at":[{"id":"param","name":"source"},{"id":"param","name":"target"}],"usage":"(source, target)"}},"nVector":{"path":"/lib/objUtil/nVector","id":617,"name":"nVector","type":"function","parent":613,"mod":1,"modName":"$","kind":"function","data":{"head":"returns normalized vector obj1 -> obj2","at":[{"id":"param","name":"source"},{"id":"param","name":"target"}],"usage":"(source, target)"}},"findObj":{"path":"/lib/objUtil/findObj","id":618,"name":"findObj","type":"function","parent":613,"mod":1,"modName":"$","kind":"function","data":{"usage":"(container, predicate)"}},"findObjInRadius":{"path":"/lib/objUtil/findObjInRadius","id":619,"name":"findObjInRadius","type":"function","parent":613,"mod":1,"modName":"$","kind":"function","data":{"head":"returns list of object in given radius","at":[{"id":"param","name":"obj"},{"id":"param","name":"radius"},{"id":"returns","type":"*[]","name":""}],"usage":"(obj, radius): *[]"}},"rayTrace":{"path":"/lib/objUtil/rayTrace","id":620,"name":"rayTrace","type":"function","parent":613,"mod":1,"modName":"$","kind":"function","data":{"head":"@param obj1","at":[{"id":"param","name":"obj2"},{"id":"param","name":"predicate","line":"function to check"},{"id":"param","name":"stopOnFirst"}],"usage":"(obj1, obj2, predicate, stopOnFirst)"}},"rayTraceRadial":{"path":"/lib/objUtil/rayTraceRadial","id":621,"name":"rayTraceRadial","type":"function","parent":613,"mod":1,"modName":"$","kind":"function","data":{"usage":"(obj1, obj2, radius, stopOnFirst)"}},"name":{"path":"/lib/objUtil/name","id":622,"name":"name","type":"string","parent":613,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"sfx":{"name":"sfx","link":97},"v2":{"path":"/lib/v2","id":623,"name":"v2","type":"object","parent":550,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"copy":{"path":"/lib/v2/copy","id":624,"name":"copy","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"create":{"path":"/lib/v2/create","id":625,"name":"create","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"unit":{"path":"/lib/v2/unit","id":626,"name":"unit","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"zero":{"path":"/lib/v2/zero","id":627,"name":"zero","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"normal":{"path":"/lib/v2/normal","id":628,"name":"normal","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"inverse":{"path":"/lib/v2/inverse","id":629,"name":"inverse","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"at":{"path":"/lib/v2/at","id":630,"name":"at","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"add":{"path":"/lib/v2/add","id":631,"name":"add","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"sub":{"path":"/lib/v2/sub","id":632,"name":"sub","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"dot":{"path":"/lib/v2/dot","id":633,"name":"dot","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"mul":{"path":"/lib/v2/mul","id":634,"name":"mul","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"length":{"path":"/lib/v2/length","id":635,"name":"length","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"length2":{"path":"/lib/v2/length2","id":636,"name":"length2","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"init":{"path":"/lib/v2/init","id":637,"name":"init","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"scale":{"path":"/lib/v2/scale","id":638,"name":"scale","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"dump":{"path":"/lib/v2/dump","id":639,"name":"dump","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"},"name":{"path":"/lib/v2/name","id":640,"name":"name","type":"string","parent":623,"mod":1,"modName":"$","class":"string","title":"unknown"},"angle":{"path":"/lib/v2/angle","id":641,"name":"angle","type":"function","parent":623,"mod":1,"modName":"$","kind":"function"}}},"v2a":{"path":"/lib/v2a","id":642,"name":"v2a","type":"object","parent":550,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"scale":{"path":"/lib/v2a/scale","id":643,"name":"scale","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"head":"scalar multiplication of 2d vector array","at":[{"id":"param","type":"Array/vector2d","name":"v","line":"source 2d vector"},{"id":"returns","type":"Array/vector2d","name":"-","line":"scaled 2d vector array"}],"usage":"(v: Array/vector2d1, val): Array/vector2d"}},"bearing":{"path":"/lib/v2a/bearing","id":644,"name":"bearing","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(s, t)"}},"create":{"path":"/lib/v2a/create","id":645,"name":"create","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"head":"construct a 2d vector from x and y values","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"Array/vector2d","name":"-","line":"created 2d vector array"}],"usage":"(x: number, y: number): Array/vector2d"}},"clone":{"path":"/lib/v2a/clone","id":646,"name":"clone","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"head":"clone a 2d vector into another array","at":[{"id":"param","type":"Array/vector2d","name":"v","line":"source 2d vector"},{"id":"returns","type":"Array/vector2d","name":"-","line":"cloned 2d vector array"}],"usage":"(v: Array/vector2d): Array/vector2d"}},"unit":{"path":"/lib/v2a/unit","id":647,"name":"unit","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"head":"construct a unit 2d vector array from an angle","at":[{"id":"param","type":"number/angle","name":"fi"},{"id":"returns","type":"Array/vector2d","name":"-","line":"created 2d vector array"}],"usage":"(fi: number/angle): Array/vector2d"}},"normal":{"path":"/lib/v2a/normal","id":648,"name":"normal","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"head":"normalize provided vector to unit size","at":[{"id":"param","type":"Array/vector2d","name":"-","line":"vector to normalize"},{"id":"returns","type":"Array/vector2d","name":"-","line":"normalized original vector"}],"usage":"(v): Array/vector2d"}},"inverse":{"path":"/lib/v2a/inverse","id":649,"name":"inverse","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"head":"inverse provided vector","at":[{"id":"param","type":"Array/vector2d","name":"-","line":"vector to inverse"},{"id":"returns","type":"Array/vector2d","name":"-","line":"inversed original vector"}],"usage":"(v): Array/vector2d"}},"add":{"path":"/lib/v2a/add","id":650,"name":"add","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v1, v2)"}},"addxy":{"path":"/lib/v2a/addxy","id":651,"name":"addxy","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"head":"add vectors with second vector represented as source coordinates","usage":"(v, x, y)"}},"sub":{"path":"/lib/v2a/sub","id":652,"name":"sub","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v1, v2)"}},"subxy":{"path":"/lib/v2a/subxy","id":653,"name":"subxy","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v1, x, y)"}},"dot":{"path":"/lib/v2a/dot","id":654,"name":"dot","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v1, v2)"}},"mul":{"path":"/lib/v2a/mul","id":655,"name":"mul","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v1, v2)"}},"mulxy":{"path":"/lib/v2a/mulxy","id":656,"name":"mulxy","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v1, x, y)"}},"length":{"path":"/lib/v2a/length","id":657,"name":"length","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"length2":{"path":"/lib/v2a/length2","id":658,"name":"length2","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"angle":{"path":"/lib/v2a/angle","id":659,"name":"angle","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"dump":{"path":"/lib/v2a/dump","id":660,"name":"dump","type":"function","parent":642,"mod":1,"modName":"$","kind":"function","data":{"usage":"(v)"}},"name":{"path":"/lib/v2a/name","id":661,"name":"name","type":"string","parent":642,"mod":1,"modName":"$","class":"string","title":"unknown"}}}}},"env":{"path":"/env","id":662,"name":"env","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" environment values\n","details":"Here go all values not directly related to the current\nlive game objects, but still defining the overall\nsystem state.\n\nTimers, score counters, fine tuning of game parameters\nand various configs are stored here.\n\n\n"},"dir":{"hud":{"path":"/env/hud","id":663,"name":"hud","type":"object","parent":662,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"hint":" ignore\n"},"dir":{"font":{"path":"/env/hud/font","id":664,"name":"font","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"base":{"path":"/env/hud/base","id":665,"name":"base","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"base.hi":{"path":"/env/hud/base.hi","id":666,"name":"base.hi","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"base.low":{"path":"/env/hud/base.low","id":667,"name":"base.low","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content":{"path":"/env/hud/content","id":668,"name":"content","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.low":{"path":"/env/hud/content.low","id":669,"name":"content.low","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.hi":{"path":"/env/hud/content.hi","id":670,"name":"content.hi","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.yellow":{"path":"/env/hud/content.yellow","id":671,"name":"content.yellow","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.orange":{"path":"/env/hud/content.orange","id":672,"name":"content.orange","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.red":{"path":"/env/hud/content.red","id":673,"name":"content.red","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.magenta":{"path":"/env/hud/content.magenta","id":674,"name":"content.magenta","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.violet":{"path":"/env/hud/content.violet","id":675,"name":"content.violet","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.blue":{"path":"/env/hud/content.blue","id":676,"name":"content.blue","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.cyan":{"path":"/env/hud/content.cyan","id":677,"name":"content.cyan","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"content.green":{"path":"/env/hud/content.green","id":678,"name":"content.green","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"},"line":{"path":"/env/hud/line","id":679,"name":"line","type":"number","parent":663,"mod":1,"modName":"$","class":"number","title":"unknown"},"baseHeight":{"path":"/env/hud/baseHeight","id":680,"name":"baseHeight","type":"number","parent":663,"mod":1,"modName":"$","class":"number","title":"unknown"},"background":{"path":"/env/hud/background","id":681,"name":"background","type":"object","parent":663,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"base":{"path":"/env/hud/background/base","id":682,"name":"base","type":"string","parent":681,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"title":{"path":"/env/hud/title","id":683,"name":"title","type":"object","parent":663,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"content":{"path":"/env/hud/title/content","id":684,"name":"content","type":"string","parent":683,"mod":1,"modName":"$","class":"string","title":"unknown"},"font":{"path":"/env/hud/title/font","id":685,"name":"font","type":"string","parent":683,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"window":{"path":"/env/hud/window","id":686,"name":"window","type":"object","parent":663,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"content":{"path":"/env/hud/window/content","id":687,"name":"content","type":"string","parent":686,"mod":1,"modName":"$","class":"string","title":"unknown"},"tag":{"path":"/env/hud/window/tag","id":688,"name":"tag","type":"object","parent":686,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"base.hi":{"path":"/env/hud/window/tag/base.hi","id":689,"name":"base.hi","type":"string","parent":688,"mod":1,"modName":"$","class":"string","title":"unknown"},"base":{"path":"/env/hud/window/tag/base","id":690,"name":"base","type":"string","parent":688,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"bar":{"path":"/env/hud/window/bar","id":691,"name":"bar","type":"object","parent":686,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"base":{"path":"/env/hud/window/bar/base","id":692,"name":"base","type":"string","parent":691,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"control":{"path":"/env/hud/window/control","id":693,"name":"control","type":"object","parent":686,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"base":{"path":"/env/hud/window/control/base","id":694,"name":"base","type":"string","parent":693,"mod":1,"modName":"$","class":"string","title":"unknown"},"content":{"path":"/env/hud/window/control/content","id":695,"name":"content","type":"string","parent":693,"mod":1,"modName":"$","class":"string","title":"unknown"}}}}},"name":{"path":"/env/hud/name","id":696,"name":"name","type":"string","parent":663,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"bind":{"path":"/env/bind","id":697,"name":"bind","type":"object","parent":662,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"indexKeys":{"path":"/env/bind/indexKeys","id":698,"name":"indexKeys","type":"function","parent":697,"mod":1,"modName":"$","kind":"function"},"init":{"path":"/env/bind/init","id":699,"name":"init","type":"function","parent":697,"mod":1,"modName":"$","kind":"function"},"keyboard":{"path":"/env/bind/keyboard","id":700,"name":"keyboard","type":"object","parent":697,"mod":1,"modName":"$","kind":"array","proto":"Array"},"keyMap":{"path":"/env/bind/keyMap","id":701,"name":"keyMap","type":"object","parent":697,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"KeyW":{"path":"/env/bind/keyMap/KeyW","id":702,"name":"KeyW","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"player":{"path":"/env/bind/keyMap/KeyW/player","id":703,"name":"player","type":"number","parent":702,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"KeyA":{"path":"/env/bind/keyMap/KeyA","id":704,"name":"KeyA","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/KeyA/id","id":705,"name":"id","type":"number","parent":704,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/KeyA/player","id":706,"name":"player","type":"number","parent":704,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"KeyS":{"path":"/env/bind/keyMap/KeyS","id":707,"name":"KeyS","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/KeyS/id","id":708,"name":"id","type":"number","parent":707,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/KeyS/player","id":709,"name":"player","type":"number","parent":707,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"KeyD":{"path":"/env/bind/keyMap/KeyD","id":710,"name":"KeyD","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/KeyD/id","id":711,"name":"id","type":"number","parent":710,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/KeyD/player","id":712,"name":"player","type":"number","parent":710,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"KeyE":{"path":"/env/bind/keyMap/KeyE","id":713,"name":"KeyE","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/KeyE/id","id":714,"name":"id","type":"number","parent":713,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/KeyE/player","id":715,"name":"player","type":"number","parent":713,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"KeyQ":{"path":"/env/bind/keyMap/KeyQ","id":716,"name":"KeyQ","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/KeyQ/id","id":717,"name":"id","type":"number","parent":716,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/KeyQ/player","id":718,"name":"player","type":"number","parent":716,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"Space":{"path":"/env/bind/keyMap/Space","id":719,"name":"Space","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/Space/id","id":720,"name":"id","type":"number","parent":719,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/Space/player","id":721,"name":"player","type":"number","parent":719,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"RightShift":{"path":"/env/bind/keyMap/RightShift","id":722,"name":"RightShift","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/RightShift/id","id":723,"name":"id","type":"number","parent":722,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/RightShift/player","id":724,"name":"player","type":"number","parent":722,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"ArrowUp":{"path":"/env/bind/keyMap/ArrowUp","id":725,"name":"ArrowUp","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"player":{"path":"/env/bind/keyMap/ArrowUp/player","id":726,"name":"player","type":"number","parent":725,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"ArrowLeft":{"path":"/env/bind/keyMap/ArrowLeft","id":727,"name":"ArrowLeft","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/ArrowLeft/id","id":728,"name":"id","type":"number","parent":727,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/ArrowLeft/player","id":729,"name":"player","type":"number","parent":727,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"ArrowDown":{"path":"/env/bind/keyMap/ArrowDown","id":730,"name":"ArrowDown","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/ArrowDown/id","id":731,"name":"id","type":"number","parent":730,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/ArrowDown/player","id":732,"name":"player","type":"number","parent":730,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"ArrowRight":{"path":"/env/bind/keyMap/ArrowRight","id":733,"name":"ArrowRight","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/ArrowRight/id","id":734,"name":"id","type":"number","parent":733,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/ArrowRight/player","id":735,"name":"player","type":"number","parent":733,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"ShiftRight":{"path":"/env/bind/keyMap/ShiftRight","id":736,"name":"ShiftRight","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/ShiftRight/id","id":737,"name":"id","type":"number","parent":736,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/ShiftRight/player","id":738,"name":"player","type":"number","parent":736,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"Enter":{"path":"/env/bind/keyMap/Enter","id":739,"name":"Enter","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/Enter/id","id":740,"name":"id","type":"number","parent":739,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/Enter/player","id":741,"name":"player","type":"number","parent":739,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"Numpad8":{"path":"/env/bind/keyMap/Numpad8","id":742,"name":"Numpad8","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"player":{"path":"/env/bind/keyMap/Numpad8/player","id":743,"name":"player","type":"number","parent":742,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"Numpad4":{"path":"/env/bind/keyMap/Numpad4","id":744,"name":"Numpad4","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/Numpad4/id","id":745,"name":"id","type":"number","parent":744,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/Numpad4/player","id":746,"name":"player","type":"number","parent":744,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"Numpad2":{"path":"/env/bind/keyMap/Numpad2","id":747,"name":"Numpad2","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/Numpad2/id","id":748,"name":"id","type":"number","parent":747,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/Numpad2/player","id":749,"name":"player","type":"number","parent":747,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"Numpad6":{"path":"/env/bind/keyMap/Numpad6","id":750,"name":"Numpad6","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/Numpad6/id","id":751,"name":"id","type":"number","parent":750,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/Numpad6/player","id":752,"name":"player","type":"number","parent":750,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"KeyX":{"path":"/env/bind/keyMap/KeyX","id":753,"name":"KeyX","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/KeyX/id","id":754,"name":"id","type":"number","parent":753,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/KeyX/player","id":755,"name":"player","type":"number","parent":753,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"KeyZ":{"path":"/env/bind/keyMap/KeyZ","id":756,"name":"KeyZ","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/KeyZ/id","id":757,"name":"id","type":"number","parent":756,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/KeyZ/player","id":758,"name":"player","type":"number","parent":756,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"KeyO":{"path":"/env/bind/keyMap/KeyO","id":759,"name":"KeyO","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/KeyO/id","id":760,"name":"id","type":"number","parent":759,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/KeyO/player","id":761,"name":"player","type":"number","parent":759,"mod":1,"modName":"$","class":"number","title":"unknown"}}},"KeyP":{"path":"/env/bind/keyMap/KeyP","id":762,"name":"KeyP","type":"object","parent":701,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"id":{"path":"/env/bind/keyMap/KeyP/id","id":763,"name":"id","type":"number","parent":762,"mod":1,"modName":"$","class":"number","title":"unknown"},"player":{"path":"/env/bind/keyMap/KeyP/player","id":764,"name":"player","type":"number","parent":762,"mod":1,"modName":"$","class":"number","title":"unknown"}}}}},"padMap":{"path":"/env/bind/padMap","id":765,"name":"padMap","type":"object","parent":697,"mod":1,"modName":"$","kind":"array","proto":"Array"},"name":{"path":"/env/bind/name","id":766,"name":"name","type":"string","parent":697,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"style":{"path":"/env/style","id":767,"name":"style","type":"object","parent":662,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"font":{"path":"/env/style/font","id":768,"name":"font","type":"string","parent":767,"mod":1,"modName":"$","class":"string","title":"unknown"},"titleFont":{"path":"/env/style/titleFont","id":769,"name":"titleFont","type":"string","parent":767,"mod":1,"modName":"$","class":"string","title":"unknown"},"holdBeforeStart":{"path":"/env/style/holdBeforeStart","id":770,"name":"holdBeforeStart","type":"number","parent":767,"mod":1,"modName":"$","class":"number","title":"unknown"},"titleTimeout":{"path":"/env/style/titleTimeout","id":771,"name":"titleTimeout","type":"number","parent":767,"mod":1,"modName":"$","class":"number","title":"unknown"},"scoreTimeout":{"path":"/env/style/scoreTimeout","id":772,"name":"scoreTimeout","type":"number","parent":767,"mod":1,"modName":"$","class":"number","title":"unknown"},"fadeIn":{"path":"/env/style/fadeIn","id":773,"name":"fadeIn","type":"number","parent":767,"mod":1,"modName":"$","class":"number","title":"unknown"},"keep":{"path":"/env/style/keep","id":774,"name":"keep","type":"number","parent":767,"mod":1,"modName":"$","class":"number","title":"unknown"},"fadeOut":{"path":"/env/style/fadeOut","id":775,"name":"fadeOut","type":"number","parent":767,"mod":1,"modName":"$","class":"number","title":"unknown"},"cellSize":{"path":"/env/style/cellSize","id":776,"name":"cellSize","type":"number","parent":767,"mod":1,"modName":"$","class":"number","title":"unknown"},"repairBlinkPeriod":{"path":"/env/style/repairBlinkPeriod","id":777,"name":"repairBlinkPeriod","type":"number","parent":767,"mod":1,"modName":"$","class":"number","title":"unknown"},"destroyExplosions":{"path":"/env/style/destroyExplosions","id":778,"name":"destroyExplosions","type":"number","parent":767,"mod":1,"modName":"$","class":"number","title":"unknown"},"border":{"path":"/env/style/border","id":779,"name":"border","type":"string","parent":767,"mod":1,"modName":"$","class":"string","title":"unknown"},"color":{"path":"/env/style/color","id":780,"name":"color","type":"object","parent":767,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/color/c0","id":781,"name":"c0","type":"string","parent":780,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/color/c1","id":782,"name":"c1","type":"string","parent":780,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/color/c2","id":783,"name":"c2","type":"string","parent":780,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/color/c3","id":784,"name":"c3","type":"string","parent":780,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"palette":{"path":"/env/style/palette","id":785,"name":"palette","type":"object","parent":767,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"sand":{"path":"/env/style/palette/sand","id":786,"name":"sand","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/sand/c0","id":787,"name":"c0","type":"string","parent":786,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/sand/c1","id":788,"name":"c1","type":"string","parent":786,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/sand/c2","id":789,"name":"c2","type":"string","parent":786,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/sand/c3","id":790,"name":"c3","type":"string","parent":786,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"blue":{"path":"/env/style/palette/blue","id":791,"name":"blue","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/blue/c0","id":792,"name":"c0","type":"string","parent":791,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/blue/c1","id":793,"name":"c1","type":"string","parent":791,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/blue/c2","id":794,"name":"c2","type":"string","parent":791,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/blue/c3","id":795,"name":"c3","type":"string","parent":791,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"cga0":{"path":"/env/style/palette/cga0","id":796,"name":"cga0","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/cga0/c0","id":797,"name":"c0","type":"string","parent":796,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/cga0/c1","id":798,"name":"c1","type":"string","parent":796,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/cga0/c2","id":799,"name":"c2","type":"string","parent":796,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/cga0/c3","id":800,"name":"c3","type":"string","parent":796,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"cga1":{"path":"/env/style/palette/cga1","id":801,"name":"cga1","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/cga1/c0","id":802,"name":"c0","type":"string","parent":801,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/cga1/c1","id":803,"name":"c1","type":"string","parent":801,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/cga1/c2","id":804,"name":"c2","type":"string","parent":801,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/cga1/c3","id":805,"name":"c3","type":"string","parent":801,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"sweet":{"path":"/env/style/palette/sweet","id":806,"name":"sweet","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/sweet/c0","id":807,"name":"c0","type":"string","parent":806,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/sweet/c1","id":808,"name":"c1","type":"string","parent":806,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/sweet/c2","id":809,"name":"c2","type":"string","parent":806,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/sweet/c3","id":810,"name":"c3","type":"string","parent":806,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"jet":{"path":"/env/style/palette/jet","id":811,"name":"jet","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/jet/c0","id":812,"name":"c0","type":"string","parent":811,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/jet/c1","id":813,"name":"c1","type":"string","parent":811,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/jet/c2","id":814,"name":"c2","type":"string","parent":811,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/jet/c3","id":815,"name":"c3","type":"string","parent":811,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"boy":{"path":"/env/style/palette/boy","id":816,"name":"boy","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/boy/c0","id":817,"name":"c0","type":"string","parent":816,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/boy/c1","id":818,"name":"c1","type":"string","parent":816,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/boy/c2","id":819,"name":"c2","type":"string","parent":816,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/boy/c3","id":820,"name":"c3","type":"string","parent":816,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"purple":{"path":"/env/style/palette/purple","id":821,"name":"purple","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/purple/c0","id":822,"name":"c0","type":"string","parent":821,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/purple/c1","id":823,"name":"c1","type":"string","parent":821,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/purple/c2","id":824,"name":"c2","type":"string","parent":821,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/purple/c3","id":825,"name":"c3","type":"string","parent":821,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"vapor":{"path":"/env/style/palette/vapor","id":826,"name":"vapor","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/vapor/c0","id":827,"name":"c0","type":"string","parent":826,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/vapor/c1","id":828,"name":"c1","type":"string","parent":826,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/vapor/c2","id":829,"name":"c2","type":"string","parent":826,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/vapor/c3","id":830,"name":"c3","type":"string","parent":826,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"aqu4":{"path":"/env/style/palette/aqu4","id":831,"name":"aqu4","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/aqu4/c0","id":832,"name":"c0","type":"string","parent":831,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/aqu4/c1","id":833,"name":"c1","type":"string","parent":831,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/aqu4/c2","id":834,"name":"c2","type":"string","parent":831,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/aqu4/c3","id":835,"name":"c3","type":"string","parent":831,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"amber":{"path":"/env/style/palette/amber","id":836,"name":"amber","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/amber/c0","id":837,"name":"c0","type":"string","parent":836,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/amber/c1","id":838,"name":"c1","type":"string","parent":836,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/amber/c2","id":839,"name":"c2","type":"string","parent":836,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/amber/c3","id":840,"name":"c3","type":"string","parent":836,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"astro":{"path":"/env/style/palette/astro","id":841,"name":"astro","type":"object","parent":785,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"c0":{"path":"/env/style/palette/astro/c0","id":842,"name":"c0","type":"string","parent":841,"mod":1,"modName":"$","class":"string","title":"unknown"},"c1":{"path":"/env/style/palette/astro/c1","id":843,"name":"c1","type":"string","parent":841,"mod":1,"modName":"$","class":"string","title":"unknown"},"c2":{"path":"/env/style/palette/astro/c2","id":844,"name":"c2","type":"string","parent":841,"mod":1,"modName":"$","class":"string","title":"unknown"},"c3":{"path":"/env/style/palette/astro/c3","id":845,"name":"c3","type":"string","parent":841,"mod":1,"modName":"$","class":"string","title":"unknown"}}}}},"name":{"path":"/env/style/name","id":846,"name":"name","type":"string","parent":767,"mod":1,"modName":"$","class":"string","title":"unknown"}}}}},"lab":{"path":"/lab","id":847,"name":"lab","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" live entities\n"},"dir":{"control":{"path":"/lab/control","id":848,"name":"control","type":"object","parent":847,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","dir":{"pad":{"path":"/lab/control/pad","id":849,"name":"pad","type":"object","parent":848,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":"pad controllers monitor"},"dir":{"activate":{"path":"/lab/control/pad/activate","id":850,"name":"activate","type":"function","parent":849,"mod":1,"modName":"$","kind":"function","data":{"usage":"(id, control)"}},"isActive":{"path":"/lab/control/pad/isActive","id":851,"name":"isActive","type":"function","parent":849,"mod":1,"modName":"$","kind":"function","data":{"usage":"(id)"}},"evo":{"path":"/lab/control/pad/evo","id":852,"name":"evo","type":"function","parent":849,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"USAGE_TIMEOUT":{"path":"/lab/control/pad/USAGE_TIMEOUT","id":853,"name":"USAGE_TIMEOUT","type":"number","parent":849,"mod":1,"modName":"$","class":"number","title":"unknown"},"bind":{"path":"/lab/control/pad/bind","id":854,"name":"bind","type":"object","parent":849,"mod":1,"modName":"$","kind":"array","proto":"Array","data":{"head":"analog sticks sensitivity"}},"lastUsage":{"path":"/lab/control/pad/lastUsage","id":855,"name":"lastUsage","type":"object","parent":849,"mod":1,"modName":"$","kind":"array","proto":"Array"},"name":{"path":"/lab/control/pad/name","id":856,"name":"name","type":"string","parent":849,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"player":{"path":"/lab/control/player","id":857,"name":"player","type":"object","parent":848,"mod":1,"modName":"$","kind":"Object","proto":"Object","dir":{"bindAll":{"path":"/lab/control/player/bindAll","id":858,"name":"bindAll","type":"function","parent":857,"mod":1,"modName":"$","kind":"function","data":{"usage":"(target)"}},"unbindAll":{"path":"/lab/control/player/unbindAll","id":859,"name":"unbindAll","type":"function","parent":857,"mod":1,"modName":"$","kind":"function","data":{"usage":"(target)"}},"release":{"path":"/lab/control/player/release","id":860,"name":"release","type":"function","parent":857,"mod":1,"modName":"$","kind":"function","data":{"usage":"(playerId)"}},"releaseAll":{"path":"/lab/control/player/releaseAll","id":861,"name":"releaseAll","type":"function","parent":857,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"target":{"path":"/lab/control/player/target","id":862,"name":"target","type":"function","parent":857,"mod":1,"modName":"$","kind":"function","data":{"head":"map X to A","details":"map Y to B\n"}},"act":{"path":"/lab/control/player/act","id":863,"name":"act","type":"function","parent":857,"mod":1,"modName":"$","kind":"function","data":{"usage":"(action, playerId)"}},"stop":{"path":"/lab/control/player/stop","id":864,"name":"stop","type":"function","parent":857,"mod":1,"modName":"$","kind":"function","data":{"usage":"(action, playerId)"}},"stopAll":{"path":"/lab/control/player/stopAll","id":865,"name":"stopAll","type":"function","parent":857,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"evo":{"path":"/lab/control/player/evo","id":866,"name":"evo","type":"function","parent":857,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"MAX_PLAYERS":{"path":"/lab/control/player/MAX_PLAYERS","id":867,"name":"MAX_PLAYERS","type":"number","parent":857,"mod":1,"modName":"$","class":"number","title":"unknown"},"MAX_ACTIONS":{"path":"/lab/control/player/MAX_ACTIONS","id":868,"name":"MAX_ACTIONS","type":"number","parent":857,"mod":1,"modName":"$","class":"number","title":"unknown"},"ON":{"path":"/lab/control/player/ON","id":869,"name":"ON","type":"number","parent":857,"mod":1,"modName":"$","class":"number","title":"unknown"},"ctrl":{"path":"/lab/control/player/ctrl","id":870,"name":"ctrl","type":"object","parent":857,"mod":1,"modName":"$","kind":"array","proto":"Array"},"targetMap":{"path":"/lab/control/player/targetMap","id":871,"name":"targetMap","type":"object","parent":857,"mod":1,"modName":"$","kind":"array","proto":"Array"},"name":{"path":"/lab/control/player/name","id":872,"name":"name","type":"string","parent":857,"mod":1,"modName":"$","class":"string","title":"unknown"}}}}}}},"cue":{"path":"/cue","id":873,"name":"cue","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" conditional triggers\n"},"dir":{}},"job":{"path":"/job","id":874,"name":"job","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" service jobs\n","details":"A place for miscellaneous supporting services\nlike server sync, metadata reporter etc...\n"},"dir":{}},"mod":{"path":"/mod","id":875,"name":"mod","type":"function","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Function","data":{"head":" child modes\n"},"dir":{"console":{"path":"/mod/console","id":876,"name":"console","type":"object","parent":875,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" drop-down debug console","details":"Convenient drop-down console.\nPress F4 to show/hide.\n\nNew commands can be introduced by adding\nfunctions to /cmd frame.\n\nEach command is a function that accepts\nan array of arguments, original line\nand a link to the console node:\n\n    cmd([args], [line], [console])\n\nConsole object can be used to print out\ncommand results, but a standard log.out()\nwill do just fine.\n\n"},"dir":{}},"explorer":{"path":"/mod/explorer","id":877,"name":"explorer","type":"object","parent":875,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" debug scene browser","details":"Implements UI components for node structure exploration.\n"},"dir":{}},"help":{"path":"/mod/help","id":878,"name":"help","type":"object","parent":875,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" man pages and metadata collectors","details":"When included, inspect the scene and patches metadata.\nMan pages are .mfx and .page files located in /man\nnode of any mod.\n","notes":"Metadata patching works in global context,\nso .mfx patches included in help.mod\ncover many global objects (like $, /sys, /lib etc...).\n"},"dir":{}},"inspector":{"path":"/mod/inspector","id":879,"name":"inspector","type":"object","parent":875,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" column-organized node inspector\n"},"dir":{}},"playground":{"path":"/mod/playground","id":880,"name":"playground","type":"object","parent":875,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" life editor\n"},"dir":{}},"status":{"path":"/mod/status","id":881,"name":"status","type":"object","parent":875,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" debug status info","details":"Convenient on-screen status info.\nPress F2 to show/hide.\n\nShows time, FPS and any values\nfrom $.env.statusInfo object\n","notes":"For example, you need to observe\na hero coordinates.\nIn /lab/hero.evo(dt) after coordinates\nupdate, just set:\n\n    env.statusInfo = {","heroPos":" `${this.x}:${this.y}`\n    }\n\nThen press F2 after page update\nand you will get coordinates\non the screen.\n"},"dir":{}}}},"trap":{"path":"/trap","id":882,"name":"trap","type":"function","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Function","data":{"head":" event traps ","details":"This frame contains named function nodes\neach representing a trap for event.\nThe trap() itself is a function\nand can be invoked like trap([name], [event-data]).\nThat would locate a trap [name] and apply it\nwith [event-data] as an argument.\n\n"},"dir":{"keyDown":{"path":"/trap/keyDown","id":883,"name":"keyDown","type":"function","parent":882,"mod":1,"modName":"$","kind":"function"},"keyUp":{"path":"/trap/keyUp","id":884,"name":"keyUp","type":"function","parent":882,"mod":1,"modName":"$","kind":"function"}}},"sys":{"path":"/sys","id":885,"name":"sys","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" system functions","at":[{"id":"alias","name":"sys"}],"details":"All system functions are going here.\nThe main difference between this and <a href=\"#./lib\">lib</a>\nis that sys is common among all mods.\n\n"},"dir":{"assert":{"name":"assert","link":48},"mix":{"name":"mix","link":33},"augment":{"name":"augment","link":34},"supplement":{"name":"supplement","link":35},"before":{"name":"before","link":36},"after":{"name":"after","link":37},"chain":{"name":"chain","link":38},"Mod":{"path":"/sys/Mod","id":886,"name":"Mod","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"tags":" core","head":" defines a game or subsystem structure","details":"Each mod can be considered to be a mini-game\nthat defines layout to place components.\n"},"dir":{"getMod":{"path":"/sys/Mod/getMod","id":887,"name":"getMod","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" returns this object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"this"}],"usage":"(): object/Mod"}},"getRoot":{"path":"/sys/Mod/getRoot","id":888,"name":"getRoot","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" get the root mod","at":[{"id":"returns","type":"object/Mod","name":""}],"usage":"(): object/Mod"}},"touch":{"path":"/sys/Mod/touch","id":889,"name":"touch","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified container exists in the path, creates a new one if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n"}},"populateAlt":{"path":"/sys/Mod/populateAlt","id":890,"name":"populateAlt","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" a service call to populate mod/alt node called on the mod construction \n"}},"init":{"path":"/sys/Mod/init","id":891,"name":"init","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" a service function to initialize the mod on attachment\n"}},"_runTests":{"path":"/sys/Mod/_runTests","id":892,"name":"_runTests","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" a service call to run included tests\n"}},"start":{"path":"/sys/Mod/start","id":893,"name":"start","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" a service call to setup the mod and start it's evolution","notes":" Called automatically when Collider.JAM starts the game.\n"}},"inherit":{"path":"/sys/Mod/inherit","id":894,"name":"inherit","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" a service call to inherit parent mod nodes on startup","notes":" Called automatically when Collider.JAM creates the mod.\n"}},"onAttached":{"path":"/sys/Mod/onAttached","id":895,"name":"onAttached","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" handle an attached subnode.\n"}},"evo":{"path":"/sys/Mod/evo","id":896,"name":"evo","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve mod state","details":" calls lab.evo()\n"}},"draw":{"path":"/sys/Mod/draw","id":897,"name":"draw","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" draw the mod","details":" calls lab.draw()\n"}},"patch":{"path":"/sys/Mod/patch","id":898,"name":"patch","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" patch the node at particular path","at":[{"id":"param","type":"object","name":"target","line":"the base node for attachment"},{"id":"param","type":"string","name":"path","line":"a path relative to the target node"},{"id":"param","type":"object","name":"node","line":"the node to attach"}],"usage":"(target: object, path: string, node: object)"}},"pause":{"path":"/sys/Mod/pause","id":899,"name":"pause","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this mode evolution\n"}},"pauseLab":{"path":"/sys/Mod/pauseLab","id":900,"name":"pauseLab","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" pauses this mod /lab and /cue frames\n"}},"pauseAll":{"path":"/sys/Mod/pauseAll","id":901,"name":"pauseAll","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" pauses this mode and all included mods\n"}},"resume":{"path":"/sys/Mod/resume","id":902,"name":"resume","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this mode evolution\n"}},"resumeLab":{"path":"/sys/Mod/resumeLab","id":903,"name":"resumeLab","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this mod /lab and /cue frames\n"}},"resumeAll":{"path":"/sys/Mod/resumeAll","id":904,"name":"resumeAll","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this mod and all included\n"}},"hide":{"path":"/sys/Mod/hide","id":905,"name":"hide","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" hide this mod\n"}},"hideLab":{"path":"/sys/Mod/hideLab","id":906,"name":"hideLab","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" hide /lab\n"}},"hideAll":{"path":"/sys/Mod/hideAll","id":907,"name":"hideAll","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" hide this mode and all included submodes\n"}},"show":{"path":"/sys/Mod/show","id":908,"name":"show","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" show this mod\n"}},"showLab":{"path":"/sys/Mod/showLab","id":909,"name":"showLab","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" show /lab\n"}},"showAll":{"path":"/sys/Mod/showAll","id":910,"name":"showAll","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" show this mod and all included submodes\n"}},"disable":{"path":"/sys/Mod/disable","id":911,"name":"disable","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" disable incoming events for this mod\n"}},"disableAll":{"path":"/sys/Mod/disableAll","id":912,"name":"disableAll","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" disable incoming events for this mod and all included submodes\n"}},"disableOthers":{"path":"/sys/Mod/disableOthers","id":913,"name":"disableOthers","type":"function","parent":886,"mod":1,"modName":"$","kind":"function"},"enable":{"path":"/sys/Mod/enable","id":914,"name":"enable","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" enable incoming events for this mod\n"}},"enableAll":{"path":"/sys/Mod/enableAll","id":915,"name":"enableAll","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" enable incoming events for this mod and all included submodes\n"}},"enableOthers":{"path":"/sys/Mod/enableOthers","id":916,"name":"enableOthers","type":"function","parent":886,"mod":1,"modName":"$","kind":"function"},"on":{"path":"/sys/Mod/on","id":917,"name":"on","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" show, resume and enable all\n"}},"off":{"path":"/sys/Mod/off","id":918,"name":"off","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" hide, pause and disable all\n"}},"patchNode":{"path":"/sys/Mod/patchNode","id":919,"name":"patchNode","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" a service call to load or reload a particular unit/path","details":" Used by hot-patching engine to reload updated files.\n"}},"batchLoad":{"path":"/sys/Mod/batchLoad","id":920,"name":"batchLoad","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" a service call to schedule a load of a resource","at":[{"id":"param","type":"number","name":"batch","line":"batch number"},{"id":"param","type":"string","name":"url","line":"resource url"},{"id":"param","type":"object/Frame","name":"base","line":"resource base"},{"id":"param","type":"string","name":"path","line":"attach point for the loaded resource"},{"id":"param","type":"function","name":"after","line":"a callback function to call after the resource is loaded"}],"usage":"(batch: number, url: string, base: object/Frame, path: string, after: function)"}},"loadUnits":{"path":"/sys/Mod/loadUnits","id":921,"name":"loadUnits","type":"function","parent":886,"mod":1,"modName":"$","kind":"function","data":{"head":" a service call to load all units","at":[{"id":"param","type":"object","name":"baseMod","line":"a mod to load units in"},{"id":"param","type":"string","name":"target","line":"a loading target path"}],"usage":"(baseMod: object, target: string)","details":" Used by Collider.JAM on boot-up to load all files included in target path\n\n\n\n\n"}}},"idir":{"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/Mod/_dna","id":922,"name":"_dna","type":"string","parent":886,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"attach":{"path":"/sys/Frame/attach","id":237,"name":"attach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" adds a node to a frame","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/Frame/link","id":238,"name":"link","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"Frame":{"path":"/sys/Frame","id":923,"name":"Frame","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"tags":" core","head":" a group node","details":"Frame constructs a basic node container\nto manage node collections.\n\nNamed nodes (the ones with 'name' property defined)\nare stored in a directory *[_dir]* object.\n\nAll nodes can be accessed by index in *[_ls]*.\n\nThe named nodes have direct shortcuts\nin the Frame object, so can be accessed\ndirectly from the frame node as *node.childName*.\nHowever, to list named nodes use ._dir,\nsince the Frame object itself has a bunch\nof service fields like __, attach(), detach() etc...\n"},"dir":{"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/Frame/_dna","id":924,"name":"_dna","type":"string","parent":923,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"touch":{"path":"/sys/Frame/touch","id":236,"name":"touch","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified container exists in the path, creates a new one if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})\n"}},"attach":{"path":"/sys/Frame/attach","id":237,"name":"attach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" adds a node to a frame","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/Frame/link","id":238,"name":"link","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/Frame/onAttached","id":239,"name":"onAttached","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n\n\n> TODO make it reassianable and move features to 2 additional service methods\none for attached node, another - for frames up the tree\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"LabFrame":{"path":"/sys/LabFrame","id":925,"name":"LabFrame","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"tags":" core","head":" a lab group node with evo(dt) and draw() support","details":"_LabFrame_ is a specific kind of frame intended to be\nplace in _/lab_. It supports _/lab_ convention,\nlike _evo(dt)_ to evolve entities\nand _draw()_ to draw them.\n\nA _LabFrame_ is created automatically,\nwhen you touch _/lab_, e.g.\\:\n\n    lab.touch('mob') // create a LabFrame at /lab/mob\n    lab.touch('overlay/fx') // create lab frames overlay and fx\n\nYou can spawn entities in mob, overlay and fx now,\nand _/lab_ calls to _evo(dt)_ and _draw()_ will be propagated\nto these entities automatically.\n"},"dir":{"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"promoteNode":{"path":"/sys/LabFrame/promoteNode","id":206,"name":"promoteNode","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to analyze attached node and raise all necessary flags","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","details":"Called automatically when a node is attached.\nIn normal circumstances you don't have to call it manually.\n\nFollowing flags can be set\\:\n    evo = false  // when no evo function is specified\n    draw = false // when no draw function is specified\n    _positional = true  // if the node has _x_ and _y_\n    _sizable = true     // if the node has _w_ and _h_\n    _circular = true    // when _r_ is specified\n    _centered = true    // indicates that x,y are in the center and not at top-left\n\nIt also calls this.orderZ() if node.Z is specified.\n"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/LabFrame/onAttached","id":209,"name":"onAttached","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"draw":{"path":"/sys/LabFrame/draw","id":211,"name":"draw","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" draw child nodes","details":"Iterates over all included nodes and executes draw()\nif present.","notes":"During the draw keeps the track of Z-order.\nIf broken, this.orderZ() will be called\nafter the draw cycle to fix it.\n","usage":"(dt)"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lx":{"path":"/sys/LabFrame/lx","id":220,"name":"lx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"-","line":"local x"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number): number"}},"ly":{"path":"/sys/LabFrame/ly","id":221,"name":"ly","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gx":{"path":"/sys/LabFrame/gx","id":223,"name":"gx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/sys/LabFrame/gy","id":224,"name":"gy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}}},"idir":{"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/LabFrame/_dna","id":926,"name":"_dna","type":"string","parent":925,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"CueFrame":{"path":"/sys/CueFrame","id":927,"name":"CueFrame","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","dir":{"touch":{"path":"/sys/CueFrame/touch","id":928,"name":"touch","type":"function","parent":927,"mod":1,"modName":"$","kind":"function"},"attach":{"path":"/sys/CueFrame/attach","id":929,"name":"attach","type":"function","parent":927,"mod":1,"modName":"$","kind":"function"},"evo":{"path":"/sys/CueFrame/evo","id":930,"name":"evo","type":"function","parent":927,"mod":1,"modName":"$","kind":"function"},"pause":{"path":"/sys/CueFrame/pause","id":931,"name":"pause","type":"function","parent":927,"mod":1,"modName":"$","kind":"function"},"resume":{"path":"/sys/CueFrame/resume","id":932,"name":"resume","type":"function","parent":927,"mod":1,"modName":"$","kind":"function"}},"idir":{"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/CueFrame/_dna","id":933,"name":"_dna","type":"string","parent":927,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"link":{"path":"/sys/Frame/link","id":238,"name":"link","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/Frame/onAttached","id":239,"name":"onAttached","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n\n\n> TODO make it reassianable and move features to 2 additional service methods\none for attached node, another - for frames up the tree\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"isObj":{"name":"isObj","link":41},"isFun":{"name":"isFun","link":39},"isNumber":{"name":"isNumber","link":43},"isString":{"name":"isString","link":42},"isArray":{"name":"isArray","link":45},"isFrame":{"name":"isFrame","link":44},"isEmpty":{"name":"isEmpty","link":47},"addPath":{"path":"/sys/addPath","id":934,"name":"addPath","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":" utility to join path segments, takes care of proper / placing\n"}},"removeExtension":{"path":"/sys/removeExtension","id":935,"name":"removeExtension","type":"function","parent":885,"mod":1,"modName":"$","kind":"function"},"reconstructScene":{"path":"/sys/reconstructScene","id":936,"name":"reconstructScene","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":" soft reset the scene - clear, setup and restart evolution\n"}},"placeCanvas":{"path":"/sys/placeCanvas","id":937,"name":"placeCanvas","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":" adjust canvas position and sizing","at":[{"id":"param","type":"string","name":"id","line":"canvas id"},{"id":"param","type":"number","name":"baseX"},{"id":"param","type":"number","name":"baseY"},{"id":"param","type":"number","name":"baseWidth"},{"id":"param","type":"number","name":"baseHeight"}],"usage":"(id: string, baseX: number, baseY: number, baseWidth: number, baseHeight: number)"}},"expandCanvas":{"path":"/sys/expandCanvas","id":938,"name":"expandCanvas","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":" expand canvas to full screen\n@param {string} id - canvas id\n"}},"evalLoadedContent":{"path":"/sys/evalLoadedContent","id":939,"name":"evalLoadedContent","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":" a service call to parse and evaluate loaded resources\n"}},"doBox":{"path":"/sys/doBox","id":940,"name":"doBox","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":" evaluate /box node by name","at":[{"id":"param","type":"object/Mod","name":"mod","line":"the box's mod"},{"id":"param","type":"string","name":"name","line":"box node name"},{"id":"param","type":"boolean","name":"start","line":"set *true* to start() the box"}],"usage":"(mod: object/Mod, name: string, start: boolean)"}},"enableBox":{"path":"/sys/enableBox","id":941,"name":"enableBox","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":" evaluate /box node","at":[{"id":"param","type":"object/Mod","name":"mod","line":"the box's mod"},{"id":"param","type":"object/Mod","name":"name","line":"box object"},{"id":"param","type":"boolean","name":"start","line":"set *true* to start() the box"}],"usage":"(mod: object/Mod, name: object/Mod, start: boolean)"}},"cp":{"path":"/sys/cp","id":942,"name":"cp","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"copy source nodes to the target destination","at":[{"id":"param","type":"string","name":"source","line":"a selector for nodes to copy"},{"id":"param","type":"string|object/Frame","name":"target","line":"a copy destination"},{"id":"returns","type":"number","name":"-","line":"a number of copied nodes"}],"usage":"(source: string, target: string|object/Frame): number"}},"attachNode":{"path":"/sys/attachNode","id":943,"name":"attachNode","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"attach an element to the specified target","at":[{"id":"param","type":"object","name":"target","line":"a node for attachment"},{"id":"param","type":"object","name":"element","line":"a child element"},{"id":"returns","type":"object","name":"-","line":"the attached node"}],"usage":"(target: object, element: object): object"}},"construct":{"path":"/sys/construct","id":944,"name":"construct","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"construct an object, most often used by _/sys/spawn()_","at":[{"id":"param","type":"object|string","name":"source"},{"id":"param","type":"object","name":"spawnData","line":"optional init data"},{"id":"param","type":"string","name":"sbase","line":"optinal dna lookup base"}],"usage":"(source: object|string, spawnData: object, sbase: string)"}},"spawnCache":{"path":"/sys/spawnCache","id":945,"name":"spawnCache","type":"object","parent":885,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":"cache used for hot-reload logic"},"dir":{"cache":{"path":"/sys/spawnCache/cache","id":946,"name":"cache","type":"object","parent":945,"mod":1,"modName":"$","kind":"array","proto":"Array"},"push":{"path":"/sys/spawnCache/push","id":947,"name":"push","type":"function","parent":945,"mod":1,"modName":"$","kind":"function"},"lookupKids":{"path":"/sys/spawnCache/lookupKids","id":948,"name":"lookupKids","type":"function","parent":945,"mod":1,"modName":"$","kind":"function"},"name":{"path":"/sys/spawnCache/name","id":949,"name":"name","type":"string","parent":945,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"spawn":{"path":"/sys/spawn","id":950,"name":"spawn","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"spawn an entity with provided constructor data","details":"\nUsually you want to run a spawn function directly from\nthe _/lab.spawn()_ function or similar functions on subnodes.\nIt is more simple and straightforward.\nAnd it runs /sys/spawn() function under the hood.\n","at":[{"id":"param","type":"object|string","name":"source"},{"id":"param","type":"object","name":"spawnData","line":"optional init data"},{"id":"param","type":"object|string","name":"target","line":"target to attach to"},{"id":"param","type":"string","name":"sbase","line":"optinal dna lookup base"},{"id":"param","type":"string","name":"tbase","line":"optinal target lookup base"}],"usage":"(source: object|string, spawnData: object, target: object|string, sbase: string, tbase: string)"}},"clone":{"path":"/sys/clone","id":951,"name":"clone","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"clone the object and augment it with metadata","details":"TODO maybe work on tree instead of generic?\n\n","at":[{"id":"param","type":"object","name":"obj"},{"id":"param","type":"object","name":"meta"},{"id":"return","type":"object","name":"-","line":"the cloned object"}],"usage":"(obj: object, meta: object)"}},"extend":{"path":"/sys/extend","id":952,"name":"extend","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"extend a child object from the parent prototype","at":[{"id":"param","type":"object","name":"child"},{"id":"param","type":"object","name":"parent"},{"id":"returns","type":"object","name":"-","line":"returns the extended child"}],"usage":"(child: object, parent: object): object"}},"path":{"path":"/sys/path","id":953,"name":"path","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"find absolute path of the node","at":[{"id":"param","type":"object","name":"node"},{"id":"returns","type":"string","name":"-","line":"absolute path"}],"usage":"(node: object): string"}},"getName":{"path":"/sys/getName","id":954,"name":"getName","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"determine node's name","details":"Node's own ['name'] property is considered as a priority.\nOtherwise returns an index in the parent _ls (???)\nTODO maybe try to locate in _dir first?\n\n","at":[{"id":"param","type":"object","name":"node"},{"id":"returns","type":"string","name":"-","line":"node's name or '?' if unable to determine"}],"usage":"(node: object): string"}},"on":{"path":"/sys/on","id":955,"name":"on","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"trigger an event and call all handlers in lab/","details":"Usually called from the global on() function\n","usage":"(name, st)"}},"createTextSurface":{"path":"/sys/createTextSurface","id":956,"name":"createTextSurface","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"a service function used by print()/input() to create a text surface","usage":"()"}},"print":{"path":"/sys/print","id":957,"name":"print","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"print implementation called from the global print()","details":"Redefine to get custom behavior from print().\n","at":[{"id":"param","type":"string","name":"message","line":"message to print"}],"usage":"(msg)"}},"input":{"path":"/sys/input","id":958,"name":"input","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"input implementation called from the global input()","details":"Redefine to get custom behavior from input().\n","at":[{"id":"param","type":"string","name":"message","line":"input message"},{"id":"returns","type":"string","name":"-","line":"user-provided input string"}]}},"ask":{"path":"/sys/ask","id":959,"name":"ask","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"ask implementation called from the global ask()","details":"Redefine to get custom behavior from ask().\n","at":[{"id":"param","type":"string","name":"ask","line":"message"},{"id":"returns","type":"string","name":"-","line":"user-provided input string"}],"usage":"(msg): string"}},"say":{"path":"/sys/say","id":960,"name":"say","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"say implementation called from the global say()","details":"Redefine to get custom behavior from say().\n","at":[{"id":"param","type":"string","name":"message","line":"message to say"}],"usage":"(msg)"}},"cls":{"path":"/sys/cls","id":961,"name":"cls","type":"function","parent":885,"mod":1,"modName":"$","kind":"function","data":{"head":"cls implementation called from the global cls()","details":"Redefine to get custom behavior from cls().\n","usage":"()"}},"InjectLabFrame":{"path":"/sys/InjectLabFrame","id":962,"name":"InjectLabFrame","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"head":"A special frame able to inject into a particular place on the tree and preserve all the structure below","usage":"(st)"},"dir":{"onReplace":{"path":"/sys/InjectLabFrame/onReplace","id":963,"name":"onReplace","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"a handler to take a replaced node and attach it below","usage":"(node)"}},"release":{"path":"/sys/InjectLabFrame/release","id":964,"name":"release","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"detach the node and reattach all children to the parent node","usage":"()"}}},"idir":{"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"promoteNode":{"path":"/sys/LabFrame/promoteNode","id":206,"name":"promoteNode","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to analyze attached node and raise all necessary flags","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","details":"Called automatically when a node is attached.\nIn normal circumstances you don't have to call it manually.\n\nFollowing flags can be set\\:\n    evo = false  // when no evo function is specified\n    draw = false // when no draw function is specified\n    _positional = true  // if the node has _x_ and _y_\n    _sizable = true     // if the node has _w_ and _h_\n    _circular = true    // when _r_ is specified\n    _centered = true    // indicates that x,y are in the center and not at top-left\n\nIt also calls this.orderZ() if node.Z is specified.\n"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/LabFrame/onAttached","id":209,"name":"onAttached","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"draw":{"path":"/sys/LabFrame/draw","id":211,"name":"draw","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" draw child nodes","details":"Iterates over all included nodes and executes draw()\nif present.","notes":"During the draw keeps the track of Z-order.\nIf broken, this.orderZ() will be called\nafter the draw cycle to fix it.\n","usage":"(dt)"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lx":{"path":"/sys/LabFrame/lx","id":220,"name":"lx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"-","line":"local x"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number): number"}},"ly":{"path":"/sys/LabFrame/ly","id":221,"name":"ly","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gx":{"path":"/sys/LabFrame/gx","id":223,"name":"gx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/sys/LabFrame/gy","id":224,"name":"gy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/InjectLabFrame/_dna","id":965,"name":"_dna","type":"string","parent":962,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"ClipFrame":{"path":"/sys/ClipFrame","id":966,"name":"ClipFrame","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"head":"an injectable node, capable to clip the view","usage":"(st)"},"dir":{"draw":{"path":"/sys/ClipFrame/draw","id":967,"name":"draw","type":"function","parent":966,"mod":1,"modName":"$","kind":"function","data":{"head":"clip by x,y,w,h and draw all subnodes","usage":"()"}}},"idir":{"onReplace":{"path":"/sys/InjectLabFrame/onReplace","id":963,"name":"onReplace","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"a handler to take a replaced node and attach it below","usage":"(node)"}},"release":{"path":"/sys/InjectLabFrame/release","id":964,"name":"release","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"detach the node and reattach all children to the parent node","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"promoteNode":{"path":"/sys/LabFrame/promoteNode","id":206,"name":"promoteNode","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to analyze attached node and raise all necessary flags","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","details":"Called automatically when a node is attached.\nIn normal circumstances you don't have to call it manually.\n\nFollowing flags can be set\\:\n    evo = false  // when no evo function is specified\n    draw = false // when no draw function is specified\n    _positional = true  // if the node has _x_ and _y_\n    _sizable = true     // if the node has _w_ and _h_\n    _circular = true    // when _r_ is specified\n    _centered = true    // indicates that x,y are in the center and not at top-left\n\nIt also calls this.orderZ() if node.Z is specified.\n"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/LabFrame/onAttached","id":209,"name":"onAttached","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lx":{"path":"/sys/LabFrame/lx","id":220,"name":"lx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"-","line":"local x"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number): number"}},"ly":{"path":"/sys/LabFrame/ly","id":221,"name":"ly","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gx":{"path":"/sys/LabFrame/gx","id":223,"name":"gx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/sys/LabFrame/gy","id":224,"name":"gy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/ClipFrame/_dna","id":968,"name":"_dna","type":"string","parent":966,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"FloatNode":{"path":"/sys/FloatNode","id":969,"name":"FloatNode","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"head":"Not Impelemnted Yet","usage":"(st)"},"dir":{"onReplace":{"path":"/sys/FloatNode/onReplace","id":970,"name":"onReplace","type":"function","parent":969,"mod":1,"modName":"$","kind":"function","data":{"usage":"(node)"}},"evo":{"path":"/sys/FloatNode/evo","id":971,"name":"evo","type":"function","parent":969,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"draw":{"path":"/sys/FloatNode/draw","id":972,"name":"draw","type":"function","parent":969,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"release":{"path":"/sys/FloatNode/release","id":973,"name":"release","type":"function","parent":969,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}}},"idir":{"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"promoteNode":{"path":"/sys/LabFrame/promoteNode","id":206,"name":"promoteNode","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to analyze attached node and raise all necessary flags","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","details":"Called automatically when a node is attached.\nIn normal circumstances you don't have to call it manually.\n\nFollowing flags can be set\\:\n    evo = false  // when no evo function is specified\n    draw = false // when no draw function is specified\n    _positional = true  // if the node has _x_ and _y_\n    _sizable = true     // if the node has _w_ and _h_\n    _circular = true    // when _r_ is specified\n    _centered = true    // indicates that x,y are in the center and not at top-left\n\nIt also calls this.orderZ() if node.Z is specified.\n"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/LabFrame/onAttached","id":209,"name":"onAttached","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lx":{"path":"/sys/LabFrame/lx","id":220,"name":"lx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"-","line":"local x"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number): number"}},"ly":{"path":"/sys/LabFrame/ly","id":221,"name":"ly","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"lxy":{"path":"/sys/LabFrame/lxy","id":222,"name":"lxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x and y to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with local x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"gx":{"path":"/sys/LabFrame/gx","id":223,"name":"gx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/sys/LabFrame/gy","id":224,"name":"gy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"gxy":{"path":"/sys/LabFrame/gxy","id":225,"name":"gxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x and y to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"object with global x and y"}],"usage":"(x: number, y: number): object/2d-vector"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/FloatNode/_dna","id":974,"name":"_dna","type":"string","parent":969,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"PosFrame":{"path":"/sys/PosFrame","id":975,"name":"PosFrame","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"head":"an injectable node, capable to translate the view","usage":"(st)"},"dir":{"draw":{"path":"/sys/PosFrame/draw","id":976,"name":"draw","type":"function","parent":975,"mod":1,"modName":"$","kind":"function","data":{"head":"translate by x,y and draw all subnodes","usage":"()"}},"lx":{"path":"/sys/PosFrame/lx","id":977,"name":"lx","type":"function","parent":975,"mod":1,"modName":"$","kind":"function","data":{"head":"translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"-","line":"local x"}],"usage":"(x: number): number"}},"ly":{"path":"/sys/PosFrame/ly","id":978,"name":"ly","type":"function","parent":975,"mod":1,"modName":"$","kind":"function","data":{"head":"translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"lxy":{"path":"/sys/PosFrame/lxy","id":979,"name":"lxy","type":"function","parent":975,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to local coordinate system","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}},"gx":{"path":"/sys/PosFrame/gx","id":980,"name":"gx","type":"function","parent":975,"mod":1,"modName":"$","kind":"function","data":{"head":"translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/sys/PosFrame/gy","id":981,"name":"gy","type":"function","parent":975,"mod":1,"modName":"$","kind":"function","data":{"head":"translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"gxy":{"path":"/sys/PosFrame/gxy","id":982,"name":"gxy","type":"function","parent":975,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to parent node coordinate system","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in parent node coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}}},"idir":{"onReplace":{"path":"/sys/InjectLabFrame/onReplace","id":963,"name":"onReplace","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"a handler to take a replaced node and attach it below","usage":"(node)"}},"release":{"path":"/sys/InjectLabFrame/release","id":964,"name":"release","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"detach the node and reattach all children to the parent node","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"promoteNode":{"path":"/sys/LabFrame/promoteNode","id":206,"name":"promoteNode","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to analyze attached node and raise all necessary flags","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","details":"Called automatically when a node is attached.\nIn normal circumstances you don't have to call it manually.\n\nFollowing flags can be set\\:\n    evo = false  // when no evo function is specified\n    draw = false // when no draw function is specified\n    _positional = true  // if the node has _x_ and _y_\n    _sizable = true     // if the node has _w_ and _h_\n    _circular = true    // when _r_ is specified\n    _centered = true    // indicates that x,y are in the center and not at top-left\n\nIt also calls this.orderZ() if node.Z is specified.\n"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/LabFrame/onAttached","id":209,"name":"onAttached","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"labVector":{"path":"/sys/LabFrame/labVector","id":227,"name":"labVector","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local 2d vector to _/lab_ coordinates","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(v: object/2d-vector): object/2d-vector","details":"The same as _LabFrame.labxy(x, y)_, but accepts 2d vector.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/PosFrame/_dna","id":983,"name":"_dna","type":"string","parent":975,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"RotateFrame":{"path":"/sys/RotateFrame","id":984,"name":"RotateFrame","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"head":"an injectable node, capable to rotate the view","usage":"(st)"},"dir":{"draw":{"path":"/sys/RotateFrame/draw","id":985,"name":"draw","type":"function","parent":984,"mod":1,"modName":"$","kind":"function","data":{"head":"rotate by andle and and draw all subnodes","usage":"()"}},"lxy":{"path":"/sys/RotateFrame/lxy","id":986,"name":"lxy","type":"function","parent":984,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to local coordinate system","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/RotateFrame/gxy","id":987,"name":"gxy","type":"function","parent":984,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to parent node coordinate system","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in parent node coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}},"labVector":{"path":"/sys/RotateFrame/labVector","id":988,"name":"labVector","type":"function","parent":984,"mod":1,"modName":"$","kind":"function","data":{"head":"calculate a vector translated to the _/lab_ coordinate system","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinates"}],"usage":"(v: object/2d-vector2): object/2d-vector"}}},"idir":{"onReplace":{"path":"/sys/InjectLabFrame/onReplace","id":963,"name":"onReplace","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"a handler to take a replaced node and attach it below","usage":"(node)"}},"release":{"path":"/sys/InjectLabFrame/release","id":964,"name":"release","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"detach the node and reattach all children to the parent node","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"promoteNode":{"path":"/sys/LabFrame/promoteNode","id":206,"name":"promoteNode","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to analyze attached node and raise all necessary flags","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","details":"Called automatically when a node is attached.\nIn normal circumstances you don't have to call it manually.\n\nFollowing flags can be set\\:\n    evo = false  // when no evo function is specified\n    draw = false // when no draw function is specified\n    _positional = true  // if the node has _x_ and _y_\n    _sizable = true     // if the node has _w_ and _h_\n    _circular = true    // when _r_ is specified\n    _centered = true    // indicates that x,y are in the center and not at top-left\n\nIt also calls this.orderZ() if node.Z is specified.\n"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/LabFrame/onAttached","id":209,"name":"onAttached","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lx":{"path":"/sys/LabFrame/lx","id":220,"name":"lx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"-","line":"local x"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number): number"}},"ly":{"path":"/sys/LabFrame/ly","id":221,"name":"ly","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"gx":{"path":"/sys/LabFrame/gx","id":223,"name":"gx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/sys/LabFrame/gy","id":224,"name":"gy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/RotateFrame/_dna","id":989,"name":"_dna","type":"string","parent":984,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"ScaleFrame":{"path":"/sys/ScaleFrame","id":990,"name":"ScaleFrame","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"head":"an injectable node, capable to scale the view","usage":"(st)"},"dir":{"draw":{"path":"/sys/ScaleFrame/draw","id":991,"name":"draw","type":"function","parent":990,"mod":1,"modName":"$","kind":"function","data":{"head":"scale by x, y and draw all subnodes","usage":"()"}},"lx":{"path":"/sys/ScaleFrame/lx","id":992,"name":"lx","type":"function","parent":990,"mod":1,"modName":"$","kind":"function","data":{"head":"translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"-","line":"local x"}],"usage":"(x: number): number"}},"ly":{"path":"/sys/ScaleFrame/ly","id":993,"name":"ly","type":"function","parent":990,"mod":1,"modName":"$","kind":"function","data":{"head":"translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"lxy":{"path":"/sys/ScaleFrame/lxy","id":994,"name":"lxy","type":"function","parent":990,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to local coordinate system","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}},"gx":{"path":"/sys/ScaleFrame/gx","id":995,"name":"gx","type":"function","parent":990,"mod":1,"modName":"$","kind":"function","data":{"head":"translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/sys/ScaleFrame/gy","id":996,"name":"gy","type":"function","parent":990,"mod":1,"modName":"$","kind":"function","data":{"head":"translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"gxy":{"path":"/sys/ScaleFrame/gxy","id":997,"name":"gxy","type":"function","parent":990,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to parent node coordinate system","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in parent node coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}},"labVector":{"path":"/sys/ScaleFrame/labVector","id":998,"name":"labVector","type":"function","parent":990,"mod":1,"modName":"$","kind":"function","data":{"head":"calculate a vector translated to the _/lab_ coordinate system","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinates"}],"usage":"(v: object/2d-vector2): object/2d-vector"}}},"idir":{"onReplace":{"path":"/sys/InjectLabFrame/onReplace","id":963,"name":"onReplace","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"a handler to take a replaced node and attach it below","usage":"(node)"}},"release":{"path":"/sys/InjectLabFrame/release","id":964,"name":"release","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"detach the node and reattach all children to the parent node","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"promoteNode":{"path":"/sys/LabFrame/promoteNode","id":206,"name":"promoteNode","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to analyze attached node and raise all necessary flags","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","details":"Called automatically when a node is attached.\nIn normal circumstances you don't have to call it manually.\n\nFollowing flags can be set\\:\n    evo = false  // when no evo function is specified\n    draw = false // when no draw function is specified\n    _positional = true  // if the node has _x_ and _y_\n    _sizable = true     // if the node has _w_ and _h_\n    _circular = true    // when _r_ is specified\n    _centered = true    // indicates that x,y are in the center and not at top-left\n\nIt also calls this.orderZ() if node.Z is specified.\n"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/LabFrame/onAttached","id":209,"name":"onAttached","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/ScaleFrame/_dna","id":999,"name":"_dna","type":"string","parent":990,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}},"TransformFrame":{"path":"/sys/TransformFrame","id":1000,"name":"TransformFrame","type":"function","parent":885,"mod":1,"modName":"$","kind":"cons","data":{"head":"an injectable node, capable to translate, scale and rotate the view","details":"Note, that regular lx(), ly(), gx() and gy() don't work here\nand have been disabled due to rotation logic.\n\nUse lxy() and gxy() instead.\n","usage":"(st)"},"dir":{"draw":{"path":"/sys/TransformFrame/draw","id":1001,"name":"draw","type":"function","parent":1000,"mod":1,"modName":"$","kind":"function","data":{"head":"transform and draw all subnodes","details":"Following transformations are performed:\n* translate to -x, -y\n* scale to 1/scale\n* rotate to -angle\n","usage":"()"}},"lxy":{"path":"/sys/TransformFrame/lxy","id":1002,"name":"lxy","type":"function","parent":1000,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to local coordinate system","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}},"gxy":{"path":"/sys/TransformFrame/gxy","id":1003,"name":"gxy","type":"function","parent":1000,"mod":1,"modName":"$","kind":"function","data":{"head":"translate x,y to parent node coordinate system","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in parent node coordinates"}],"usage":"(x: number, y: number): object/2d-vector"}},"labVector":{"path":"/sys/TransformFrame/labVector","id":1004,"name":"labVector","type":"function","parent":1000,"mod":1,"modName":"$","kind":"function","data":{"head":"calculate a vector translated to the _/lab_ coordinate system","at":[{"id":"param","type":"object/2d-vector","name":"v","line":"source 2d vector"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinates"}],"usage":"(v: object/2d-vector): object/2d-vector"}}},"idir":{"onReplace":{"path":"/sys/InjectLabFrame/onReplace","id":963,"name":"onReplace","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"a handler to take a replaced node and attach it below","usage":"(node)"}},"release":{"path":"/sys/InjectLabFrame/release","id":964,"name":"release","type":"function","parent":962,"mod":1,"modName":"$","kind":"function","data":{"head":"detach the node and reattach all children to the parent node","usage":"()"}},"touch":{"path":"/sys/LabFrame/touch","id":204,"name":"touch","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" makes sure specified lab container exists in the path, creates a new LabFrame if needed","at":[{"id":"param","type":"string","name":"path","line":"a path to a frame"}],"usage":"(path: string)","details":"  lab.touch('bot/mob')\nwill create a Frame named 'bot' inside 'lab'\nand then will create a Frame named 'mob' inside 'bot'.\n\nNow you can spawn bots in _/lab/mob/bot_\n  lab.mob.bot.spawn(MyBot, {...})"}},"spawn":{"path":"/sys/LabFrame/spawn","id":205,"name":"spawn","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" spawn an entity from existing _/dna_","at":[{"id":"param","type":"string | object/dna ","name":"sourceDNA"},{"id":"param","type":"object","name":"[st]","line":"entity configuration"}],"usage":"(sourceDNA: string | object/dna , [st]: object)"}},"promoteNode":{"path":"/sys/LabFrame/promoteNode","id":206,"name":"promoteNode","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to analyze attached node and raise all necessary flags","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","details":"Called automatically when a node is attached.\nIn normal circumstances you don't have to call it manually.\n\nFollowing flags can be set\\:\n    evo = false  // when no evo function is specified\n    draw = false // when no draw function is specified\n    _positional = true  // if the node has _x_ and _y_\n    _sizable = true     // if the node has _w_ and _h_\n    _circular = true    // when _r_ is specified\n    _centered = true    // indicates that x,y are in the center and not at top-left\n\nIt also calls this.orderZ() if node.Z is specified.\n"}},"attach":{"path":"/sys/LabFrame/attach","id":207,"name":"attach","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" adds an entity to a lab frame","at":[{"id":"param","type":"object","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: object, [name]: string)","details":"When _name_ is not specified, tries to take it from the object itself.\n"}},"link":{"path":"/sys/LabFrame/link","id":208,"name":"link","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" links a node to the lab frame without attaching it","at":[{"id":"param","type":"value","name":"node"},{"id":"param","type":"string","name":"[name]","line":"optional name"}],"usage":"(node: value, [name]: string)","notes":"Use when you don't want to change child node's parent,\nbut still want that child node to look like it is in the frame.\n"}},"onAttached":{"path":"/sys/LabFrame/onAttached","id":209,"name":"onAttached","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to propagate attach notifications","at":[{"id":"param","type":"value","name":"[node]","line":"optional attached node (empty for the attached node itself)"}],"usage":"([node]: value)","details":"Has default behavior, so shouldn't be redefined for now.\n"}},"evo":{"path":"/sys/LabFrame/evo","id":210,"name":"evo","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" evolve child nodes for _dt_ seconds","at":[{"id":"param","type":"number/seconds","name":"dt","line":"delta time in seconds"}],"usage":"(dt: number/seconds)","details":"Iterates over all included nodes and executes evo(dt)\nif presnet.\n"}},"pause":{"path":"/sys/LabFrame/pause","id":212,"name":"pause","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause this node evolution, evo() execution will be skipped","note":"By convention, enforcing _paused_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.paused = true\nand the node evolution will be suspended.\n\nThis operation doesn't hide the node.\n"}},"pauseAll":{"path":"/sys/LabFrame/pauseAll","id":213,"name":"pauseAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pause evolution of all child nodes\n"}},"resume":{"path":"/sys/LabFrame/resume","id":214,"name":"resume","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume this node evolution\n"}},"resumeAll":{"path":"/sys/LabFrame/resumeAll","id":215,"name":"resumeAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" resume evolution of all child nodes\n"}},"hide":{"path":"/sys/LabFrame/hide","id":216,"name":"hide","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide the node, execution of draw() will be skipped ","note":"By convention, enforcing _hidden_ flag is a parent lab node\nresponsibility. That way an entity doesn't have\nto include any additional logic.\nJust set\n    entityNode.hidden = true\nand the node will be hidden.\n\nThis operation just hide, but doesn't pause the node.\nIt still is going to be evolved in the dark.\n"}},"hideAll":{"path":"/sys/LabFrame/hideAll","id":217,"name":"hideAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" hide all child nodes\n"}},"show":{"path":"/sys/LabFrame/show","id":218,"name":"show","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show the node\n"}},"showAll":{"path":"/sys/LabFrame/showAll","id":219,"name":"showAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" show all child nodes\n"}},"lx":{"path":"/sys/LabFrame/lx","id":220,"name":"lx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global x to local coordinates","at":[{"id":"param","type":"number","name":"x","line":"global x"},{"id":"returns","type":"number","name":"-","line":"local x"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in local coordinates"}],"usage":"(x: number): number"}},"ly":{"path":"/sys/LabFrame/ly","id":221,"name":"ly","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate global y to local coordinates","at":[{"id":"param","type":"number","name":"y","line":"global y"},{"id":"returns","type":"number","name":"-","line":"local y"}],"usage":"(y: number): number"}},"gx":{"path":"/sys/LabFrame/gx","id":223,"name":"gx","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local x to global coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"returns","type":"number","name":"-","line":"global x"}],"usage":"(x: number): number"}},"gy":{"path":"/sys/LabFrame/gy","id":224,"name":"gy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local y to global coordinates","at":[{"id":"param","type":"number","name":"y","line":"local y"},{"id":"returns","type":"number","name":"-","line":"global y"}],"usage":"(y: number): number"}},"labxy":{"path":"/sys/LabFrame/labxy","id":226,"name":"labxy","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" translate local coordinates to _/lab_ coordinates","at":[{"id":"param","type":"number","name":"x"},{"id":"param","type":"number","name":"y"},{"id":"returns","type":"object/2d-vector","name":"-","line":"{x,y} in _/lab_ coordinate system"}],"usage":"(x: number, y: number): object/2d-vector","details":"The same as _LabFrame.labVector(vec)_, but accepts x and y coordinates.\n"}},"poke":{"path":"/sys/LabFrame/poke","id":228,"name":"poke","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" poke nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, [opt]: object|function)","details":"A node must implement a poke method in order to be poked.\n\nA node is responsible for figuring out if {x,y} are\nwithin the node area or outside.\n\nIf _opt_ is a predicate function, the _node.poke()_\nwill be called only when fn(node) returns true.\n\nOtherwise, _opt_ is considered to be a configuration\nobject passed to poke function. It that case,\nit is a responsibility of poke() to make sense\nof that data.\n\n"}},"pick":{"path":"/sys/LabFrame/pick","id":229,"name":"pick","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" pick nodes at local coordinates","at":[{"id":"param","type":"number","name":"x","line":"local x"},{"id":"param","type":"number","name":"y","line":"local y"},{"id":"param","type":"array","name":"ls","line":"an array to collect picked nodes"},{"id":"param","type":"object|function","name":"[opt]","line":"an option object or a predicate function"}],"usage":"(x: number, y: number, ls: array, [opt]: object|function)","details":"Methods determines the pick by coordinates and size convention.\n\nBut a node can implement it's own peek method\n\n"}},"killAll":{"path":"/sys/LabFrame/killAll","id":230,"name":"killAll","type":"function","parent":925,"mod":1,"modName":"$","kind":"function"},"kill":{"path":"/sys/LabFrame/kill","id":231,"name":"kill","type":"function","parent":925,"mod":1,"modName":"$","kind":"function","data":{"head":" kill the node and all the childs\n\n"}},"_frame":{"path":"/sys/Frame/_frame","id":232,"name":"_frame","type":"boolean","parent":923,"mod":1,"modName":"$","class":"boolean","title":"unknown"},"_dna":{"path":"/sys/TransformFrame/_dna","id":1005,"name":"_dna","type":"string","parent":1000,"mod":1,"modName":"$","class":"string","title":"unknown"},"path":{"path":"/sys/Frame/path","id":234,"name":"path","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the path of the node","at":[{"id":"returns","type":"string/path","name":"-","line":"absolute path in the mix"}],"usage":"(): string/path","note":"The parent must be present to determine the path,\nso it obviously doesn't work for orphaned nodes.\n"}},"getMod":{"path":"/sys/Frame/getMod","id":235,"name":"getMod","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" get parent mod object","at":[{"id":"returns","type":"object/Mod","name":"-","line":"parent mod"}],"usage":"(): object/Mod","note":"The parent must be present to determine the mod,\nso it obviously doesn't work for orphaned nodes.\n"}},"detach":{"path":"/sys/Frame/detach","id":240,"name":"detach","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node","at":[{"id":"param","type":"object","name":"node"}],"usage":"(node: object)","notes":"With undefined node the whole frame got removed.\nWe are not satisfied with accidental complexity in that call.\n~TODO split into 2 different methods by intent~\n"}},"detachAll":{"path":"/sys/Frame/detachAll","id":241,"name":"detachAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach all nodes\n"}},"detachByName":{"path":"/sys/Frame/detachByName","id":242,"name":"detachByName","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" detach a node by name","at":[{"id":"param","type":"string","name":"name","line":"node's name"}],"usage":"(name: string)"}},"apply":{"path":"/sys/Frame/apply","id":243,"name":"apply","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all child nodes, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"A predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"applyAll":{"path":"/sys/Frame/applyAll","id":244,"name":"applyAll","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" apply a function to all nodes and subnodes down the tree, possibly filtered by a predicate","at":[{"id":"param","type":"function","name":"fn","line":"a function to apply"},{"id":"param","type":"function/string","name":"predicate","line":"a predicate to filter out the nodes"}],"usage":"(fn: function, predicate: function/string)","details":"Works recursivelly on all child subframes.\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"collide":{"path":"/sys/Frame/collide","id":245,"name":"collide","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" collides the child nodes, e.g. apply function to all pair combinations\n@param {function} fn - a function to apply\n@param {function/string} predicate - a predicate to filter out the nodes","details":"Can be used in collision-detection scenarios,\nwhen you need to compare each node with any other node.\n\nA predicate function accepts a child node and returns\n_true_ if the function needs to be applied to that node\nand _false_ if doesn't.\nA predicate also can be a select string.\n"}},"map":{"path":"/sys/Frame/map","id":246,"name":"map","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" applies a function to all child nodes and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"flatMap":{"path":"/sys/Frame/flatMap","id":247,"name":"flatMap","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursively applies a function to all descendants and returns the array of results","at":[{"id":"param","type":"function","name":"fn","line":"a map function"},{"id":"param","type":"array","name":"accumulator","line":"an optional array to gather values in"},{"id":"returns","type":"array","name":"-","line":"array of recursively mapped values"}],"usage":"(fn: function, accumulator: array): array"}},"filter":{"path":"/sys/Frame/filter","id":248,"name":"filter","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" filter out nodes with a predicate function","at":[{"id":"param","type":"function","name":"fn","line":"a predicate function"},{"id":"returns","type":"array/nodes","name":"-","line":"array of filtered nodes"}],"usage":"(fn: function): array/nodes"}},"find":{"path":"/sys/Frame/find","id":249,"name":"find","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" recursive search for nodes","at":[{"id":"param","type":"function","name":"predicate","line":"a predicate function"}],"usage":"(predicate: function)"}},"reduce":{"path":"/sys/Frame/reduce","id":250,"name":"reduce","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce child nodes","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"reduceRight":{"path":"/sys/Frame/reduceRight","id":251,"name":"reduceRight","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" reduce right child nodes - the same as _reduce_, by starts from the end","at":[{"id":"param","type":"function(accumulator, node, i, frame)","name":"fn","line":"a reduce function"},{"id":"param","type":"value","name":"initVal","line":"a start value, first node by default"}],"usage":"(fn: function(accumulator, node, i, frame), initVal: value)"}},"selectInstanceOf":{"path":"/sys/Frame/selectInstanceOf","id":252,"name":"selectInstanceOf","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" returns the list of included nodes of provided type","at":[{"id":"param","type":"prototype","name":"of","line":"a value to match instanceof"}],"usage":"(of: prototype)"}},"select":{"path":"/sys/Frame/select","id":253,"name":"select","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select instances matching the string or function predicate","at":[{"id":"param","type":"string","name":"path"}],"usage":"(path: string)","details":"String predicates are in path format and can include special characters:\n\n    * - match all children\n    ^ - match the tag\n    #<id> - deep select by <id>\n    &<name> - deep select by <name>\n    ~<type> - deep select by <type>\n\nSome usage examples:\n\n    _$.select('/res/sfx/*')          // select all sound effects in sfx\n    dna.select('hud/Window')         // select hud.Window\n    lab.hud.select('~Window')        // select all instances of dna.hud.Window in lab.hud\n    lab.hud.select('panelA/~Window') //  select all instances of dna.hud.Window under panelA\n    lab.select('&hero')              //select from lab all nodes with name === 'hero'\n"}},"selectOne":{"path":"/sys/Frame/selectOne","id":254,"name":"selectOne","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" select a single node matching the string or function predicate","at":[{"id":"param","type":"string","name":"predicate"}],"usage":"(predicate: string)","details":"The same, as select(), but returns the top result.\n\nLook at [select()](#./sys/Frame/select) for predicate syntax details.\n"}},"orderZ":{"path":"/sys/Frame/orderZ","id":255,"name":"orderZ","type":"function","parent":923,"mod":1,"modName":"$","kind":"function","data":{"head":" a service method to order nodes according to their Z-index","details":"Usually, you don't have to call this function.\nIt is called automatically when a new node with defined Z added,\nor when lab frame detects onordered Z during the draw cycle.\n\nYou can change Z value on a node, and LabFrame will detect,\nthat nodes are not ordered by their Z-index\nand call the ordering automatically during the draw cycle.\n"}}}}}},"pub":{"path":"/pub","id":1006,"name":"pub","type":"object","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Frame","data":{"head":" public frame for sharing between mods\n","details":"Can be used for convenient data sharing between different mods.\n\n","notes":"There are other objects that can be used for global sharing.\n<a href=\"#./\">The root mod $</a> is an obvious candidate,\nbut there are others like <a href=\"#./sys\">sys</a>\nand <a href=\"#./log\">log</a>.\n\nHowever, it is not a good practice to pollute\nthe root mod or sys frame which already\nhave a lot of different responsibilities.\n\nSo keeping shared values in a dedicated frame\nis a much cleaner approach to the sharing problem.\n\n\n"},"dir":{}},"log":{"path":"/log","id":1007,"name":"log","type":"function","parent":1,"mod":1,"modName":"$","kind":"Frame","proto":"Function","data":{"head":" logging functions\n","details":"A placeholder for the logging functions.\n\nUse log(msg) for the regular level logging","and":"    * log.out(msg)\n    * log.debug(msg)\n    * log.warn(msg)\n    * log.err(msg)\n    * log.raw(msg)\n    * log.dump(obj)\nfor more specific levels.\n"},"dir":{"err":{"path":"/log/err","id":1008,"name":"err","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function","data":{"head":" error level log, prefixed by \"!\"\n"}},"warn":{"path":"/log/warn","id":1009,"name":"warn","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function","data":{"head":" warn level log, prefixed by \"?\"\n"}},"out":{"path":"/log/out","id":1010,"name":"out","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function","data":{"head":" default logging, prefixed by \">\", the same as log(msg)\n"}},"debug":{"path":"/log/debug","id":1011,"name":"debug","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function","data":{"head":" debug level log, prefixed by \".\"\n"}},"trace":{"path":"/log/trace","id":1012,"name":"trace","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function"},"sys":{"path":"/log/sys","id":1013,"name":"sys","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function","data":{"head":" used by collider.jam for system messages","details":"Use it to log low-level life-cycle related\nactivities or jobs.\nMost of the sys level messages are printed\nduring the bootstrap, loading and setup.\n\n"}},"raw":{"path":"/log/raw","id":1014,"name":"raw","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function","data":{"head":" log with no prefix, just like console.log()\n"}},"dump":{"path":"/log/dump","id":1015,"name":"dump","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function","data":{"head":" dumps object structure and values\n"}},"tab":{"path":"/log/tab","id":1016,"name":"tab","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function","data":{"head":" dumps object as a table\n"}},"list":{"path":"/log/list","id":1017,"name":"list","type":"function","parent":1007,"mod":1,"modName":"$","kind":"function"}}},"boot":{"path":"/boot","id":1018,"name":"boot","type":"object","parent":1,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":" loading screen\n","details":"Loads in the 0 batch and starts rendering cycle while\nall other resources are loaded and evaluated.\nBoot uses loading progress information from\n<a href=\"#./res\">/res</a> to show loading indicator.\n\nStandard draw() and evo(dt) functions must be present.\n\nThe boot is over when the root mod goes into a [started] mode.\n"},"dir":{"init":{"path":"/boot/init","id":1019,"name":"init","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"evoWorm":{"path":"/boot/evoWorm","id":1020,"name":"evoWorm","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"drawWorm":{"path":"/boot/drawWorm","id":1021,"name":"drawWorm","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"spawnTextSegment":{"path":"/boot/spawnTextSegment","id":1022,"name":"spawnTextSegment","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"(worm, x, y, dir, msg, fadein, keep, fadeout)"}},"spawnLineSegment":{"path":"/boot/spawnLineSegment","id":1023,"name":"spawnLineSegment","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"(worm, x1, y1, x2, y2, onTarget)"}},"spawnSegment":{"path":"/boot/spawnSegment","id":1024,"name":"spawnSegment","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"(worm, type, orbit, angle, target)"}},"spawnWorm":{"path":"/boot/spawnWorm","id":1025,"name":"spawnWorm","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"evoContent":{"path":"/boot/evoContent","id":1026,"name":"evoContent","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"drawContent":{"path":"/boot/drawContent","id":1027,"name":"drawContent","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"updateLoadingStatus":{"path":"/boot/updateLoadingStatus","id":1028,"name":"updateLoadingStatus","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"head":"************************","details":"generic bootloader logic\n","usage":"()"}},"evoBoot":{"path":"/boot/evoBoot","id":1029,"name":"evoBoot","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"evo":{"path":"/boot/evo","id":1030,"name":"evo","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"(dt)"}},"draw":{"path":"/boot/draw","id":1031,"name":"draw","type":"function","parent":1018,"mod":1,"modName":"$","kind":"function","data":{"usage":"()"}},"BASE":{"path":"/boot/BASE","id":1032,"name":"BASE","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"FBASE":{"path":"/boot/FBASE","id":1033,"name":"FBASE","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"R3":{"path":"/boot/R3","id":1034,"name":"R3","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"POWERED_BY":{"path":"/boot/POWERED_BY","id":1035,"name":"POWERED_BY","type":"string","parent":1018,"mod":1,"modName":"$","class":"string","title":"unknown"},"ERROR":{"path":"/boot/ERROR","id":1036,"name":"ERROR","type":"string","parent":1018,"mod":1,"modName":"$","class":"string","title":"unknown"},"FADEIN":{"path":"/boot/FADEIN","id":1037,"name":"FADEIN","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"FADEOUT":{"path":"/boot/FADEOUT","id":1038,"name":"FADEOUT","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"STABLE":{"path":"/boot/STABLE","id":1039,"name":"STABLE","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"CONNECTOR":{"path":"/boot/CONNECTOR","id":1040,"name":"CONNECTOR","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"LABEL":{"path":"/boot/LABEL","id":1041,"name":"LABEL","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"DEAD":{"path":"/boot/DEAD","id":1042,"name":"DEAD","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"FQ":{"path":"/boot/FQ","id":1043,"name":"FQ","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"R1":{"path":"/boot/R1","id":1044,"name":"R1","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"R2":{"path":"/boot/R2","id":1045,"name":"R2","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"SPEED":{"path":"/boot/SPEED","id":1046,"name":"SPEED","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"RSPEED":{"path":"/boot/RSPEED","id":1047,"name":"RSPEED","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"TSPEED":{"path":"/boot/TSPEED","id":1048,"name":"TSPEED","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"STEP":{"path":"/boot/STEP","id":1049,"name":"STEP","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"STEPV":{"path":"/boot/STEPV","id":1050,"name":"STEPV","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"W":{"path":"/boot/W","id":1051,"name":"W","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"FADE":{"path":"/boot/FADE","id":1052,"name":"FADE","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"TEXT_FADEOUT":{"path":"/boot/TEXT_FADEOUT","id":1053,"name":"TEXT_FADEOUT","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"MIN_ANGLE":{"path":"/boot/MIN_ANGLE","id":1054,"name":"MIN_ANGLE","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"MAX_ANGLE":{"path":"/boot/MAX_ANGLE","id":1055,"name":"MAX_ANGLE","type":"number","parent":1018,"mod":1,"modName":"$","class":"number","title":"unknown"},"worms":{"path":"/boot/worms","id":1056,"name":"worms","type":"object","parent":1018,"mod":1,"modName":"$","kind":"array","proto":"Array"},"targets":{"path":"/boot/targets","id":1057,"name":"targets","type":"object","parent":1018,"mod":1,"modName":"$","kind":"array","proto":"Array"},"name":{"path":"/boot/name","id":1058,"name":"name","type":"string","parent":1018,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"pak":{"path":"/pak","id":1059,"name":"pak","type":"object","parent":1,"mod":1,"modName":"$","kind":"Object","proto":"Object","data":{"head":" unit packaging info\n"},"dir":{"load":{"path":"/pak/load","id":1060,"name":"load","type":"string","parent":1059,"mod":1,"modName":"$","class":"string","title":"unknown"},"mount":{"path":"/pak/mount","id":1061,"name":"mount","type":"string","parent":1059,"mod":1,"modName":"$","class":"string","title":"unknown"},"fixMode":{"path":"/pak/fixMode","id":1062,"name":"fixMode","type":"string","parent":1059,"mod":1,"modName":"$","class":"string","title":"unknown"},"name":{"path":"/pak/name","id":1063,"name":"name","type":"string","parent":1059,"mod":1,"modName":"$","class":"string","title":"unknown"}}},"setup":{"path":"/setup","id":1064,"name":"setup","type":"function","parent":1,"mod":1,"modName":"$","kind":"function","data":{"head":" setup function or frame","details":"Setup can be a single function or a frame with multiple functions\nif necessary.\n\nIt runs when all resources and objects are loaded, evaluated\nand initialized just before the evolution begins.\n\nInitial game objects can be created here.\n"}}}},"pages":{"getting-started":{"name":"Getting Started","order":"1","body":"Thank you for <a href=\"#.install\">downloading</a> _Collider.JAM_!\n\nNow you can create your first *mod*.\n\nLet's visualize a bouncing planet.\n\nCreate a new folder named _planet.mod_ - this is going\nto be a home of our Collider.JAM project.\n\nNext, create a folder named _res_ inside.\nIt is going to keep our assets or more precisely,\na single asset - an image of a planet.\n\nPlace a planet image inside the _res_ folder.\n\nYou can get one on\n[GitHub](https://github.com/invider/procedural-november.pak/tree/main/planets), from\n[Open Game Art](https://opengameart.org/content/mars-type-planet),\nor find any other planet image with a transparent background.\n\nNow, create a file _planet.mod/lab.js_:\n\n```\n    // planet.mod/lab.js\n\n    // position at the center of the screen\n    let x = rx(.5)  // place at 50% of the screen width\n    let y = ry(.5)  // place at 50% of the screen height\n    let r = 50      // planet radius in pixels\n\n    let dx = 100 // x-axis speed component\n    let dy = 100 // y-axis speed component\n\n    function init() {\n        this.background = '#000000' // black color in hex RGB\n    }\n\n    function evo(dt) {\n       // make the movement factored by the delta time dt\n       x += dx * dt\n       y += dy * dt\n\n       // bounce from the screen edges\n       if (x > rx(1)-r && dx > 0) dx *= -1\n       else if (x < r && dx < 0) dx *= -1\n       if (y > ry(1)-r && dy > 0) dy *= -1\n       else if (y < r && dy < 0) dy *= -1\n    }\n\n    function draw() {\n       // planet\n       lineWidth(5)\n       stroke(.58, .5, .7)   // color in float HSL\n       circle(x, y, r)       // atmosphere haze\n       image(res.mars_type_planet, x-r, y-r, 2*r, 2*r)\n    }\n```\n\nThat is all you need to have a bouncing planet on the screen.\n\nFunctions _draw()_ and _evo(dt)_ are going\nto be evaluated in the main game loop,\nsince they are part of the _lab_ node.\n\n*Any object with _draw()_ and _evo()_ in the _lab_ is alive.*\n\n\nThe source for this example is available\nat <a href=\"https://github.com/invider/bits.mix/blob/master/planet.mod/lab.js\">bits.mix/planet.mod/lab.js</a>.\n\nTo run it, clone the _bits.mix_ repository:\n\n    git clone https://github.com/invider/bits.mix\n\nThen, run _Collider.JAM_ inside the _planet.mod_ folder:\n\n    cd bits.mix/planet.mod\n\n    jam\n\nAnd open the browser at\n[http://localhost:9999](http://localhost:9999)\n\n","kind":"page","id":1065,"path":"getting-started"},"intro":{"name":"Intro","order":"1","tags":"jam, intro, start, begin, beginner, preface, home","body":"<div style=\"font-size: 110%;\">\n[start](#.getting-started)\n| [design](#.design)\n| [terms](#.terms)\n| [jamcard](#.jam-card)\n| [tips](#.tips)\n| [mixes](#.mixes)\n----\n[mix/$](#./)\n| [scope/alt](#./alt)\n| [res](#./res)\n| [lib](#./lib)\n| [dna](#./dna)\n| [env](#./env)\n| [lab](#./lab)\n| [trap](#./trap)\n| [setup](#./setup)\n----\n[collider.land](http://collider.land)\n| [github](https://github.com/invider/collider.jam)\n| [jamming card](http://collider.land/data/jamming-card.pdf)\n| [blog](http://ikhotin.com/posts/)\n| [discord](https://discord.gg/kxNnHc2)\n----\n</div>\n\n=== Welcome to Collider.JAM!\n\n_Collider.JAM_ is a hand-crafted JavaScript game framework for game jamming, creative coding, prototyping, and beyond.\n\nThe development pipeline is based on the Web browser and JavaScript, but the code is portable and can target multiple\nplatforms - Web, major desktops (macOS, Linux, and Windows), and mobile (Android and iOS).\n\nIt is a fun way to prototype and create games.\n\n_Collider.JAM_ conceals rough JavaScript edges,\nturning development into a joyride.\nIt is a pleasant way to learn JavaScript,\nsince you don't have to deal with\nHTML, DOM, CSS, and MVC frameworks.\n\nIt is a perfect tool to unlock your creativity\nand deliver the next great game.\n\nInstallation intructions are available\n<a href=\"#.install\">here</a>, the fastest way to install is:\n\n    npm install -g collider.jam\n\nTo start, check out\n[Getting Started](#.getting-started).\n\nThe design of the framework is explored in\n[Design section](#.design)\n\nCollider.JAM keeps everything in the right place,\nso it is crucial to know the structure.\nInvestigate [the root node](#./).\n\nAlso, check out useful [tips](#.tips).\n\nAnd [Start Jamming](#.start-jamming).\n\n<hr>\n\n<div style=\"font-size: 110%;\">\n[Source Code](https://github.com/invider/collider.jam)\n| [Jamming Card](http://collider.land/data/jamming-card.pdf)\n| [Collider.JAM](http://collider.land)\n| [Collider Labs](http://colliderlabs.com)\n</div>\n\n<hr>\n\n","kind":"page","id":1066,"path":"intro"},"design":{"name":"Design","order":"3","body":"*Collider.JAM* is a highly opinionated framework.\n\n=== Do Not Fixate on Features\n\nMost of the game frameworks and engines out there\nare fixated on features.\nUsually, you can find a long list of features\nshowing off on their landing page.\nHowever, feature creep prevents a good design.\n\nAnd Collider.JAM is not about features.\n\nYou don't actually need a lot of features to create most of the games\n(including indie masterpieces).\nAll you need is the ability to load resources,\ndraw simple shapes, images and text, play some sounds,\nand accept user input. Collider.JAM delivers these features\nand many more in a convenient package.\nWith none or minimum setup, configuration and other boilerplate.\n\n\n\n=== Unique\n\nIn the crowded game tooling world,\nit is really hard to find a unique tool.\nAll mainstream frameworks and engines\nborrow features from one another\nand any given feature can be found\nin multiple products.\n\nSo it seems strange to claim that something\nis unique in such saturated market.\n\nBut only in the feature-driven world.\n\nWhen we are talking about indie game development,\nthere are not so many features you actually need.\nSo it shouldn't be about the features,\nbut rather how those features are\norganized and accessed.\n\nThe differences in tooling and development pipeline\ncan have a huge impact on the development flow\nand productivity.\nNeatly selected and organized features\ncan provide the clarity necessary\nfor creative process.\nYou can't be creative while strugling\nwith complex feature-rich technology.\n\n_There is nothing new in Collider.JAM._\n\nHowever, a set of carefully selected\nand orthogonal features and the way\nthose features are organized\nis what makes Collider.JAM so unique.\n\nMost of today's game development frameworks and tools\nlook like clones of the powerhouses\nof the industry.\nBoth Unity and Unreal are highly successful\nengines offering a proven development\nmodel. It is based on IDE-like editor\nwith higly sophisticated tabs and menues, \nand a rich ecosystem of classes and plugins.\nNo woner other tools try to capitalize\non Unity/Unreal success by emulating their approach.\n\n_Collider.JAM is nothing like that._\nIt's development approach is different.\nMore lightweight and less intrusive.\n\nIt's not better or worse...\nIt's just an alternative to existing mainstream.\n\nIt provides a different feel when you develop,\nbuild, debug and playtest your game.\nIt might seem unusual at first,\nbut you will experience a true Zen,\nonce you'll get the power of jamming.\n\nAnd in the world where all tools\nare merging and starting to look\nlike each other.\nA fresh look might be a good thing.\n\n\n\n=== Coming from Game Jams\n\nCollider.JAM has been conceived after\nour participation in multiple game jams.\n\nSo creativity, hyper-focus and prototyping speed\nare the most appreciated qualities.\nGame jamming inspires innovation and suggests\na particular approach in development.\nThat approach has enourmous influence\non Collider.JAM design.\n\n\n\n=== Choose simplicity over efficiency\n\nThere are number of opinionated choices in Collider.JAM design.\n\nAmong them are:\n\n* Zero dependencies to keep it lean and consistent\n* Everything is placed in a single tree hierarchy\n* Everything can be accessed by moving up and down that hierarchy\n* A project folder structure and names are reflected in Collider.JAM hierarchy\n* Resources are loaded, placed and named automatically\n* You manipulate with plain JavaScript objects following some conventions\n* The scope is augmented with core structures and functions to simplify the access\n* An object place in the tree determines behavior\n* Core names are short and cryptic to reduce the noise\n* Skip the boilerplate\n* Use convention over configuration\n* Autolink everything - there is no need for implicit import/export in Collider.JAM\n* Keep iteration cycles as short as possible\n\nApplication of those principles throughout the whole system\nis what makes Collider.JAM approach so unique\nand very suitable for rapid game prototyping, game jamming and hackathons.\n\n\n\n=== Collider.JAM Ring\n\nThe core of the framework is the Ring.\n\nIt is responsible for the framework\nboot and scene construction.\n\nOnce everything is loaded and binded\ninto a single scene, it starts the game loop\nto evolve the scene.\n\nThe Ring is contained within a file called\ncollider.js and it is actually the only\nfile needed to be included in HTML.\n(Not that you have to bother with\nsuch stuff - collider is providing\nor generating a proper index.html\nfile for you.)\n\nOnly the most essential definitions\nand neccessary boilerplace are included.\nEverything else is loaded and mixed in\nas part of provided or optional mixes.\n\n\n\n=== Everything is in the Mix\n\nA *mix* is a virtual file system that represents\na scene graph and all accessible resources.\n\nCompared to a traditional scene graph\nwhere only game entities are placed and structured,\na *mix* contains every bit of a game.\nAll resources like images and sound,\nstandard libraries and prototypes,\ngame entities and configurations -\nall that is placed in the mix somewhere.\n\n\n\n=== Everything is in it's right place...\n\nMix is a virtual file system because\nevery game object is placed in a tree-like\nstructure. And that placement can determine\nthe properties and behavior of that object.\n\nPlacing an object in _/lab_ makes it alive,\nproviding that the object has functions\n_evo(dt)_ and draw() to manifest it's\nbehavior and visual appearance.\n\nObjects placed in _/dna_ are considered to be\nconstructors and factories. We place objects\nin _/dna_ to be able to spawn them later.\n\nObjects in _/trap_ can react on system-wide events\nlike start of the game, key press or mouse move.\nDeclare a function spaceDown() and place it in trap:\n\n     /trap/spaceDown.js\nIt will be called every time the _Spacebar_ is pressed.\n\n\n\n=== Node is just an Object\n\nWhen objects are loaded and placed as nodes in the mix,\nthere is nothing speciall going on.\nThese are still plain simple JavaScript objects.\nYou don't have to extend a Node prototype or do anything like that.\n\nOnly group nodes in the tree are considered special\nand should follow conventions defined in a Frame prototype.\nAny JavaScript object can be added as a leaf with Frame.attach() method.\nThe only effect on the object itself is some special properties\nthat will be specified. Like a link to the parent node.\nBut there could be other flags, all starting with underscore.\n\n\n\n=== Resources are already there\n\nIn _Collider.JAM_ you spend minimal time managing resources.\nJust place the files in _/res_ folder of your _mod_\nand you have them available in the game.\nThe convention is that resources are named after their\nfile names without extention.\n\nSo place an image into res:\n    _game.mod/res/hero.png_\nAnd it can be accessed as _res.hero_ and is going to be\njust a standard JS HTMLImageElement.\n\n\n\n=== A node in /lab lives and evolves\n\nThis is a crucial element of Collider.JAM design.\n\nTo create a game entity, you don't have to extend from any prototype,\nuse factory or do any other special form of construction.\n\nYou can place an object directly in /lab, implement\nseveral convention methods, and it will be alive.\n\nJust place in _/lab/circle.js_:\n\n    let x = rx(.2)\n    let y = ry(.5)\n\n    function evo(dt) {\n        x += 50 * dt\n        y += 15 * dt\n    }\n\n    function draw() {\n        stroke(.6, .5, .5)\n        cirlce(x, y, 50)\n    }\n\nRun that mod with Collider.JAM and you will see a flying circle.\n\nNote, that we don't have to do any form of import or export anywhere.\nCollider.JAM does all the magic of loading, setting up and linking\nall game components and resources in a single tree.\n\n\n\n=== File system folders are reflected in the mix\n\nAll files in a game project folder are loaded\nand placed in the tree according to their position\nand names on the file system. \n\nSo, a file in\n\n    game.mod/dna/mob/ScaryMonster.js\nWill be available anywhere in that mod as:\n\n    dna.mob.ScaryMonster\nThe mod file structure is reflected on the mix.\n\nMultiple mods and fixes are loaded at the root to create\na running mix. Since any mix needs all kind\nof standard features.\n\nUsually, a mix loads a bunch of fixes\nlike _fix_, _lib.fix_ and _hud.fix_ to include\nsome standard Collider.JAM features.\n\nAlso, a bunch of development mods are included\nfor convenience - such as console.mod,\ninspector.mod and help.mod. But these\nare not loaded at the root of a mix,\nbut go into a /mod node.\n\n\n\n=== Each mod is a mini-game\n\nEach mod repeats the root structure.\nE.g. it has /res, /dna, /env, /lab, /trap...\n\nSo any mod can have it's own event handling,\nresources and entities.\nIt is a little world that can run isolated\nfrom other parts of the app.\n\n\n\n=== These Strange Cryptic Names\n\nThe core names in Collider.JAM are short and cryptic.\nThis is by design.\n\nSince these names are in the center of any mix,\nthey will be used countless times.\nThere is a common misconception that long descriptive\nnames are reducing cognitive load a programmer has to\ndeal with to understand the code. And while it might\nbe true to a rarelly used parts, it is not so\nwhen we are considering the core of the system.\n\nThe core is used so often, that short and cryptic names\nare actually reducing the cognitive load.\nYou'll learn the meaning of all terms and shortcuts eventually.\nBut the result is clean and simple code with minimum noise.\n\nHere we are exploiting decades of UNIX tradition.\nAll these /bin, /etc, /home and /var are not that\ndescriptive, but very easy to work with, considering\nyou typing them hundred times a day.\n\nThe oppositve view can be found in Windows with\nan ugly and uncomprehensible \"Program Files\" folder\n(you can't even type that in console without\ntouching Shift and escaping the space!).\n\nWe prefer the former approach. It is less to type.\nIt is simpler. It is much cleaner.\n\n\n\n=== The most used stuff is already in scope\n\nAll core functions and nodes of Collide.JAM\nare available directly in scope.\n\nSo instead of heavy object-oriented constructions like:\n\n    const a = Math.sin(fi)\n    \n    console.log('draw a line')\n    ctx.moveTo(100, 100)\n    ctx.LineTo(200, 100)\n\n    console.log('draw an image')\n    const img = loader.load('hero.png')\n    ctx.drawImage(img, 0, 0, 64, 64)\n    \n\nIn Collider.JAM you can say:\n\n    const a = sin(fi)\n    log('draw a line')\n    line(100, 100, 200, 100)\n\n    log('draw an image')\n    image(res.hero, 0, 0, 64, 64)\n\nMany simple operations are just straighforward calls\nto functions or direct access to mod nodes in scope,\nlike res, dna, lab, trap,  _ (current mod), _$ (root mod) etc.\n\nThat voodoo magic is possible because of the clever\ntricks Collider.JAM performs while loading the mix.\n\n\n\n=== Inspiration\n\nNothing is really new in this industry,\nand we always build our software\non the foundation and experience\nof brave pioneers who have already\nexplored and developed inovative ideas.\n\nSome of these ideas have blowed the software\nindustry by storm (like Java or Docker).\nSome took decades to build up\n(like JavaScript or Functional Programming).\nSome never got into the mainstream... Yet.\n\nBut these ideas are never really gone.\nSometimes they require the right time and place to blossom.\nAnd they can stay dormant for decades until\nsomebody take them, rethink them,\nand build a totally new revolutionary product.\n\nThe Convention over Configuration approach\nhas been used for years in many web frameworks.\nRuby on Rails is an inspiration and example of simplicity\nyou can reach by applying these principles.\n\n<a href=\"https://processing.org\">Processing</a>\nand a cool JavaScript library called\n<a href=\"https://p5js.org/\">p5js</a>\nwere true inspiration in the way\n_Collider.JAM_ scope is organized.\n\nLua-based <a href=\"https://love2d.org/\">LÖVE</a>\nis a perfect example of minimalistic\napproach in game framework design.\n\nIn general, UNIX philosophy played a significant role\nin _Collider.JAM_ architectural style.\n\nMinimalistic but conceptually-rich\nPlan 9 and Inferno operating systems (Bell Labs/Lucent)\nwere guiding stars in consistent and lightweight\nsystems design. Definitely, not a source of features\nfor a game framework per se,\nstill an infinite source of inspiration\nand iconic example of superb engineering.\n","kind":"page","id":1067,"path":"design"},"hud":{"name":"HUD","tags":"hud, widgets, gadgets, ui","body":"The _HUD_ is a user interface system included in Collider.JAM.\n\nYou have to spawn dna/hud/Hud in your _lab_.\nThat is the main UI object, that handles all events. \n\nFirst drop some lab/background.js:\n\n    const Z = 0\n\n    function draw() {\n        background(.5, .1, .1)\n    }\n<hr>\n\n\nThen, setup the hud in setup.js:\n<hr>\n    let id = 1\n    let sx = 100\n    let sy = 100\n\n    function spawnLabel() {\n        const label = lab.hud.spawn('hud/gadget/Label', {\n            name: 'label' + id++,\n            x: sx,\n            y: sy,\n            text: 'Collider',\n        })\n        sys.augment(label, dna.hud.trait.Draggable)\n        label.setStyle('title')\n\n        sx += 40\n        sy += 40\n    }\n\n    function setup() {\n        log('hidding')\n\n        lab.spawn(dna.hud.Hud, {\n            name: 'hud',\n        })\n\n        lab.hud.spawn(dna.hud.gadget.Button, {\n            name: 'button1',\n            text: 'Click Me!',\n            x: rx(.5) - 100,\n            y: ry(.5) - 20,\n            w: 200,\n            h: 40,\n\n            onClick: function() {\n                spawnLabel()\n            },\n        })\n\n    }\n\n<hr>\n\n\n<span class=\"metaSection\">Troubleshooting</span>\n\n*Custom components are not reacting on mouse click.*\n\nIt can be the component is not marked as __sizable.\nIt happens when it doesn't have x,y or w,h set when attached.\nSet defaults in constructor to fix that.\n\n","kind":"page","id":1068,"path":"hud"},"install":{"name":"Installation","body":"The *Collider.JAM* distribution is available\nthrough <a href=\"https://npmjs.com\">npm</a>\nIt can be installed from npm repository,\nor directly from github.\n\nIt should work on any mainstream operating system\nwith NodeJS support - macOS, Windows\nand all major distributions of Linux.\n\nTo install collider.jam,\nopen a terminal and type:\n\n    npm install -g collider.jam\n\nThis command installs globally the latest collider.jam CLI\nfrom npm repositories. \n\nYou can also install the latest stable\nrelease from the github repo:\n\n    npm install -g https://github.com/invider/collider.jam.git\n\nThat would include the latest features.\n\nAfter the installation is complete, check the version:\n\n    jam version\n\nAnd the list of available commands:\n\n    jam help\n\n<h2>Uninstall</h2>\n\nTo uninstall _Collider.JAM_ run:\n\n    npm uninstall -g collider.jam\n","kind":"page","id":1069,"path":"install"},"koans":{"name":"Koans","tags":"intro, start, design, tips, philosophy","body":"_Everything is in its right place_\n\n_A node in /lab lives and evolves_\n\n_A node in /dna can be spawn_\n\n_It's just plain js objects and some conventions_\n\n_File system folders are reflected on the scene_\n\n_Methods init(), evo(dt) and draw() is all you need for en entity_\n\n_Events are trapped in /trap_\n\n_Know your scope_\n\n","kind":"page","id":1070,"path":"koans"},"mixes":{"name":"Mixes","tags":"jam, collider.jam, intro, start, game, examples, samples, code, snippets","body":"<span class=\"metaSection\">Collider.JAM Core Mixes:</span>\n\n    - <a href=\"https://github.com/invider/collider.mix\">collider.mix</a> - collider.jam core mods\n    - <a href=\"https://github.com/invider/collider-dev\">collider-dev</a> - collider.jam development tools\n    - <a href=\"https://github.com/invider/collider-boot.mix\">collider-boot.mix</a> - samples and patches for bootstrap\n\n<span class=\"metaSection\">Explore</span>\n\nYou can explore variety of open-source games\nand samples created with Collider.JAM:\n\n    \n    - <a href=\"https://github.com/invider/bits.mix\">Bits Mix</a> - various code snippets\n    - <a href=\"https://github.com/invider/hello-collider-impact.mod\">Planet Impact</a> - Collider.JAM Hello World source\n    - <a href=\"https://github.com/invider/game-of-life.mod\">Game of Life</a> - Conway's Game of Life implementation. \n    - <a href=\"https://github.com/invider/pong-pe.mod\">Pong</a> - a classic arcade game implementation.\n    <hr>\n    - <a href=\"https://github.com/invider/enceladus-dockyards.mix\">Enceladus Dockyards</a> - a space ship building and tactical battle simulator created for GameBoy Jam 8.\n    - <a href=\"https://github.com/invider/station-keeping.mod\">Station Keeping</a> - a local multipayer co-op space station trading and survival from Ludum Dare 46.\n    - <a href=\"https://github.com/invider/cosmic-rays-n-dnas.mod\">Cosmic Rays'n DNAs</a> - arcade from Global Game Jam 2020.\n    - <a href=\"https://github.com/invider/300-hearts-for-escape\">300 Hearts for Escape</a> - Ludum Dare 44 Entry\n    - <a href=\"https://github.com/invider/alarm-1202.mod\">Alarm 1202</a> - an educational game to learn basic arithmetics.\n    - <a href=\"https://github.com/invider/infected-island.mod\">Infected Island</a> - a survival game from 7 Day RogueLike Challenge.\n    - <a href=\"https://github.com/invider/xeno-relay-day\">Xeno Relay Day</a> - Global Game Jam 2018 Entry\n    - <a href=\"https://github.com/invider/dream-rocket-boy\">Dream Rocket Boy</a> - Global Game Jam 2019 Entry\n    - <a href=\"https://github.com/invider/ballistic-skylines\">Ballistic Skylines</a> - Ludum Dare 41 Entry\n    - <a href=\"https://github.com/invider/metro-gang.mix\">Metro Gang</a> - a strategic beat'em up from Ludum Dare 45\n    - <a href=\"https://github.com/invider/master-of-ritual\">Master of Ritual</a> - dangeon crawler from Ludum Dare 43\n\n","kind":"page","id":1071,"path":"mixes"},"pong":{"name":"Pong","tags":"start,begin,beginner,tutor,tutorial,sample,example,excercise,code,intro,arcade","body":"== Intro\n\nPong was created in 1972 by Allan Alcorn, the 2nd non-founding employee of Atari, as an exercise. Nolan Bushnell, the Atari co-founder, reasoned that an electronic version of ping-pong will be a perfect way to get familiar with arcade game development. Especially considering that a similar concept had already been implemented in Magnavox Odyssey. \n\nLittle did they know, that Pong would become a booster that brought Atari into a multi-billion corporation orbit.\n\nToday, Pong is considered to be an arcade classic.\nAlso, with its iconic gameplay, it still works as a good exercise in game development.\n\nThus, this tutorial covers all the steps necessary to implement a web-based clone of Pong with Collider.JAM and JavaScript.\n\n== Core Concepts\n\nWe need at least 3 components to implement\na viable Pong version:\n\n* a puck moved by its speed vector\n* two paddles controlled by players\n* a score counter\n\nThere is also an invisible, but nevertheless present,\nsimple physics simulation to detect the puck\ncollisions with the paddles and the edges.\n\nThe game scene is going to be implemented in a single *mod*.\n\nInside, we will place the */dna* folder to keep our prototypes.\n\n_\n> Collider.JAM has the concept of *mods*, which can represent\n> modules, plugins, scenes, levels, game layers,\n> and game states among other things.\n>\n> You can view a *mod* as a minigame with its own code,\n> structure, resources...\n> It can be the main menu or a player configuration screen,\n> or maybe a map screen.\n>\n> Usually the *mod* structure is determined\n> by the corresponding directory.\n> A *mod* has it's own *dna*, *lab*, *trap* and other folders.\n_\n\n\nThere are going to be only two prototypes in */dna* - Puck and Paddle.\n\nA single object in */lab/score.js* will represent the score indicator.\nThe indicator is a singleton existing for the whole game lifespan.\nSo instead of putting it in *dna* and creating in _setup()_,\nwe just put it directly in *lab*.\n\nThe */res* folder will keep all sound effects. We don't need any bitmap or vector graphics in this tutorial, since everything is drawn by code.\n\nThe *trap* folder keeps event handlers.\nControl events like _keyDown_ and _keyUp_ as well as custom events like _newGame_ and _spawnPunk_ are trapped here.\n\n> Note, that a file location and name are important in Collider.JAM.\n>\n> For example, there won't be any score if *score.js*\n> will be placed outside of */lab*.\n> Objects in */lab* are considered to be \"alive\".\n>\n> Puck and Paddle MUST be placed in */dna* for similar reason.\n> Constructors and factories are expected to be in */dna*.\n> Constructor names MUST be capitalized - that is how\n> Collider.JAM understands it deals with constructors.\n>\n> So be careful with the file and object naming and placement.\n> It often affects the object's behavior.\n\n\n== Foundation\n\nCreate a folder named _pong.mod_.\nThe _.mod_ extension is necessary for Collider.JAM\nto determine the root of the project.\n\n\nOnce created, you can _cd_ into it:\n\n    cd pong.mod\n\nAnd run the empty mod with:\n\n    jam -d\n\nThe <i>-d</i> flag tells Collider.JAM to enable development and debug features.\n\nIt is very useful in development.\n\n_\n> Make sure you have _Collider.JAM_\n> [installed](#.install)\n> before starting this tutorial.\n> The easiest way is to run \"npm i -g collider.jam\"\n> in a terminal emulator.\n>\n> Collider.JAM makes all kind of JavaScript magic\n> to hide the boilerplate and make development smooth.\n_\n\n\n== Puck\n\nThis prototype is located in _/dna/Puck.js_ and implements the puck behavior and visuals.\n\n\n=== defaults\n\nLet's declare some constants and default values:\n```\n// dna/Puck.js\n\nconst MAX_SPEED = 1500\nconst HIT_ACCELERATION = 1.07\n\nconst df = {\n    x: 0,\n    y: 0,\n    r: 10,\n    hold: 1,\n    speed: 100,\n}\n```\n\n\n=== constructor\n\nWe'll use _class_ syntax to declare our prototype.\nIt's concise and works well except for a few special cases:\n```\n// dna/Puck.js\n// ...\n\nclass Puck {\n\n    constructor(st) {\n        augment(this, df, st) // set default and init values\n\n        // select a random direction\n        let fi = ( rnd() * .4*PI - .2*PI ) - ( PI * floor(rnd(2)) )\n        this.dx = cos(fi)\n        this.dy = sin(fi)\n    }\n}\n```\nThe _augment()_ function is provided by Collider.JAM and augments the target object with values from source objects.\n\nWe assign default values from *df* first and init values form *st* later (so the init values can override the default ones).\nIt is a common idiom in Collider.JAM object initialization - declare an object with default values, pass an object with init values, and then augment the constructed object with both.\n\n\n=== behavior\n\nThe puck needs the _evo(dt)_ function to determine its behavior and the _draw()_ function to define its look.\n\nThe _evo(dt)_ is the most complex one:\n```\n    evo(dt) {\n        if (lab.score.countdown) return // the counter is still on\n\n        // we need a hold timer to prevent the puck\n        // from moving the moment it's been created\n        if (this.hold > 0) {\n            // hold on\n            this.hold -= dt\n            // start the movement when the time is up\n            if (this.hold <= 0) lib.sfx(res.sfx.slide, .5)\n            return\n        }\n\n        // save previous x/y\n        const px = this.x\n        const py = this.y\n\n        // move\n        let touched = false\n        this.x += this.dx * this.speed * dt\n        this.y += this.dy * this.speed * dt\n\n        // detect edge collisions\n        const r = this.r\n        if (this.x < r) {\n            // hit the left edge\n            kill(this)\n            trap('score', 'right')\n        } else if (this.x > rx(1)-r) {\n            // hit the right edge\n            kill(this)\n            trap('score', 'left')\n        }\n        if (this.y < r) {\n            // reflect from the top edge\n            this.y = r\n            this.dy *= -1\n            touched = true\n            lib.sfx(res.sfx.boing, .2)\n        } else if (this.y > ry(1)-r) {\n            // reflect from the bottom edge\n            this.y = ry(1)-r\n            this.dy *= -1\n            touched = true\n            lib.sfx(res.sfx.boing, .2)\n        }\n\n        // detect collision with paddles\n        const puck = this\n        lab._ls.forEach(e => {\n            if (e.touch && e.touch(puck)) {\n                touched = true\n                this.speed = min(this.speed * HIT_ACCELERATION, MAX_SPEED)\n            }\n        })\n\n        if (touched) {\n            // move back to previous coordinates\n            this.x = px\n            this.y = py\n        }\n    }\n```\n\nFirst, we need two guards to prevent evolution from happening while the game countdown is still on or we are holding the puck.\nIf the countdown value in _lab.score_ object is anything, but 0, we skip the evolution. We let the _score_ object itself handle the countdown behavior.\n\nThe _hold_ value tracks the time left to keep the puck frozen - we don't want to launch the puck the moment it's created. We have to reduce the timer until it's 0 or less, then we play a sound effect and the puck evolution begins.\n\nThe evolution itself has two main components - movement and collision detection.\n\nWe preserve coordinates before the movement to jump back in case of collision. That way we can prevent the tunnel effect through the edges and paddles. It is a crude and not exactly precise approach, but it works fine in our case.\n\nThe collision detection itself is split into two phases - collision with the edges and collision with the paddles.\n\nThe edge collision is handled by Puck locally. Notice the difference between the left/right and the top/bottom edges. For the top and the bottom edge we have to reflect the puck vector over the Y-axis:\n\n     this.dy *= -1\n\nand play the boing sound effect.\n\nIn the case of the left or the right edge, we kill the puck and score the corresponding side. The _score_ logic is moved out into an external trap. It is a game-level event and it is a good practice to keep it in a separate function instead of being hidden in Puck.\n\nThe collision detection with paddles is different since it is handled mostly by the paddles.\n\nWe iterate over all nodes in _/lab_ and find the ones with *touch* (we assume that *touch()* will be a function here).\nIt means the *touch()* function MUST be defined on all entities the puck can touch (paddles in our case).\n\nWhen the paddle hit is detected, we raise the _touched_ flag and increase the speed. The puck movement vector reflection is done in the paddle itself since it depends on the place on the paddle we hit.\n\n\n=== rendering\n\nThe _draw()_ procedure of Puck is pretty simple - we just have to draw a circle.\n\n```\n    draw() {\n        lineWidth(2)\n        stroke(.55, .5, .5)\n        circle(this.x, this.y, this.r)\n    }\n```\nTo setup the drawing, we set the line width in pixels and the stroke HSL color.\nThen we call the _circle()_ function to draw the circle.\n\n\n\n== Paddle\n\nThis *class* represents the left and the right paddles.\n\nIts _draw()_ and _evo(dt)_ functions are quite simple.\n\nThe _touch()_ method is the most complex one and handles the collision detection with the puck. It is also responsible for the puck movement vector reflection according to the _REFLECT\\_VECTORS_ table.\n\n\n=== defaults\n\n\nFirst, we declare the *df* default object with Paddle width and height.\nThen we declare the _REFLECT\\_VECTORS_ table - it contains the angles to the normal vector for each Paddle contact area.\n```\n// dna/Paddle.js\n\nconst df = {\n    w: 15,\n    h: 100,\n}\n\nconst REFLECT_VECTORS = [\n     .25,\n     .20,\n     .15,\n     .10,\n      0,\n      0,\n    -.10,\n    -.15,\n    -.20,\n    -.25,\n]\n```\n\n\n=== constructor\n\n```\nclass Paddle {\n\n    constructor(st) {\n        augment(this, df, st) // set default and init values\n        this.actions = {}     // a storage object for up and down actions\n        this.speed = ry(1)    // speed = screen width in pixels\n    }\n\n    init() {\n        this.left = (this.name === 'left')\n    }\n}\n```\n\nThe constructor augments default and init values,\ncreates a holder for actions and defines the speed.\n\nThe speed is defined as screen height in pixels/second.\nWhich means a paddle can travel from top to bottom in one second.\n\nThe _init()_ function checks the name of the paddle\nand raises the _left_ flag if it is 'left'.\n\nWe can't place that in the constructor, since the object\nmight not be named yet during the construction.\nThe _init()_ is called by Collider.JAM after the node\nis named and attached to the scene tree.\n\n=== collisions\n\nThis is where the most of the math happening:\n```\n    rect() {\n        return {\n            x1: this.x-this.w/2,\n            y1: this.y-this.h/2,\n            x2: this.x+this.w/2,\n            y2: this.y+this.h/2,\n        }\n    }\n\n    touch(puck) {\n        const { x1, y1, x2, y2 } = this.rect()\n        const x = this.left? x2 : x1\n        const d = lib.math.distanceToSegment(puck.x, puck.y, x, y1, x, y2)\n\n        if (d < puck.r) {\n            // calculate normal vector components\n            const nvec = lib.math.normalVector(x, y1, x, y2) \n            // normal vector is inverted for the left paddle\n            // |           |\n            // |-->  o  <--|\n            // |           |\n            const nx = this.left? -nvec[0] : nvec[0]\n            const ny = this.left? -nvec[1] : nvec[1]\n\n            // calculate relative vertical hit point\n            const dy = puck.y - this.y\n\n            // reflection angles are inverted for the left paddle\n            const dir = this.left? -1 : 1\n            let fi = atan2(ny, nx)\n            const zone = limit(floor((dy + 50)/10), 0, 9)\n            fi += dir * REFLECT_VECTORS[zone] * PI\n\n            puck.dx = cos(fi)\n            puck.dy = sin(fi)\n\n            lib.sfx(res.sfx.boing, .3)\n            return true\n        }\n        return false\n    }\n```\n\n\nThe _rect()_ is a utility function that calculates the top-left and the bottom-right coordinates.\n\nThe _touch(puck)_ function accepts the puck and tries to detect collision.\n\n\nThe collision is determined simply by calculating the distance between the puck center and the active segment of the paddle (the one facing the game field). If the distance is less than the puck radius, we consider the collision test positive.\n\nOnce the collision is detected, we calculate the angle of the normal vector. Then we calculate the impact zone and use it to determine the angle of the reflection vector to the normal vector.\n\nThe reflection angle is used to set the new movement vector for the puck.\n\n\n=== behavior\n\nHere the paddle x coordinate gets dynamically adjusted.\nThat way, the game continues to function properly even when the browser\nwindow size is changed.\n\nThe second part of the function takes care of the movement\nif the corresponding action is triggered.\n```\n    evo(dt) {\n        // adjust x coordinate\n        if (this.left) this.x = rx(.05)\n        else this.x = rx(.95)\n\n        // move according to pressed keys\n        if (this.actions.up) {\n            this.y -= this.speed * dt\n            if (this.y < this.h/2) this.y = this.h/2 // top edge\n        }\n        if (this.actions.down) {\n            this.y += this.speed * dt\n            if (this.y > ry(1)-this.h/2) this.y = ry(1)-this.h/2 // bottom edge\n        }\n    }\n```\n\n=== rendering\n\nThe _draw()_ just fills a rectangle with HSL-specified color:\n```\n    draw() {\n        save()\n        translate(this.x, this.y)\n\n        fill(.6, .35, .45)\n        rect(-this.w/2, -this.h/2, this.w, this.h)\n\n        restore()\n    }\n```\nWe use _translate()_ to get into the paddle coordinate system (with 0:0 at the paddle center). That is why we MUST _save()_ the context and _restore()_ it afterward.\n\n\n=== movement control\n\nThe functions _up()_ and _down()_ are used by keyboard event traps to trigger the movement:\n```\n    up(active) {\n        this.actions.up = active\n    }\n\n    down(active) {\n        this.actions.down = active\n    }\n```\n\n\n\n== Control\n\nKeys are traped by the following 2 functions in 2 files:\n\n```\n// trap/keyDown.js\n\nfunction keyDown(e) {\n    switch(e.code) {\n        case 'Escape':\n            trap('newGame')\n            break\n\n        case 'KeyW': case 'KeyA': lab.left.up(true); break;\n        case 'KeyS': case 'KeyZ': lab.left.down(true); break;\n        case 'ArrowUp':   case 'PageUp':   lab.right.up(true); break;\n        case 'ArrowDown': case 'PageDown': lab.right.down(true); break;\n    }\n}\n```\n```\n// trap/keyUp.js\n\nfunction keyUp(e) {\n    switch(e.code) {\n        case 'KeyW': case 'KeyA': lab.left.up(false); break;\n        case 'KeyS': case 'KeyZ': lab.left.down(false); break;\n        case 'ArrowUp':   case 'PageUp':   lab.right.up(false); break;\n        case 'ArrowDown': case 'PageDown': lab.right.down(false); break;\n    }\n}\n```\nHere we access the paddles directly through the lab with _lab.left_ and _lab.right_.\n\nWe raise movement flags in _keyDown()_ and reset them in _keyUp()_.\n\n\n\n== Game Events\n\n\n=== new game\n\nThe _\"new game\"_ event is traped by:\n```\n// trap/newGame.js\nfunction newGame() {\n\n    // reset the score\n    env.score = {\n        left: 0,\n        right: 0,\n    }\n\n    // move paddles to the center\n    lab.left.y = ry(.5)\n    lab.right.y = ry(.5)\n\n    // replace the puck\n    kill(lab.puck)\n    trap('spawnPuck')\n\n    // show the start timer\n    lab.score.countdown = 3\n    lab.puck.hold = 0 // puck shouldn't wait\n}\n```\nHere we do the initial setup and object spawning. It is triggered by _setup.js_ when the game starts and also fired manually by pressing the Escape key.\n\n\n=== score\n\nThe following trap counts the score:\n```\n// trap/score.js\nfunction score(player) {\n    env.score[player] ++\n    trap('spawnPuck')\n    lib.sfx(res.sfx.score, .8)\n}\n```\nWe use a global-level node *env* to keep the *score* object. The player argument can be _left_ or _right_. And we rise the score accordingly.\n\n=== spawn puck\n\n_spawnPuck_ creates a new Puck in _/lab_:\n\n\n```\n// trap/spawnPuck.js\n\nfunction spawnPuck() {\n    lab.spawn('Puck', {\n        name: 'puck',\n        x: rx(.5),\n        y: ry(.5),\n        speed: ry(.8),\n    })\n}\n```\nThe puck is created by the _spawn()_ function in *lab*.\nWe pass a DNA name and an init object there.\n\nThe provided init object sets the name, the speed, and the puck's coordinates. With screen-relative functions _rx()_ and _ry()_ we place it in the middle of the screen.\n\n\n== Setup\n\n_setup.js_ contains the function to setup the game before it starts:\n\n```\nfunction setup() {\n    trap('newGame')\n}\n```\nIt just traps the new game event.\n\n\n\n== Source Code\n\n\nFull source code is\n[available on GitHub](https://github.com/invider/pong-ce.mod).\n\n\n\n== Ideas for Improvement\n\nThere are multiple directions you can go from here.\n\nYou can introduce more variety into the gameplay by providing some kind of random powerups to modify game properties - like increase paddle speed or size, slow down the puck, etc...\n\n\nYou can improve visuals by adding bitmapped graphics or particle effects on collisions.\n\n\nYou can implement simple AI to be able to play against the computer.\n\n\nYou can add the ability to play over the network.\n\n\nThere might be other interesting ideas waiting to be implemented. Even the old and familiar gameplay from Pong can be rethought and refreshed.\n\n\n== Summary\n\nCollider.JAM makes a good job of hiding complexity\nand boilerplate.\n\nYou don't need any imports and exports.\nYou don't bother yourself with a bunch of load() calls to obtain necessary resources.\nYou don't extend any of the framework prototypes\nin order to place something on the screen -\nany plain JS objects will do the trick.\n\nYou just name the functions and place the files in appropriate folders according to Collider.JAM conventions. And everything is just magically mixed together.\n\nThat is the magic of Collider.JAM!\n\nAlso notice how straightforward drawing and other common operations like _sin()_, _cos()_, _trap()_, _augment()_, and _kill()_. They are just functions available from the global context. No need to access those features from the bunch of incomprehensive utility objects like Context and Math. They are just there under your tips when you need them.\n\nIt makes JavaScript almost as clear and straightforward as BASIC. The code looks like a polite conversation with the framework instead of a rude arguing with the object system.\n\n\n\n\n\n\n\n\n\n\n\n\n","kind":"page","id":1072,"path":"pong"},"releases":{"name":"Releases","body":"=== 0.0.10-DR9 2020-11-24\n\n>>>\n\n[*] $ is redefined in the mod scope to shaddow the global one\n\n[+] rndo() 1/0 random value multiplicator\n\n[+] game time tracking in env.time\n\n[+] empty and sample mod prototypes\n\n[*] defer() is applied in kill() by default\n\n[+] included 'jam ca' shortcut to clean all\n\n[*] help and readme updated\n\n[+] pong tutorial\n\n[+] ``` code block support in markdown\n\n[-] onSpawn() double-call issue is fixed\n>>>\n\n\n----\n=== 0.0.9-DR8 2020-10-08\n\n>>>\n[+] jam new command with a bunch of prototypes ready for creation\n\n[*] local package.json/node_modules are used by default unless --global is specified\n\n[+] improved help coverage\n\n[+] console commands to navigate the mix - ls, cd, cmd, kill, select, exit\n\n[*] moved kill() and killAll() to LabNode\n\n[-] fixed missing module.path problem in jam help\n\n[*] improved SlideCamera\n\n[*] run setup() on all nodes in /lab on start\n\n[+] multichannel sfx is enabled by default in standard sfx()\n\n[+] math.normalVector() implementation\n\n[+] mutable array-based 2d vector in /lib\n\n[+] immutable object-based 2d vector  in /lib\n\n[+] custom shape node within(x, y) support in pick() and hud\n\n[+] require() implemented\n\n[+] gtrap() to trap globally from included mods\n\n[+] defer() function to schedule function calls\n\n[+] Frame.flatMap() implementation\n\n[+] on...() events handling in /lab\n\n[+] onSpawn() now called for all spawned nodes\n\n[+] select() and selectOne() included in global scope\n\n[+] support of deep selection by instanceof, name and id in select/selectOne\n\n[+] support of randomly placed * patters in select/selectOne path\n\n[-] fixed mouse event button parameter\n\n[-] fixed bearing() function\n\n[-] isMutable() retired - no actual use for it anyways\n>>>\n\n\n\n----\n=== 0.0.8-DR7 2020-08-19\n\n>>>\n[+] major help enhancements\n\n[*] optimized help loading speed\n\n[*] updated help style\n\n[+] list support in help markdown\n\n[+] links support in help markdown\n\n[+] embedded images support in help markdown\n\n[+] headers support in help markdown\n\n[+] SlideCamera smooth zooming and lookAt()\n\n[+] _circular and _centered flags\n\n[+] assert() with type refines is included in scope\n\n[*] /res, /lib and /dna supplements for boxes\n\n[+] onAugment() and onSupplement() handlers\n\n[-] fixed spacing in comments meta\n\n[-] fixed help metadata for autoexported constructors\n\n[*] included mouse/touch event handling for non-sizable components\n\n[-] fixed LabFrame.pick() bug\n\n[-] fixed event data in mouseDown\n\n[-] fixed event coords transformation for zoomable nodes\n>>>\n\n\n\n----\n=== 0.0.7-DR6 2020-07-04\n\n>>>\n[+] jsDoc-style type metadata extraction\n\n[+] autocomplete end-points with help meta data on jam server\n\n[+] kinetix animation subsystem\n\n[+] mono-file playground.mod editor on F7\n\n[+] Frame find(), filter(), reduce(), reduceRight(), applyAll() methods\n\n[+] basic-style print(), input(), say(), ask() and cls() in scope\n\n[+] sleep() for convenient async in scope\n\n[+] sys.extend() function for shallow augmentation\n\n[**] automatic fast boot in debug mode\n\n[+] postBoot trap\n\n[+] Z-ordering for mods\n\n[+] keepFollowing and pinOnTarget flags on SlideCamera\n\n[+] dynamic function patching of spawned objects on file update\n\n[+] select, one, clear, kill and sync console commands\n\n[-] fixed unit path resolution on Windows\n\n[-] fixed touch capturing and end traps\n\n[-] fixed hidden and disabled components handling on the HUD\n\n[**] automatic skip of .hidden files on unit scans\n\n[+] manual unit include to map an arbitrary folder as a unit\n\n[+] ignored paths in mapping\n\n[+] new unit mapping scheme with map.json/remap.json\n\n[+] included default fav icons\n\n[+] sys.enableBox() helper function\n\n[**] renamed angle() to angleTo()\n\n[**] renamed targetAngle() to bearing()\n\n[**] renamed close() to closePath()\n>>>\n\n\n\n----\n=== 0.0.5-DR5 2020-06-01\n\n>>>\n[+] gif files autoload support\n\n[**] upper-case extensions\n\n[+] map.json and remap.json configurations\n\n[+] optional units and include list in the scan man\n\n[**] proper scan for mods and fixes in modules\n\n[**] run all functions in /setup and all setup** functions on startup\n\n[+] --pregen/-g option to run a pregenerated package\n\n[**] sketch packaging updated\n\n[-] width() and height() functions removed to avoid global namespace pollution\n>>>\n\n\n----\n=== 0.0.4-DR4 2020-04-28\n\n>>>\n[+] **.spawn.js entities autospawn\n\n[+] custom post-processors for **.js and **.json files\n\n[+] execute all **setup() functions on start\n\n[+] enable background by default\n\n[+] poke() and pick() support in lab frames\n\n[+] getMod() in frames\n\n[+] dynamic Z-sorting in lab frame\n\n[+] masked and ignored traps\n\n[+] get a custom random source with ability to set the seed\n\n[+] mod and lab control (pause, resume, hide, show etc)\n\n[+] run mixes in sketch mode\n\n[+] translate, scale and rotate nodes\n\n[+] mod transitions\n\n[+] flexible font() function with separate handling of fonts and sizes\n\n[+] **.ogg and **.mp3 files support\n\n[+] jam command shortcuts\n\n[+] -y/--types option to generate types metadata\n\n[**] migrated mods from collider-debug.mix to collider-dev.mix\n>>>\n\n\n\n----\n=== 0.0.3-DR3 2020-04-01\n\n>>>\n[+] new wormhole bootloader\n\n[+] jam --release flag to ignore debug dependencies\n\n[+] shuffle() array in lib/math\n\n[+] mod.disabled flag to ignore traps on mod-level\n\n[**] updated manual pages\n\n[**] improved node inspector navigation (F2)\n\n[-] fixed collider.jam module path determination (F1)\n\n[-] fixed Firefox compatibility\n\n[-] fixed Safari compatibility\n>>>\n\n\n----\n=== 0.0.2-DR2 2020-02-29\n\n>>>\n[+] help mod with metadata auto scan\n\n[+] new node inspector\n\n[+] hot code reload\n\n[+] boxes subsystem\n\n[+] alt node for in-scope values\n\n[+] extended default in-scope functions and objects\n\n[**] new module structure\n\n[-] multiple bug fixes\n>>>\n\n\n\n----\n=== 0.0.1-DR1 2019-09-27\n\n>>>\n[!] _first public release_\n\n[+] core scene structure\n\n[+] game lifecycle\n\n[+] main game loop\n\n[+] entities spawning\n\n[+] resources auto-loading\n\n[+] customized scope code evaluation\n\n[+] basic libraries including math helpers\n\n[+] rudimentary hud subsystem\n\n[+] debug tools - log, status info, console, explorer\n\n[+] web packaging\n>>>\n","kind":"page","id":1073,"path":"releases"},"start-jamming":{"name":"Start Jamming","tags":"jam, collider.jam, intro, start","body":"To join a game jam, check out <a href=\"https://itch.io/jams\">jams on Itch.io</a>. There is always something going on there.\n\nThe timeline there is a perfect tool\nfor future jam planning.\n\n<hr><span class=\"metaSection\">\n<a href=\"http://ldjam.com/\">Ludum Dare</a>\n</span>\n\nThe main online global event, gathering thousands\nof game developers twice a year.\n\n<hr><span class=\"metaSection\">\n<a href=\"https://globalgamejam.org/\">Global Game Jam</a>\n</span>\n\nThe biggest on-site jamming event.\nCheck out <a href=\"https://globalgamejam.org/2020/jam-sites\">location</a>\nin your city, or organize a new one!\n\n<hr><span class=\"metaSection\">Pre Jamming</span>\n\nJammers are usually keep warm-up session\nbefore the major events.\n\nOne week before a Ludum Dare or Global Game Jam,\nwe usually gather at some cozy place\nand discuss current technical and game design challenges.\n\nA good opportunity to evaluate your tech stack, tools\nand figure out what might be missing.\n\n<hr><span class=\"metaSection\">Checklist</span>\n\nSome things you need to check before the jam:\n\n<li>Update your software tools</li>\n<li>Install and configure what is missing</li>\n<li>Pack your stuff when jamming on-site\n<ul>\n<li>a laptop</li>\n<li>chargers for the laptop and the mobile phone</li>\n<li>headphones</li>\n<li>(optional) a gamepad</li>\n<li>paper, a pen/pensil brainstorm</li>\n<li>sticky notes, markers, tokens and anything else that helps to brainstorm</li>\n</ul>\n</li>\n","kind":"page","id":1074,"path":"start-jamming"},"terms":{"name":"Terms","body":"*mod* - a composable module, located in it's own folder. Think of it as a minigame with it's own resources, dnas, lib and trap handling.\n\n*fix* - a submodule, locatd in it's own folder. Use it to patch existing mod structure. You can 'fix' a mod with additional resources, traps, dnas etc...\n\n*unit* - a filesystem directory that contains a mod/fix/pub/patch/sample.\n\n*mix* - a set of multiple units (mods, fixes, pubs...). Usually comes as an npm package.\n\n*frame* - a group node on the scene. Supports attach/detach operations for child nodes.\n\n*dna* - a node that contains constructors, factories and prototypes of game entities.\n\n*actor* - a lifeform in */lab* with it's own representation and behavior determined by the draw() and evo(dt) functions\n\n*ghost* - an entity in */lab* with behavior, but no visual apperance - so it has evo(dt), but doesn't have the draw() function defined.\n\n*prop* - a visual entity */lab* with no behavior - so it has draw(), but no evo(dt)\n\n*lab* - a place, where all entities live and evolve. An entity is expected to have at least evo(dt) or draw() function to be present in the game loop.\n\n*trap* - a trap is a function to handle events such as key presses and mouse clicks.\n\n*cue* - a function that triggers on time or periodically.\n\n","kind":"page","id":1075,"path":"terms"},"tips":{"name":"Tips","body":"=== Use -d flag for development\n\nThe *jam -d* flag enables a lot of useful features\nfor development.\n\nWhen enabled, jam prints a lot of debug info\nin the console and extracts help metadata\nfrom the browser.\n\nSo, online help (F1) works only with -d flag.\n\n=== Use --release flag when packing for production\n\nWith *--release* flag all development features\nwill be ignored and will not be included\nin the final package.\n\n","kind":"page","id":1076,"path":"tips"},"jam-card":{"id":1077,"kind":"page","name":"Jam Card","path":"jam-card","body":"*<a href=\"#./alt/pad\">pad*</a>(gamepadId: number): Gamepad - returns the gamepad status object\n\n*<a href=\"#./alt/mix\">mix*</a>(obj1: object, obj2: object, ...): object - shallow copy all properties of passed objects into a new object\n\n*<a href=\"#./alt/augment\">augment*</a>(target: object, obj1: object, ...) - augment object by deeply copying properties from all supplied objects\n\n*<a href=\"#./alt/supplement\">supplement*</a>(target: object, obj1: object, ...) - supplement object by deeply copying missing properties from all supplied object\n\n*<a href=\"#./alt/before\">before*</a>(obj: object, functionName: string, patchFunction: function) - chain the supplied *patchFunction* before *obj.functionName*\n\n*<a href=\"#./alt/after\">after*</a>(obj: object, functionName: string, patchFunction: function) - chain the supplied *patchFunction* after *obj.functionName*\n\n*<a href=\"#./alt/chain\">chain*</a>(fn1: function, fn2: function): function - returns a chain container function that applies both functions\n\n*<a href=\"#./alt/isFun\">isFun*</a>(target: any): boolen - determines if *target* is a function\n\n*<a href=\"#./alt/isClass\">isClass*</a>()\n\n*<a href=\"#./alt/isObj\">isObj*</a>(target: any): boolen - determines if *target* is an object\n\n*<a href=\"#./alt/isString\">isString*</a>(target: any): boolen - determines if *target* is a String\n\n*<a href=\"#./alt/isNumber\">isNumber*</a>(target: any): boolen - determines if *target* is a Number\n\n*<a href=\"#./alt/isFrame\">isFrame*</a>(target: any): boolen - determines if *target* is a Frame\n\n*<a href=\"#./alt/isArray\">isArray*</a>(target: any): boolen - determines if *target* is an Array\n\n*<a href=\"#./alt/isContainer\">isContainer*</a>()\n\n*<a href=\"#./alt/isEmpty\">isEmpty*</a>(target: any | object | array): boolean - checks if the *target* object/array is empty\n\n*<a href=\"#./alt/assert\">assert*</a>(condition: boolean, message: string): boolean - assert a condition, throw exception if failed\n\n*<a href=\"#./alt/abs\">abs*</a>(n: number): number - returns the absolute value of *n*\n\n*<a href=\"#./alt/pow\">pow*</a>(n: number, p: number): number - returns *n* raised to the power of *p*\n\n*<a href=\"#./alt/sqrt\">sqrt*</a>(n: number): number - returns the positive square root of *n*\n\n*<a href=\"#./alt/min\">min*</a>(n1: number, n2: number, ...: number): number - returns the smallest of numbers\n\n*<a href=\"#./alt/max\">max*</a>(n1: number, n2: number, ...: number): number - returns the largest of numbers\n\n*<a href=\"#./alt/ceil\">ceil*</a>(n: number): number - returns the smallest integer greater than or equal to *n*\n\n*<a href=\"#./alt/floor\">floor*</a>(n: number): number - returns the largest integer less than or equal to *n*\n\n*<a href=\"#./alt/round\">round*</a>(n: number): number - returns *n* rounded to the nearest integer\n\n*<a href=\"#./alt/sin\">sin*</a>(a: number/radians): number - returns the sine of the angle *a*\n\n*<a href=\"#./alt/cos\">cos*</a>(a: number/radians): number - returns the cosine of the angle *a*\n\n*<a href=\"#./alt/tan\">tan*</a>(a: number/radians): number - returns the tangent of the angle *a*\n\n*<a href=\"#./alt/acos\">acos*</a>(n: number): number - returns the arccosine of the number *n*\n\n*<a href=\"#./alt/asin\">asin*</a>(n: number): number - returns the arcsine of the number *n*\n\n*<a href=\"#./alt/atan\">atan*</a>(n: number): number/radians - returns the arctangent of the number *n*\n\n*<a href=\"#./alt/atan2\">atan2*</a>(y: number, x: number): number/radians - returns an angle whose tangent is *y/x*\n\n*<a href=\"#./alt/rnd\">rnd*</a>(n1: number, n2: number): number - returns a pseudo-random number between [0..1] or between provided values\n\n*<a href=\"#./alt/RND\">RND*</a>(i1: number/integer, i2: number/integer): number - returns a pseudo-random integer between provided values\n\n*<a href=\"#./alt/limit\">limit*</a>(v: number, n1: number, n2: number): number - returns the *v* value limited by values of *n1* and *n2*\n\n*<a href=\"#./alt/within\">within*</a>(v: number, n1: number, n2: number): boolean - returns *true* if the value *v* is within the specified range.\n\n*<a href=\"#./alt/warp\">warp*</a>(v: number, n1: number, n2: number): number - returns a value warped within the provided range\n\n*<a href=\"#./alt/lerp\">lerp*</a>(start: number, stop: number, val: number, limitRange: boolean): number - returns a value between 0..1 extrapolated to the range between *start*..*stop*\n\n*<a href=\"#./alt/vmap\">vmap*</a>(start: number, stop: number, targetStart: number, targetStop: number, val: number, limitRange: boolean): number - map the *val* from *start*..*stop* range to *targetStart*..*targetStop* range with potential limit\n\n*<a href=\"#./alt/len\">len*</a>(x: number, y: number): number - returns the length of the vector *[x, y]*\n\n*<a href=\"#./alt/dist\">dist*</a>(x1: number, y1: number, x2: number, y2: number): number - returns the distance between two points\n\n*<a href=\"#./alt/angleTo\">angleTo*</a>(x: number, y: number): number/radians - returns the angle in radians between the vector *[x, y]* and OX\n\n*<a href=\"#./alt/bearing\">bearing*</a>(x1: number, y1: number, x2: number, y2: number): number/radians - returns the angle of direction vector from *[x1, y1]* to *[x2, y2]* in relation to OX axis\n\n*<a href=\"#./alt/$$\">$$*</a>(selector: string): array - select from root context\n\n*<a href=\"#./alt/kill\">kill*</a>(node: Node) - kill a node\n\n*<a href=\"#./alt/select\">select*</a>(selector: string): array - select from the local /lab\n\n*<a href=\"#./alt/selectOne\">selectOne*</a>(selector: string): object - select one object from the local /lab\n\n*<a href=\"#./alt/defer\">defer*</a>(fn: function) - defer a function to run after a scheduled queue\n\n*<a href=\"#./alt/on\">on*</a>(eventName: string, payload: value): value - trigger event handlers in local /lab\n\n*<a href=\"#./alt/gtrap\">gtrap*</a>(trapName: string, payload: value): boolean - root mod trap\n\n*<a href=\"#./alt/sfx\">sfx*</a>(sound: AudioClip, volume: number[0..1], panorama: number[-1..1]) - play a sound effect\n\n*<a href=\"#./alt/sleep\">sleep*</a>(t: number): Promise - sleep for *t* seconds\n\n*<a href=\"#./alt/print\">print*</a>(line: string) - output a line on the text console\n\n*<a href=\"#./alt/input\">input*</a>(message: string): Promise -> string - input a value form the text console\n\n*<a href=\"#./alt/ask\">ask*</a>(question: string): Promise -> string - ask a value in the most convenient way for the current mode\n\n*<a href=\"#./alt/say\">say*</a>(message: string) - show a message in the most convenient way for the current mode\n\n*<a href=\"#./alt/cls\">cls*</a>() - clear the text console\n\n*<a href=\"#./alt/require\">require*</a>(path: string) - get a dependent node\n\n*<a href=\"#./alt/rx\">rx*</a>(n: number): number - relative x coordinate, where *n* sets horizontal screen\nposition between [0..1]\n\n*<a href=\"#./alt/ry\">ry*</a>(n: number): number - relative y coordinate, where *n* sets vertical screen\nposition between [0..1]\n\n*<a href=\"#./alt/save\">save*</a>() - save current drawing context state\n\n*<a href=\"#./alt/restore\">restore*</a>() - restore previously saved drawing context state\n\n*<a href=\"#./alt/scale\">scale*</a>(horizontal: number, vertical: number) - scale the drawing context by *horizontal* and *vertical* factors\n\n*<a href=\"#./alt/rotate\">rotate*</a>(a: number) - rotate the drawing context on the angle *a* (in radians)\n\n*<a href=\"#./alt/translate\">translate*</a>(x: number, y: number) - translate drawing context to provided coordinates *x* and *y*\n\n*<a href=\"#./alt/clip\">clip*</a>(x: number, y: number, w: number, h: number) - clip the drawing context to provided rectangular area\n\n*<a href=\"#./alt/smooth\">smooth*</a>() - draw images with anti-aliasing\n\n*<a href=\"#./alt/blocky\">blocky*</a>() - draw images without anti-aliasing (pixel-art mode!)\n\n*<a href=\"#./alt/alpha\">alpha*</a>(alpha: number) - set global alpha for drawing operations\n\n*<a href=\"#./alt/stroke\">stroke*</a>(v: string/hex | number/integer | number/float , w: number/integer | number/float , u: number/integer | number/float , a: number/integer | number/float ) - set stroke mode and asign a line color\n\n*<a href=\"#./alt/lineWidth\">lineWidth*</a>(width: number) - set line width\n\n*<a href=\"#./alt/fill\">fill*</a>(fillColor: hex/RGB(A)/hue(a), [strokeColor: hex/RGB(A)/hue(a)]) - set fill mode and asign a fill color\n\n*<a href=\"#./alt/background\">background*</a>(color: hex/RGB(A)/hsl(a)) - fills background with provided color\n\n*<a href=\"#./alt/line\">line*</a>(x1: number, y1: number, y2: number, y2: number) - draw a line between 2 provided points\n\n*<a href=\"#./alt/plot\">plot*</a>(x: number, y: number) - draw a point with lineWidth as it's canvas size\n\n*<a href=\"#./alt/triangle\">triangle*</a>(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number) - draw a triangle\n\n*<a href=\"#./alt/quad\">quad*</a>(x1: number, y1: number, x2: number, y2: number, x3: number, y3: number, x4: number, y4: number) - draw a quad\n\n*<a href=\"#./alt/rect\">rect*</a>(x: number, y: number, w: number, h: number) - draw a rectangle\n\n*<a href=\"#./alt/circle\">circle*</a>(x: number, y: number, r: number) - draw a cirlce\n\n*<a href=\"#./alt/ellipse\">ellipse*</a>(x: number, y: number, verticalRadius: number, horizontalRadius: number, angle: number) - draw an ellipse\n\n*<a href=\"#./alt/arc\">arc*</a>(x: number, y: number, radius: number, startAngle: number, endAngle: number) - draw an arc centered at *x*/*y* with given *radius* and angles\n\n*<a href=\"#./alt/earc\">earc*</a>(x: number, y: number, radiusX: number, radiusY: number, rotation: number, startAngle: number, endAngle: number) - draw an elliptical arc centered at *x*/*y*\n\n*<a href=\"#./alt/polygon\">polygon*</a>(x1: number, y1: number, x2: number, y2: number, ...) - draw a polygon from array of points\n\n*<a href=\"#./alt/moveTo\">moveTo*</a>(x: number, y: number) - move to the next point of the shape\n\n*<a href=\"#./alt/lineTo\">lineTo*</a>(x: number, y: number) - adds a line to current path\n\n*<a href=\"#./alt/arcTo\">arcTo*</a>(x1: number, y1: number, x2: number, y2: number, radius: number) - adds an arc to the current path using 2 provided control points and radius\n\n*<a href=\"#./alt/quadraticTo\">quadraticTo*</a>(controlPointX: number, controlPointY: number, x: number, y: number) - adds a quadratic Bezier curve to current path\n\n*<a href=\"#./alt/bezierTo\">bezierTo*</a>(controlPointX1: number, controlPointY1: number, controlPointX2: number, controlPointY2: number, x: number, y: number) - adds a cubic Bezier curve to current path\n\n*<a href=\"#./alt/closePath\">closePath*</a>() - close current path\n\n*<a href=\"#./alt/shape\">shape*</a>() - stroke or fill current shape according to assigned mode\n\n*<a href=\"#./alt/font\">font*</a>(font: string/font | number/fontSize) - set current font\n\n*<a href=\"#./alt/alignLeft\">alignLeft*</a>() - align text to the left\n\n*<a href=\"#./alt/alignCenter\">alignCenter*</a>() - align text to the center\n\n*<a href=\"#./alt/alignRight\">alignRight*</a>() - align text to the right\n\n*<a href=\"#./alt/baseTop\">baseTop*</a>() - base text on top\n\n*<a href=\"#./alt/baseMiddle\">baseMiddle*</a>() - base text in the middle\n\n*<a href=\"#./alt/baseBottom\">baseBottom*</a>() - base text at the bottom\n\n*<a href=\"#./alt/text\">text*</a>(text: string, x: number, y: number) - draw text\n\n*<a href=\"#./alt/textWidth\">textWidth*</a>(text: string): number - determine the width of provided text for current font settings\n\n*<a href=\"#./alt/textHeight\">textHeight*</a>(): number - determine the height of text for current font settings\n\n*<a href=\"#./alt/image\">image*</a>(image: Image, x: number, y: number, w: number, h: number, dx: number, dy: number, dw: number, dh: number) - draw an image\n\n*<a href=\"#./alt/rgb\">rgb*</a>(red: number[0..1], green: number[0..1], blue: number[0..1]) - get the hex string color representation of provided rgb floats\n\n*<a href=\"#./alt/rgba\">rgba*</a>(red: number[0..1], green: number[0..1], blue: number[0..1], alpha: number[0..1]) - get the hex string color representation of provided rgba floats\n\n*<a href=\"#./alt/RGB\">RGB*</a>(red: number[0..255], green: number[0..255], blue: number[0..255]) - get the hex string color representation of provided RGB integers\n\n*<a href=\"#./alt/RGBA\">RGBA*</a>(red: number[0..255], green: number[0..255], blue: number[0..255], alpha: number[0..255]) - get the hex string color representation of provided RGBA integers\n\n*<a href=\"#./alt/hsl\">hsl*</a>(hue: number[0..1], saturation: number[0..1], lightness: number[0..1]) - get the hex string color representation of provided hsl floats\n\n*<a href=\"#./alt/hsla\">hsla*</a>(hue: number[0..1], saturation: number[0..1], lightness: number[0..1], alpha: number[0..1]) - get the hex string color representation of provided hsla floats\n\n*<a href=\"#./alt/RGB2HSL\">RGB2HSL*</a>()\n\n*<a href=\"#./alt/rgb2hsl\">rgb2hsl*</a>()\n\n*<a href=\"#./alt/color2RGBA\">color2RGBA*</a>()\n\n*<a href=\"#./alt/color2rgba\">color2rgba*</a>()\n\n*<a href=\"#./alt/lighten\">lighten*</a>()\n\n*<a href=\"#./alt/saturate\">saturate*</a>()\n\n*<a href=\"#./alt/shiftHue\">shiftHue*</a>()\n\n"}},"pagesInspected":13,"nodesAnnotated":401,"nodesInspected":1064,"todo":["/res/sfx/boot/name","/res/sfx/boot","/res/sfx","/res/hud/buttonPane","/res/hud/icon/array","/res/hud/icon/cue","/res/hud/icon/dna","/res/hud/icon/env","/res/hud/icon/file","/res/hud/icon/frame","/res/hud/icon/fun","/res/hud/icon/home","/res/hud/icon/lab","/res/hud/icon/lib","/res/hud/icon/log","/res/hud/icon/mod","/res/hud/icon/object","/res/hud/icon/res","/res/hud/icon/sys","/res/hud/icon/text","/res/hud/icon/trap","/res/hud/icon/up","/res/hud/icon","/res/hud","/alt/key/name","/alt/mouse/name","/alt/isClass","/alt/isContainer","/alt/E","/alt/PI","/alt/PI2","/alt/TAU","/alt/HALF_PI","/alt/RND/__defineGetter__","/alt/RND/__defineSetter__","/alt/RND/hasOwnProperty","/alt/RND/__lookupGetter__","/alt/RND/__lookupSetter__","/alt/RND/isPrototypeOf","/alt/RND/propertyIsEnumerable","/alt/RND/toString","/alt/RND/valueOf","/alt/RND/toLocaleString","/alt/RGB2HSL","/alt/rgb2hsl","/alt/color2RGBA","/alt/color2rgba","/alt/lighten","/alt/saturate","/alt/shiftHue","/dna/Emitter/init","/dna/Emitter/onExhausted","/dna/Emitter/moveParticle","/dna/Emitter/drawParticle","/dna/Emitter/createParticle","/dna/Emitter/spawn","/dna/Emitter/emit","/dna/Emitter/evo","/dna/Emitter/draw","/dna/Grid/coord","/dna/Grid/mark","/dna/Grid/draw","/dna/SlideCamera/_","/dna/SlideCamera/_ls","/dna/SlideCamera/_dir","/dna/SlideCamera/worldX","/dna/SlideCamera/worldY","/dna/SlideCamera/screenX","/dna/SlideCamera/screenY","/dna/SlideCamera/gx","/dna/SlideCamera/gy","/dna/SlideCamera/gxy","/dna/SlideCamera/lx","/dna/SlideCamera/ly","/dna/SlideCamera/lxy","/dna/SlideCamera/viewport","/dna/SlideCamera/getViewport","/dna/SlideCamera/inView","/dna/SlideCamera/bindZoom","/dna/SlideCamera/init","/dna/SlideCamera/lookAt","/dna/SlideCamera/follow","/dna/SlideCamera/zoom","/dna/SlideCamera/zoomAt","/dna/SlideCamera/startMoving","/dna/SlideCamera/stopMoving","/dna/SlideCamera/evoFollow","/dna/SlideCamera/evo","/dna/SlideCamera/draw","/dna/SlideCamera/killAll","/dna/SlideCamera/_frame","/dna/SlideCamera/_dna","/dna/text","/dna/Tiles/adjust","/dna/Tiles/draw","/dna/Tiles/pick","/dna/Tiles/gx","/dna/Tiles/gy","/dna/Tiles/lx","/dna/Tiles/ly","/dna/Tiles/collect","/dna/TilesView/mapZero","/dna/TilesView/mapImg","/dna/TilesView/mapTxt","/dna/TilesView/mapArray","/dna/TilesView/draw","/dna/hud/Transition/init","/dna/hud/Transition/transit","/dna/hud/Transition/evo","/dna/hud/Transition/drawBackground","/dna/hud/Transition/drawContent","/dna/hud/Transition/draw","/dna/hud/Transition","/dna/hud/AlphaFader/init","/dna/hud/AlphaFader/preVFX","/dna/hud/AlphaFader/postVFX","/dna/hud/Container/style","/dna/hud/Container/layout","/dna/hud/Container/adjust","/dna/hud/Container/lx","/dna/hud/Container/ly","/dna/hud/Container/gx","/dna/hud/Container/gy","/dna/hud/Container/promoteNode","/dna/hud/Container/onAttached","/dna/hud/Container/moveOnTop","/dna/hud/Container/onClick","/dna/hud/Container/onDblClick","/dna/hud/Container/onMouseDown","/dna/hud/Container/onMouseUp","/dna/hud/Container/onMouseMove","/dna/hud/Container/onMouseWheel","/dna/hud/Container/onTouchStart","/dna/hud/Container/onReleasedFocus","/dna/hud/Container/captureMouse","/dna/hud/Container/releaseMouse","/dna/hud/Container/captureTouch","/dna/hud/Container/releaseTouch","/dna/hud/Container/captureFocus","/dna/hud/Container/releaseFocus","/dna/hud/Container/onFocus","/dna/hud/Container/onUnfocus","/dna/hud/Container/drawBackground","/dna/hud/Container/drawContent","/dna/hud/Container/drawForeground","/dna/hud/Container/draw","/dna/hud/Container/_dna","/dna/hud/Container","/dna/hud/gadget/Button/injectStyle","/dna/hud/gadget/Button/adjust","/dna/hud/gadget/Button/onMouseDown","/dna/hud/gadget/Button/onMouseUp","/dna/hud/gadget/Button/onMouseDrag","/dna/hud/gadget/Button/onMouseMove","/dna/hud/gadget/Button/getState","/dna/hud/gadget/Button/drawBackground","/dna/hud/gadget/Button/drawContent","/dna/hud/gadget/Button/draw","/dna/hud/gadget/Slider/onMouseDown","/dna/hud/gadget/Slider/onMouseUp","/dna/hud/gadget/Slider/onMouseWheel","/dna/hud/gadget/Slider/drag","/dna/hud/gadget/Slider/onScroll","/dna/hud/gadget/Slider/slide","/dna/hud/gadget/Slider/set","/dna/hud/gadget/Slider/val","/dna/hud/gadget/Slider/top","/dna/hud/gadget/Slider/drawBackground","/dna/hud/gadget/Slider/_dna","/dna/hud/gadget/Console/resize","/dna/hud/gadget/Console/adjustSliders","/dna/hud/gadget/Console/onFocus","/dna/hud/gadget/Console/clear","/dna/hud/gadget/Console/pushLine","/dna/hud/gadget/Console/pushText","/dna/hud/gadget/Console/print","/dna/hud/gadget/Console/echo","/dna/hud/gadget/Console/execute","/dna/hud/gadget/Console/onCommand","/dna/hud/gadget/Console/onKeyDown","/dna/hud/gadget/Console/onMouseWheel","/dna/hud/gadget/Console/evo","/dna/hud/gadget/Console/drawForeground","/dna/hud/gadget/Console/_dna","/dna/hud/gadget/DynamicList/resize","/dna/hud/gadget/DynamicList/adjust","/dna/hud/gadget/DynamicList/adjustPosition","/dna/hud/gadget/DynamicList/items","/dna/hud/gadget/DynamicList/onDblClick","/dna/hud/gadget/DynamicList/onClick","/dna/hud/gadget/DynamicList/onItemClick","/dna/hud/gadget/DynamicList/onItemAction","/dna/hud/gadget/DynamicList/moveCursor","/dna/hud/gadget/DynamicList/onKeyDown","/dna/hud/gadget/DynamicList/onKeyUp","/dna/hud/gadget/DynamicList/onMouseWheel","/dna/hud/gadget/DynamicList/itemHeight","/dna/hud/gadget/DynamicList/drawItem","/dna/hud/gadget/DynamicList/drawBackground","/dna/hud/gadget/DynamicList/drawForeground","/dna/hud/gadget/DynamicList/_dna","/dna/hud/gadget/Explorer/selectedNode","/dna/hud/gadget/Explorer/open","/dna/hud/gadget/Explorer/init","/dna/hud/gadget/Explorer/setPane","/dna/hud/gadget/Explorer/attach","/dna/hud/gadget/Explorer/injectStyle","/dna/hud/gadget/Explorer/onFocus","/dna/hud/gadget/Explorer/resize","/dna/hud/gadget/Explorer/adjust","/dna/hud/gadget/Explorer/_dna","/dna/hud/gadget/Explorer","/dna/hud/gadget/Eyes/draw","/dna/hud/gadget/FrameInspector/saveLocation","/dna/hud/gadget/FrameInspector/back","/dna/hud/gadget/FrameInspector/onKeyDown","/dna/hud/gadget/FrameInspector/updatePath","/dna/hud/gadget/FrameInspector/item","/dna/hud/gadget/FrameInspector/selectedNode","/dna/hud/gadget/FrameInspector/open","/dna/hud/gadget/FrameInspector/onItemAction","/dna/hud/gadget/FrameInspector/drawItem","/dna/hud/gadget/FrameInspector/onItemClick","/dna/hud/gadget/FrameInspector/_dna","/dna/hud/gadget/ImageButton/adjust","/dna/hud/gadget/ImageButton/drawBackground","/dna/hud/gadget/ImageButton/drawImage","/dna/hud/gadget/ImageButton/draw","/dna/hud/gadget/ImageInspector/open","/dna/hud/gadget/ImageInspector/drawContent","/dna/hud/gadget/ImageInspector/onKeyDown","/dna/hud/gadget/ImageInspector/drawBackground","/dna/hud/gadget/ImageInspector/drawContent","/dna/hud/gadget/ImageInspector/draw","/dna/hud/gadget/Label/init","/dna/hud/gadget/Label/setStyle","/dna/hud/gadget/Label/adjust","/dna/hud/gadget/Label/setText","/dna/hud/gadget/Label/draw","/dna/hud/gadget/Magnify/verifyZPosition","/dna/hud/gadget/Magnify/_dna","/dna/hud/gadget/TextPane/setText","/dna/hud/gadget/TextPane/adjust","/dna/hud/gadget/TextPane/moveTo","/dna/hud/gadget/TextPane/scroll","/dna/hud/gadget/TextPane/prerender","/dna/hud/gadget/TextPane/drawContent","/dna/hud/gadget/TextPane/drawBackground","/dna/hud/gadget/TextView/adjust","/dna/hud/gadget/TextView/sync","/dna/hud/gadget/TextView/moveCursor","/dna/hud/gadget/TextView/setText","/dna/hud/gadget/TextView/onKeyDown","/dna/hud/gadget/TextView/_dna","/dna/hud/gadget/NodeInspector/init","/dna/hud/gadget/NodeInspector/layout","/dna/hud/gadget/NodeInspector/selectedNode","/dna/hud/gadget/NodeInspector/ensureActive","/dna/hud/gadget/NodeInspector/sync","/dna/hud/gadget/NodeInspector/back","/dna/hud/gadget/NodeInspector/open","/dna/hud/gadget/NodeInspector/land","/dna/hud/gadget/NodeInspector/select","/dna/hud/gadget/NodeInspector/getDir","/dna/hud/gadget/NodeInspector/onFocus","/dna/hud/gadget/NodeInspector/onKeyDown","/dna/hud/gadget/NodeInspector/adjust","/dna/hud/gadget/NodeInspector/activate","/dna/hud/gadget/NodeInspector/drawContent","/dna/hud/gadget/NodeInspector/draw","/dna/hud/gadget/NodeInspector/onClick","/dna/hud/gadget/NodeInspector/onDblClick","/dna/hud/gadget/NodeInspector/onMouseDown","/dna/hud/gadget/NodeInspector/onMouseUp","/dna/hud/gadget/NodeInspector/onMouseMove","/dna/hud/gadget/NodeInspector/onMouseWheel","/dna/hud/gadget/NodeInspector/onTouchStart","/dna/hud/gadget/NodeInspector/onTouchEnd","/dna/hud/gadget/NodeInspector/onReleasedFocus","/dna/hud/gadget/NodeInspector/_dna","/dna/hud/gadget/Progress/getText","/dna/hud/gadget/Progress/draw","/dna/hud/gadget","/dna/hud/Window/_dna","/dna/hud/Window","/dna/hud/MonoContainer/_dna","/dna/hud/MonoContainer","/dna/hud/Hud/init","/dna/hud/Hud/injectTraps","/dna/hud/Hud/style","/dna/hud/Hud/saveSize","/dna/hud/Hud/isResized","/dna/hud/Hud/adjust","/dna/hud/Hud/lx","/dna/hud/Hud/ly","/dna/hud/Hud/lxy","/dna/hud/Hud/gx","/dna/hud/Hud/gy","/dna/hud/Hud/gxy","/dna/hud/Hud/onMouseDown","/dna/hud/Hud/onMouseUp","/dna/hud/Hud/onMouseMove","/dna/hud/Hud/onTouchEnd","/dna/hud/Hud/onKeyDown","/dna/hud/Hud/onKeyUp","/dna/hud/Hud/expand","/dna/hud/Hud/captureMouse","/dna/hud/Hud/releaseMouse","/dna/hud/Hud/captureTouch","/dna/hud/Hud/releaseTouch","/dna/hud/Hud/captureFocus","/dna/hud/Hud/releaseFocus","/dna/hud/Hud/draw","/dna/hud/Hud/_dna","/dna/hud/trait/Component","/dna/hud/trait/Draggable/onMouseDrag","/dna/hud/trait/Draggable","/dna/hud/trait/name","/dna/hud/trait","/dna/hud/Menu/syncTheme","/dna/hud/Menu/show","/dna/hud/Menu/hide","/dna/hud/Menu/selectFrom","/dna/hud/Menu/slideToActiveItem","/dna/hud/Menu/next","/dna/hud/Menu/prev","/dna/hud/Menu/left","/dna/hud/Menu/right","/dna/hud/Menu/select","/dna/hud/Menu/back","/dna/hud/Menu/activate","/dna/hud/Menu/focusOn","/dna/hud/Menu/draw","/dna/hud/Menu/currentItem","/dna/hud/Menu/selectedValue","/dna/hud/Menu/evo","/dna/hud/Menu","/dna/hud","/dna/kinetix/easing/saw","/dna/kinetix/easing/triangle","/dna/kinetix/easing/sin","/dna/kinetix/easing/quad","/dna/kinetix/easing/cubic","/dna/kinetix/easing/quart","/dna/kinetix/easing/elastic","/dna/kinetix/easing/cubicBezier","/dna/kinetix/easing/name","/dna/kinetix/easing","/dna/kinetix/key/setup","/dna/kinetix/key/activate","/dna/kinetix/key/tick","/dna/kinetix/key/step","/dna/kinetix/key/apply","/dna/kinetix/key/evo","/dna/kinetix/key/then","/dna/kinetix/key/kill","/dna/kinetix/key/name","/dna/kinetix/Kinetix/push","/dna/kinetix/Kinetix/key","/dna/kinetix/Kinetix/evo","/dna/kinetix/Kinetix","/dna/kinetix","/lib/hud/style","/lib/hud/line","/lib/hud/rect","/lib/hud/panel","/lib/hud/button","/lib/hud/name","/lib/hud","/lib/array/name","/lib/asserts/name","/lib/img/TileSet/init","/lib/img/TileSet/draw","/lib/img/name","/lib/img","/lib/math/name","/lib/math/PI","/lib/math/PI2","/lib/math/getSeed","/lib/math/setSeed","/lib/math/RND","/lib/objUtil/assertIsPositionalObj","/lib/objUtil/findObj","/lib/objUtil/rayTraceRadial","/lib/objUtil/name","/lib/v2/copy","/lib/v2/create","/lib/v2/unit","/lib/v2/zero","/lib/v2/normal","/lib/v2/inverse","/lib/v2/at","/lib/v2/add","/lib/v2/sub","/lib/v2/dot","/lib/v2/mul","/lib/v2/length","/lib/v2/length2","/lib/v2/init","/lib/v2/scale","/lib/v2/dump","/lib/v2/name","/lib/v2/angle","/lib/v2","/lib/v2a/bearing","/lib/v2a/add","/lib/v2a/sub","/lib/v2a/subxy","/lib/v2a/dot","/lib/v2a/mul","/lib/v2a/mulxy","/lib/v2a/length","/lib/v2a/length2","/lib/v2a/angle","/lib/v2a/dump","/lib/v2a/name","/lib/v2a","/env/hud/font","/env/hud/base","/env/hud/base.hi","/env/hud/base.low","/env/hud/content","/env/hud/content.low","/env/hud/content.hi","/env/hud/content.yellow","/env/hud/content.orange","/env/hud/content.red","/env/hud/content.magenta","/env/hud/content.violet","/env/hud/content.blue","/env/hud/content.cyan","/env/hud/content.green","/env/hud/line","/env/hud/baseHeight","/env/hud/background/base","/env/hud/background","/env/hud/title/content","/env/hud/title/font","/env/hud/title","/env/hud/window/content","/env/hud/window/tag/base.hi","/env/hud/window/tag/base","/env/hud/window/tag","/env/hud/window/bar/base","/env/hud/window/bar","/env/hud/window/control/base","/env/hud/window/control/content","/env/hud/window/control","/env/hud/window","/env/hud/name","/env/hud","/env/bind/indexKeys","/env/bind/init","/env/bind/keyboard","/env/bind/keyMap/KeyW/player","/env/bind/keyMap/KeyW","/env/bind/keyMap/KeyA/id","/env/bind/keyMap/KeyA/player","/env/bind/keyMap/KeyA","/env/bind/keyMap/KeyS/id","/env/bind/keyMap/KeyS/player","/env/bind/keyMap/KeyS","/env/bind/keyMap/KeyD/id","/env/bind/keyMap/KeyD/player","/env/bind/keyMap/KeyD","/env/bind/keyMap/KeyE/id","/env/bind/keyMap/KeyE/player","/env/bind/keyMap/KeyE","/env/bind/keyMap/KeyQ/id","/env/bind/keyMap/KeyQ/player","/env/bind/keyMap/KeyQ","/env/bind/keyMap/Space/id","/env/bind/keyMap/Space/player","/env/bind/keyMap/Space","/env/bind/keyMap/RightShift/id","/env/bind/keyMap/RightShift/player","/env/bind/keyMap/RightShift","/env/bind/keyMap/ArrowUp/player","/env/bind/keyMap/ArrowUp","/env/bind/keyMap/ArrowLeft/id","/env/bind/keyMap/ArrowLeft/player","/env/bind/keyMap/ArrowLeft","/env/bind/keyMap/ArrowDown/id","/env/bind/keyMap/ArrowDown/player","/env/bind/keyMap/ArrowDown","/env/bind/keyMap/ArrowRight/id","/env/bind/keyMap/ArrowRight/player","/env/bind/keyMap/ArrowRight","/env/bind/keyMap/ShiftRight/id","/env/bind/keyMap/ShiftRight/player","/env/bind/keyMap/ShiftRight","/env/bind/keyMap/Enter/id","/env/bind/keyMap/Enter/player","/env/bind/keyMap/Enter","/env/bind/keyMap/Numpad8/player","/env/bind/keyMap/Numpad8","/env/bind/keyMap/Numpad4/id","/env/bind/keyMap/Numpad4/player","/env/bind/keyMap/Numpad4","/env/bind/keyMap/Numpad2/id","/env/bind/keyMap/Numpad2/player","/env/bind/keyMap/Numpad2","/env/bind/keyMap/Numpad6/id","/env/bind/keyMap/Numpad6/player","/env/bind/keyMap/Numpad6","/env/bind/keyMap/KeyX/id","/env/bind/keyMap/KeyX/player","/env/bind/keyMap/KeyX","/env/bind/keyMap/KeyZ/id","/env/bind/keyMap/KeyZ/player","/env/bind/keyMap/KeyZ","/env/bind/keyMap/KeyO/id","/env/bind/keyMap/KeyO/player","/env/bind/keyMap/KeyO","/env/bind/keyMap/KeyP/id","/env/bind/keyMap/KeyP/player","/env/bind/keyMap/KeyP","/env/bind/keyMap","/env/bind/padMap","/env/bind/name","/env/bind","/env/style/font","/env/style/titleFont","/env/style/holdBeforeStart","/env/style/titleTimeout","/env/style/scoreTimeout","/env/style/fadeIn","/env/style/keep","/env/style/fadeOut","/env/style/cellSize","/env/style/repairBlinkPeriod","/env/style/destroyExplosions","/env/style/border","/env/style/color/c0","/env/style/color/c1","/env/style/color/c2","/env/style/color/c3","/env/style/color","/env/style/palette/sand/c0","/env/style/palette/sand/c1","/env/style/palette/sand/c2","/env/style/palette/sand/c3","/env/style/palette/sand","/env/style/palette/blue/c0","/env/style/palette/blue/c1","/env/style/palette/blue/c2","/env/style/palette/blue/c3","/env/style/palette/blue","/env/style/palette/cga0/c0","/env/style/palette/cga0/c1","/env/style/palette/cga0/c2","/env/style/palette/cga0/c3","/env/style/palette/cga0","/env/style/palette/cga1/c0","/env/style/palette/cga1/c1","/env/style/palette/cga1/c2","/env/style/palette/cga1/c3","/env/style/palette/cga1","/env/style/palette/sweet/c0","/env/style/palette/sweet/c1","/env/style/palette/sweet/c2","/env/style/palette/sweet/c3","/env/style/palette/sweet","/env/style/palette/jet/c0","/env/style/palette/jet/c1","/env/style/palette/jet/c2","/env/style/palette/jet/c3","/env/style/palette/jet","/env/style/palette/boy/c0","/env/style/palette/boy/c1","/env/style/palette/boy/c2","/env/style/palette/boy/c3","/env/style/palette/boy","/env/style/palette/purple/c0","/env/style/palette/purple/c1","/env/style/palette/purple/c2","/env/style/palette/purple/c3","/env/style/palette/purple","/env/style/palette/vapor/c0","/env/style/palette/vapor/c1","/env/style/palette/vapor/c2","/env/style/palette/vapor/c3","/env/style/palette/vapor","/env/style/palette/aqu4/c0","/env/style/palette/aqu4/c1","/env/style/palette/aqu4/c2","/env/style/palette/aqu4/c3","/env/style/palette/aqu4","/env/style/palette/amber/c0","/env/style/palette/amber/c1","/env/style/palette/amber/c2","/env/style/palette/amber/c3","/env/style/palette/amber","/env/style/palette/astro/c0","/env/style/palette/astro/c1","/env/style/palette/astro/c2","/env/style/palette/astro/c3","/env/style/palette/astro","/env/style/palette","/env/style/name","/env/style","/lab/control/pad/activate","/lab/control/pad/isActive","/lab/control/pad/evo","/lab/control/pad/USAGE_TIMEOUT","/lab/control/pad/lastUsage","/lab/control/pad/name","/lab/control/player/bindAll","/lab/control/player/unbindAll","/lab/control/player/release","/lab/control/player/releaseAll","/lab/control/player/act","/lab/control/player/stop","/lab/control/player/stopAll","/lab/control/player/evo","/lab/control/player/MAX_PLAYERS","/lab/control/player/MAX_ACTIONS","/lab/control/player/ON","/lab/control/player/ctrl","/lab/control/player/targetMap","/lab/control/player/name","/lab/control/player","/lab/control","/trap/keyDown","/trap/keyUp","/sys/Mod/disableOthers","/sys/Mod/enableOthers","/sys/Mod/_dna","/sys/Frame/_dna","/sys/LabFrame/_dna","/sys/CueFrame/touch","/sys/CueFrame/attach","/sys/CueFrame/evo","/sys/CueFrame/pause","/sys/CueFrame/resume","/sys/CueFrame/_dna","/sys/CueFrame","/sys/removeExtension","/sys/spawnCache/cache","/sys/spawnCache/push","/sys/spawnCache/lookupKids","/sys/spawnCache/name","/sys/InjectLabFrame/onReplace","/sys/InjectLabFrame/release","/sys/InjectLabFrame/_dna","/sys/ClipFrame/draw","/sys/ClipFrame/_dna","/sys/FloatNode/onReplace","/sys/FloatNode/evo","/sys/FloatNode/draw","/sys/FloatNode/release","/sys/FloatNode/_dna","/sys/PosFrame/draw","/sys/PosFrame/lx","/sys/PosFrame/ly","/sys/PosFrame/lxy","/sys/PosFrame/gx","/sys/PosFrame/gy","/sys/PosFrame/gxy","/sys/PosFrame/_dna","/sys/RotateFrame/draw","/sys/RotateFrame/lxy","/sys/RotateFrame/gxy","/sys/RotateFrame/labVector","/sys/RotateFrame/_dna","/sys/ScaleFrame/draw","/sys/ScaleFrame/lx","/sys/ScaleFrame/ly","/sys/ScaleFrame/lxy","/sys/ScaleFrame/gx","/sys/ScaleFrame/gy","/sys/ScaleFrame/gxy","/sys/ScaleFrame/labVector","/sys/ScaleFrame/_dna","/sys/TransformFrame/draw","/sys/TransformFrame/lxy","/sys/TransformFrame/gxy","/sys/TransformFrame/labVector","/sys/TransformFrame/_dna","/log/trace","/log/list","/boot/init","/boot/evoWorm","/boot/drawWorm","/boot/spawnTextSegment","/boot/spawnLineSegment","/boot/spawnSegment","/boot/spawnWorm","/boot/evoContent","/boot/drawContent","/boot/evoBoot","/boot/evo","/boot/draw","/boot/BASE","/boot/FBASE","/boot/R3","/boot/POWERED_BY","/boot/ERROR","/boot/FADEIN","/boot/FADEOUT","/boot/STABLE","/boot/CONNECTOR","/boot/LABEL","/boot/DEAD","/boot/FQ","/boot/R1","/boot/R2","/boot/SPEED","/boot/RSPEED","/boot/TSPEED","/boot/STEP","/boot/STEPV","/boot/W","/boot/FADE","/boot/TEXT_FADEOUT","/boot/MIN_ANGLE","/boot/MAX_ANGLE","/boot/worms","/boot/targets","/boot/name","/pak/load","/pak/mount","/pak/fixMode","/pak/name"]}